{
  "bitprim-cs/Bitprim.Executor.html": {
    "href": "bitprim-cs/Bitprim.Executor.html",
    "title": "Class Executor | Bitprim Documentation Site",
    "keywords": "Class Executor Controls the execution of the Bitprim bitcoin node. Inheritance Object Executor Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Executor : IDisposable Constructors | Improve this Doc View Source Executor(String) Create executor. Does not init database or start execution yet. Declaration public Executor(string configFile) Parameters Type Name Description String configFile Path to configuration file. | Improve this Doc View Source Executor(String, IntPtr, IntPtr) Create executor. Does not init database or start execution yet. Declaration public Executor(string configFile, IntPtr stdOut, IntPtr stdErr) Parameters Type Name Description String configFile Path to configuration file. IntPtr stdOut Handle for redirecting standard output. IntPtr stdErr Handle for redirecting standard output. Properties | Improve this Doc View Source Chain The node's query interface. Will be null until node starts running (i.e. Run or RunWait succeeded) Declaration public Chain Chain { get; } Property Value Type Description Chain | Improve this Doc View Source IsLoadConfigValid Declaration public bool IsLoadConfigValid { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStopped Declaration public bool IsStopped { get; } Property Value Type Description Boolean | Improve this Doc View Source NetworkType The node's network. Won't be valid until node starts running (i.e. Run or RunWait succeeded) Declaration public NetworkType NetworkType { get; } Property Value Type Description NetworkType | Improve this Doc View Source UseTestnetRules Returns true iif the current network is a testnet. Declaration public bool UseTestnetRules { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source InitAndRunAsync() Initialize if necessary and starts running the node; blockchain starts synchronizing (downloading). The call returns right away, and the handler is invoked when the node actually starts running. Declaration public Task<int> InitAndRunAsync() Returns Type Description Task < Int32 > Error code (0 = success) | Improve this Doc View Source InitChain() Initialize the local dabatase structure. Declaration public bool InitChain() Returns Type Description Boolean True iif local chain init succeeded | Improve this Doc View Source RunAsync() Starts running the node; blockchain starts synchronizing (downloading). The call returns right away, and the handler is invoked when the node actually starts running. Declaration public Task<int> RunAsync() Returns Type Description Task < Int32 > Error code (0 = success) | Improve this Doc View Source Stop() Stops the node; that includes all activies, such as synchronization and networking. Declaration public void Stop() | Improve this Doc View Source SubscribeToBlockChain(Executor.BlockHandler) Be notified (called back) when the local copy of the blockchain is reorganized. Declaration public void SubscribeToBlockChain(Executor.BlockHandler handler) Parameters Type Name Description Executor.BlockHandler handler Callback which will be called when blocks are added or removed. The callback returns 3 parameters: Height (UInt64): The chain height at which reorganization takes place Incoming (Blocklist): Incoming blocks (added to the blockchain). Outgoing (Blocklist): Outgoing blocks (removed from the blockchain). | Improve this Doc View Source SubscribeToTransaction(Executor.TransactionHandler) Be notified (called back) when the local copy of the blockchain is updated at the transaction level. Declaration public void SubscribeToTransaction(Executor.TransactionHandler handler) Parameters Type Name Description Executor.TransactionHandler handler Callback which will be called when a transaction is added."
  },
  "bitprim-cs/Bitprim.Executor.BlockHandler.html": {
    "href": "bitprim-cs/Bitprim.Executor.BlockHandler.html",
    "title": "Delegate Executor.BlockHandler | Bitprim Documentation Site",
    "keywords": "Delegate Executor.BlockHandler Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public delegate bool BlockHandler(ErrorCode e, UInt64 u, BlockList incoming, BlockList outgoing); Parameters Type Name Description ErrorCode e UInt64 u BlockList incoming BlockList outgoing Returns Type Description Boolean"
  },
  "bitprim-cs/Bitprim.CurrencyType.html": {
    "href": "bitprim-cs/Bitprim.CurrencyType.html",
    "title": "Enum CurrencyType | Bitprim Documentation Site",
    "keywords": "Enum CurrencyType Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum CurrencyType : int Fields Name Description Bitcoin BitcoinCash Litecoin None"
  },
  "bitprim-cs/Bitprim.BlockList.html": {
    "href": "bitprim-cs/Bitprim.BlockList.html",
    "title": "Class BlockList | Bitprim Documentation Site",
    "keywords": "Class BlockList Inheritance Object NativeList < Block > BlockList Implements IDisposable Inherited Members NativeList<Block>.GetEnumerator() NativeList<Block>.Dispose() NativeList<Block>.Dispose(Boolean) NativeList<Block>.Item[UInt32] NativeList<Block>.Count NativeList<Block>.Add(Block) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class BlockList : NativeList<Block>, IDisposable Methods | Improve this Doc View Source AddElement(Block) Declaration public override void AddElement(Block element) Parameters Type Name Description Block element Overrides Bitprim.NativeList<Bitprim.Block>.AddElement(Bitprim.Block) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Block>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Block>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Block>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override Block GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Block Overrides Bitprim.NativeList<Bitprim.Block>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.Binary.html": {
    "href": "bitprim-cs/Bitprim.Binary.html",
    "title": "Class Binary | Bitprim Documentation Site",
    "keywords": "Class Binary Represents a binary filter. Inheritance Object Binary Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Binary : IDisposable Constructors | Improve this Doc View Source Binary() Create an empty binary object. Declaration public Binary() | Improve this Doc View Source Binary(String) Creates a binary filter from a binary string. Declaration public Binary(string hexString) Parameters Type Name Description String hexString Binary string. Example: '10111010101011011111000000001101' | Improve this Doc View Source Binary(UInt64, Byte[], UInt64) Creates a binary filter from an int array. Declaration public Binary(UInt64 bitsSize, byte[] blocks, UInt64 n) Parameters Type Name Description UInt64 bitsSize Elements size Byte [] blocks Filter representation. Example: '[186,173,240,13]'. UInt64 n Array length in amount of elements. Properties | Improve this Doc View Source Encoded Filter representation as binary string. Declaration public string Encoded { get; } Property Value Type Description String Methods | Improve this Doc View Source ByteArrayToHexString(Byte[]) Convert byte array to hex tring Declaration public static string ByteArrayToHexString(byte[] ba) Parameters Type Name Description Byte [] ba Byte array Returns Type Description String Hex string representation, with as many characters as bytes | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source HexStringToByteArray(String) Convert hex string to byte array Declaration public static byte[] HexStringToByteArray(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Byte [] ASCII byte array | Improve this Doc View Source HexStringToByteArray(String, Boolean) Convert hex string to byte array Declaration public static byte[] HexStringToByteArray(string hex, bool reverse) Parameters Type Name Description String hex Hex string Boolean reverse Reverse the resulting array Returns Type Description Byte [] ASCII byte array"
  },
  "bitprim-cs/Bitprim.TransactionList.html": {
    "href": "bitprim-cs/Bitprim.TransactionList.html",
    "title": "Class TransactionList | Bitprim Documentation Site",
    "keywords": "Class TransactionList Inheritance Object NativeList < Transaction > TransactionList Implements IDisposable Inherited Members NativeList<Transaction>.GetEnumerator() NativeList<Transaction>.Dispose() NativeList<Transaction>.Dispose(Boolean) NativeList<Transaction>.Item[UInt32] NativeList<Transaction>.Count NativeList<Transaction>.Add(Transaction) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class TransactionList : NativeList<Transaction>, IDisposable Methods | Improve this Doc View Source AddElement(Transaction) Declaration public override void AddElement(Transaction element) Parameters Type Name Description Transaction element Overrides Bitprim.NativeList<Bitprim.Transaction>.AddElement(Bitprim.Transaction) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Transaction>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Transaction>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Transaction>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override Transaction GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Transaction Overrides Bitprim.NativeList<Bitprim.Transaction>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.Transaction.html": {
    "href": "bitprim-cs/Bitprim.Transaction.html",
    "title": "Class Transaction | Bitprim Documentation Site",
    "keywords": "Class Transaction Represents a Bitcoin transaction. Inheritance Object Transaction Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Transaction : IDisposable Constructors | Improve this Doc View Source Transaction() Create an empty tramsaction. Declaration public Transaction() | Improve this Doc View Source Transaction(UInt32, String) Create a transaction from its binary hex representation. Declaration public Transaction(UInt32 version, string hexString) Parameters Type Name Description UInt32 version Transaction protocol version. String hexString Raw transaction in hex | Improve this Doc View Source Transaction(UInt32, UInt32, InputList, OutputList) Create a transaction from its version, locktime, inputs and outputs (all its data). Declaration public Transaction(UInt32 version, UInt32 locktime, InputList inputs, OutputList outputs) Parameters Type Name Description UInt32 version Transaction protocol version. UInt32 locktime Transaction locktime. InputList inputs A list with all the transaction inputs. OutputList outputs A list with all the transaction outputs. Properties | Improve this Doc View Source Fees Fees to pay to the winning miner. Declaration public UInt64 Fees { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Inputs A list with all the transaction inputs. Declaration public InputList Inputs { get; } Property Value Type Description InputList | Improve this Doc View Source IsCoinbase Returns true if and only if this is a coinbase transaction (i.e. generates new coins). Declaration public bool IsCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocktimeConflict Returns true if and only if the transaction is locked and every input is final, false otherwise. Declaration public bool IsLocktimeConflict { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMissingPreviousOutputs Returns true if and only if at least one of the previous outputs is invalid, false otherwise. Declaration public bool IsMissingPreviousOutputs { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNullNonCoinbase Return true if and only if the transaction is not coinbase and has a null previous output, false otherwise. Declaration public bool IsNullNonCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOversizeCoinbase Returns true if the transaction is coinbase and has an invalid script size on its first input. Declaration public bool IsOversizeCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverspent Returns true if transaction is not a coinbase, and the sum of its outputs is higher than the sum of its inputs, false otherwise. Declaration public bool IsOverspent { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns true if and only if this transaction is valid according to the protocol. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Locktime Transaction locktime. Declaration public UInt32 Locktime { get; } Property Value Type Description UInt32 | Improve this Doc View Source Outputs A list with all the transaction outputs. Declaration public OutputList Outputs { get; } Property Value Type Description OutputList | Improve this Doc View Source SignatureOperations Amount of signature operations in the transaction. Declaration public UInt64 SignatureOperations { get; } Property Value Type Description UInt64 | Improve this Doc View Source TotalInputValue Sum of every input value in the transaction. Declaration public UInt64 TotalInputValue { get; } Property Value Type Description UInt64 | Improve this Doc View Source TotalOutputValue Sum of every output value in the transaction. Declaration public UInt64 TotalOutputValue { get; } Property Value Type Description UInt64 | Improve this Doc View Source Version Transaction protocol version. Declaration public UInt32 Version { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetHashBySigHashType(UInt32) 32 bytes transaction hash + 4 bytes signature hash type Declaration public byte[] GetHashBySigHashType(UInt32 sigHashType) Parameters Type Name Description UInt32 sigHashType Sighash type. Returns Type Description Byte [] Hash and sighash type. | Improve this Doc View Source GetSerializedSize(Boolean) Transaction size in bytes. Declaration public UInt64 GetSerializedSize(bool wire = true) Parameters Type Name Description Boolean wire If and only if true, size will include size of 'uint32' for storing spender output height Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source GetSignatureOperationsBip16Active(Boolean) Amount of signature operations in the transactions. Declaration public UInt64 GetSignatureOperationsBip16Active(bool bip16Active) Parameters Type Name Description Boolean bip16Active True if and only if BIP16 is active, false otherwise. Returns Type Description UInt64 | Improve this Doc View Source IsDoubleSpend(Boolean) Returns true if at least one of the previous outputs was already spent, false otherwise. Declaration public bool IsDoubleSpend(bool includeUnconfirmed) Parameters Type Name Description Boolean includeUnconfirmed Iif true, consider unconfirmed transactions. Returns Type Description Boolean True if and only if transaction is double spend. | Improve this Doc View Source IsFinal(UInt64, UInt32) Returns true if and only if the transaction is final, false otherwise. Declaration public bool IsFinal(UInt64 blockHeight, UInt32 blockTime) Parameters Type Name Description UInt64 blockHeight UInt32 blockTime Returns Type Description Boolean | Improve this Doc View Source IsImmature(UInt64) Returns true if and only if at least one of the inputs is not mature, false otherwise. Declaration public bool IsImmature(UInt64 targetHeight) Parameters Type Name Description UInt64 targetHeight Returns Type Description Boolean | Improve this Doc View Source ToData(Boolean) Raw transaction data. Declaration public byte[] ToData(bool wire) Parameters Type Name Description Boolean wire Iif true, include data size at the beginning. Returns Type Description Byte [] Byte array with transaction data."
  },
  "bitprim-cs/Bitprim.Script.html": {
    "href": "bitprim-cs/Bitprim.Script.html",
    "title": "Class Script | Bitprim Documentation Site",
    "keywords": "Class Script Represents a transaction script. Inheritance Object Script Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Script : IDisposable Properties | Improve this Doc View Source IsValid All script bytes are valid under some circumstance (e.g. coinbase). Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source OperationsAreValid Script validity is independent of individual operation validity. Operations are considered invalid if there is a trailing invalid/default op or if a push op has a size mismatch. Declaration public bool OperationsAreValid { get; } Property Value Type Description Boolean | Improve this Doc View Source SatoshiContentSize Size in bytes. Declaration public UInt64 SatoshiContentSize { get; } Property Value Type Description UInt64 | Improve this Doc View Source Type Script type Declaration public string Type { get; } Property Value Type Description String Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetEmbeddedSigOps(Script) Count the sigops in the embedded script using BIP16 rules. Declaration public UInt64 GetEmbeddedSigOps(Script prevOutScript) Parameters Type Name Description Script prevOutScript Reference to previous output script. Returns Type Description UInt64 Embedded sigops count. | Improve this Doc View Source GetSigOps(Boolean) Amount of signature operations in the script. Declaration public UInt64 GetSigOps(bool embedded) Parameters Type Name Description Boolean embedded Iif true, consider this an embedded script. Returns Type Description UInt64 Sigops count. | Improve this Doc View Source ToData(Boolean) Raw script data Declaration public byte[] ToData(bool prefix) Parameters Type Name Description Boolean prefix Tells whether to include script size in data Returns Type Description Byte [] Byte array with script data | Improve this Doc View Source ToString(UInt32) Translate operations in the script to a string. Declaration public string ToString(UInt32 activeForks) Parameters Type Name Description UInt32 activeForks Tells which rule is active. Returns Type Description String Human readable script."
  },
  "bitprim-cs/Bitprim.PointList.html": {
    "href": "bitprim-cs/Bitprim.PointList.html",
    "title": "Class PointList | Bitprim Documentation Site",
    "keywords": "Class PointList Inheritance Object NativeList < Point > PointList Implements IDisposable Inherited Members NativeList<Point>.GetEnumerator() NativeList<Point>.Dispose() NativeList<Point>.Dispose(Boolean) NativeList<Point>.Item[UInt32] NativeList<Point>.Count NativeList<Point>.Add(Point) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class PointList : NativeList<Point>, IDisposable Methods | Improve this Doc View Source AddElement(Point) Declaration public override void AddElement(Point element) Parameters Type Name Description Point element Overrides Bitprim.NativeList<Bitprim.Point>.AddElement(Bitprim.Point) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Point>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Point>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Point>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override Point GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Point Overrides Bitprim.NativeList<Bitprim.Point>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.MempoolTransactionList.html": {
    "href": "bitprim-cs/Bitprim.MempoolTransactionList.html",
    "title": "Class MempoolTransactionList | Bitprim Documentation Site",
    "keywords": "Class MempoolTransactionList Inheritance Object NativeList < MempoolTransaction > MempoolTransactionList Implements IDisposable Inherited Members NativeList<MempoolTransaction>.GetEnumerator() NativeList<MempoolTransaction>.Dispose() NativeList<MempoolTransaction>.Dispose(Boolean) NativeList<MempoolTransaction>.Item[UInt32] NativeList<MempoolTransaction>.Count NativeList<MempoolTransaction>.Add(MempoolTransaction) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MempoolTransactionList : NativeList<MempoolTransaction>, IDisposable Methods | Improve this Doc View Source AddElement(MempoolTransaction) Declaration public override void AddElement(MempoolTransaction element) Parameters Type Name Description MempoolTransaction element Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.AddElement(Bitprim.MempoolTransaction) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override MempoolTransaction GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description MempoolTransaction Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.MempoolTransaction.html": {
    "href": "bitprim-cs/Bitprim.MempoolTransaction.html",
    "title": "Class MempoolTransaction | Bitprim Documentation Site",
    "keywords": "Class MempoolTransaction Represents an unconfirmed transaction. Inheritance Object MempoolTransaction Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MempoolTransaction : object Properties | Improve this Doc View Source Address Transaction output address Declaration public string Address { get; } Property Value Type Description String | Improve this Doc View Source Hash Transaction hash (unique identifier) Declaration public string Hash { get; } Property Value Type Description String | Improve this Doc View Source Index Transaction index Declaration public UInt64 Index { get; } Property Value Type Description UInt64 | Improve this Doc View Source PreviousOutputHash Previous output transaction hash Declaration public string PreviousOutputHash { get; } Property Value Type Description String | Improve this Doc View Source PreviousOutputIndex Previous output transaction index Declaration public string PreviousOutputIndex { get; } Property Value Type Description String | Improve this Doc View Source Satoshis Sum of output values in Satoshis Declaration public string Satoshis { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Transaction timestamp Declaration public UInt64 Timestamp { get; } Property Value Type Description UInt64"
  },
  "bitprim-cs/Bitprim.HistoryCompactList.html": {
    "href": "bitprim-cs/Bitprim.HistoryCompactList.html",
    "title": "Class HistoryCompactList | Bitprim Documentation Site",
    "keywords": "Class HistoryCompactList Inheritance Object NativeList < HistoryCompact > HistoryCompactList Implements IDisposable Inherited Members NativeList<HistoryCompact>.GetEnumerator() NativeList<HistoryCompact>.Dispose() NativeList<HistoryCompact>.Dispose(Boolean) NativeList<HistoryCompact>.Item[UInt32] NativeList<HistoryCompact>.Count NativeList<HistoryCompact>.Add(HistoryCompact) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HistoryCompactList : NativeList<HistoryCompact>, IDisposable Methods | Improve this Doc View Source AddElement(HistoryCompact) Declaration public override void AddElement(HistoryCompact element) Parameters Type Name Description HistoryCompact element Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.AddElement(Bitprim.HistoryCompact) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override HistoryCompact GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description HistoryCompact Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.HistoryCompact.html": {
    "href": "bitprim-cs/Bitprim.HistoryCompact.html",
    "title": "Class HistoryCompact | Bitprim Documentation Site",
    "keywords": "Class HistoryCompact Output points, values, and spends for a payment address. Inheritance Object HistoryCompact Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HistoryCompact : IDisposable Properties | Improve this Doc View Source Height Height of the block containing the Point. Declaration public UInt32 Height { get; } Property Value Type Description UInt32 | Improve this Doc View Source Point The point that identifies the History instance. Declaration public Point Point { get; } Property Value Type Description Point | Improve this Doc View Source PointKind Used for distinguishing between values and spends. Declaration public PointKind PointKind { get; } Property Value Type Description PointKind | Improve this Doc View Source ValueOrChecksum Varies depending on point_kind. Declaration public UInt64 ValueOrChecksum { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Release resources Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize()"
  },
  "bitprim-cs/Bitprim.HashList.html": {
    "href": "bitprim-cs/Bitprim.HashList.html",
    "title": "Class HashList | Bitprim Documentation Site",
    "keywords": "Class HashList Inheritance Object NativeList < Byte []> HashList Implements IDisposable Inherited Members NativeList<Byte[]>.GetEnumerator() NativeList<Byte[]>.Dispose() NativeList<Byte[]>.Dispose(Boolean) NativeList<Byte[]>.CreateNativeList() NativeList<Byte[]>.GetNthNativeElement(UInt32) NativeList<Byte[]>.GetCount() NativeList<Byte[]>.AddElement(Byte[]) NativeList<Byte[]>.DestroyNativeList() NativeList<Byte[]>.Item[UInt32] NativeList<Byte[]>.Count NativeList<Byte[]>.Add(Byte[]) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HashList : NativeList<byte[]>, IDisposable Methods | Improve this Doc View Source AddElement(Byte[]) Declaration public override void AddElement(byte[] element) Parameters Type Name Description Byte [] element Overrides Bitprim.NativeList<System.Byte[]>.AddElement(System.Byte[]) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<System.Byte[]>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<System.Byte[]>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<System.Byte[]>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override byte[] GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Byte [] Overrides Bitprim.NativeList<System.Byte[]>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.GetTxPositionResult.html": {
    "href": "bitprim-cs/Bitprim.GetTxPositionResult.html",
    "title": "Struct GetTxPositionResult | Bitprim Documentation Site",
    "keywords": "Struct GetTxPositionResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public struct GetTxPositionResult Properties | Improve this Doc View Source BlockHeight Declaration public UInt64 BlockHeight { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source Index Declaration public UInt64 Index { get; set; } Property Value Type Description UInt64"
  },
  "bitprim-cs/Bitprim.GetBlockDataResult-1.html": {
    "href": "bitprim-cs/Bitprim.GetBlockDataResult-1.html",
    "title": "Class GetBlockDataResult<TBlockData> | Bitprim Documentation Site",
    "keywords": "Class GetBlockDataResult<TBlockData> Inheritance Object GetBlockDataResult<TBlockData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class GetBlockDataResult<TBlockData> : IDisposable where TBlockData : IDisposable Type Parameters Name Description TBlockData Fields | Improve this Doc View Source BlockHeight Declaration public UInt64 BlockHeight Field Value Type Description UInt64 Properties | Improve this Doc View Source BlockData Declaration public TBlockData BlockData { get; set; } Property Value Type Description TBlockData Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "bitprim-cs/Bitprim.Executor.TransactionHandler.html": {
    "href": "bitprim-cs/Bitprim.Executor.TransactionHandler.html",
    "title": "Delegate Executor.TransactionHandler | Bitprim Documentation Site",
    "keywords": "Delegate Executor.TransactionHandler Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public delegate bool TransactionHandler(ErrorCode e, Transaction newTx); Parameters Type Name Description ErrorCode e Transaction newTx Returns Type Description Boolean"
  },
  "bitprim-cs/Bitprim.Block.html": {
    "href": "bitprim-cs/Bitprim.Block.html",
    "title": "Class Block | Bitprim Documentation Site",
    "keywords": "Class Block Represents a full Bitcoin blockchain block. Inheritance Object Block Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Block : IDisposable Properties | Improve this Doc View Source Claim Sum of coinbase outputs. Declaration public UInt64 Claim { get; } Property Value Type Description UInt64 | Improve this Doc View Source Fees Miner fees included in the block's coinbase transaction. Declaration public UInt64 Fees { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash The block's hash as a 32 byte array. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Header The block's header Declaration public Header Header { get; } Property Value Type Description Header | Improve this Doc View Source IsDistinctTransactionSet Returns true iif all transactions in the block have a unique hash (i.e. no duplicates) Declaration public bool IsDistinctTransactionSet { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExtraCoinbase Returns true iif there is more than one coinbase transaction in the block. Declaration public bool IsExtraCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInternalDoubleSpend Returns true iif there is at least one double-spent transaction in this block Declaration public bool IsInternalDoubleSpend { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns true iif the block is valid Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValidMerkleRoot Returns true iif the generated Merkle root equals the header's Merkle root. Declaration public bool IsValidMerkleRoot { get; } Property Value Type Description Boolean | Improve this Doc View Source MerkleRoot The block's Merkle root, as a 32 byte array. Declaration public byte[] MerkleRoot { get; } Property Value Type Description Byte [] | Improve this Doc View Source Proof Declaration public string Proof { get; } Property Value Type Description String | Improve this Doc View Source SignatureOperationsCount Amount of signature operations in the block. Declaration public UInt64 SignatureOperationsCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source TransactionCount The total amount of transactions that the block contains. Declaration public UInt64 TransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetBlockReward(UInt64) Reward = Subsidy + Fees, for the block at the given height. Declaration public UInt64 GetBlockReward(UInt64 height) Parameters Type Name Description UInt64 height Block height in the chain; identifies it univocally. Returns Type Description UInt64 UInt64 representation of the block's reward. | Improve this Doc View Source GetNthTransaction(UInt64) Given a position in the block, returns the corresponding transaction. Declaration public Transaction GetNthTransaction(UInt64 n) Parameters Type Name Description UInt64 n Zero-based index Returns Type Description Transaction Full transaction object | Improve this Doc View Source GetSerializedSize(UInt32) Block size in bytes. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version. Returns Type Description UInt64 UInt64 representation of the block size in bytes. | Improve this Doc View Source GetSignatureOperationsCount(Boolean) Amount of signature operations in the block. Declaration public UInt64 GetSignatureOperationsCount(bool bip16Active) Parameters Type Name Description Boolean bip16Active Iif true, count bip16 active operations. Returns Type Description UInt64 The amount of signature operations in this block | Improve this Doc View Source GetSubsidy(UInt64) The block subsidy. It's the same value for all blocks. Declaration public static UInt64 GetSubsidy(UInt64 height) Parameters Type Name Description UInt64 height The block's height. It identifies it univocally. Returns Type Description UInt64 UInt64 representation of the block subsidy | Improve this Doc View Source GetTotalInputs(Boolean) The sum of all inputs of all transactions in the block. Declaration public UInt64 GetTotalInputs(bool withCoinbase) Parameters Type Name Description Boolean withCoinbase Iif true, consider coinbase transactions. Returns Type Description UInt64 UInt64 representation of the sum | Improve this Doc View Source IsFinal(UInt64) Returns true iif every transaction in the block is final or not. Declaration public bool IsFinal(UInt64 height) Parameters Type Name Description UInt64 height Returns Type Description Boolean | Improve this Doc View Source IsValidCoinbaseClaim(UInt64) Given a block height, return true iif its coinbase claim is not higher than the deserved reward. Declaration public bool IsValidCoinbaseClaim(UInt64 height) Parameters Type Name Description UInt64 height The height which identifies the block to examine Returns Type Description Boolean True iif 1 if coinbase claim is not higher than the deserved reward. | Improve this Doc View Source IsValidCoinbaseScript(UInt64) Returns true iif the block's coinbase script is valid. Declaration public bool IsValidCoinbaseScript(UInt64 height) Parameters Type Name Description UInt64 height The block's height. Identifies it univocally. Returns Type Description Boolean True iif the block's coinbase script is valid. | Improve this Doc View Source ToData(Boolean) Raw block data. Declaration public byte[] ToData(bool wire) Parameters Type Name Description Boolean wire Iif true, include data size at the beginning. Returns Type Description Byte [] Byte array with block data."
  },
  "bitprim-cs/Bitprim.ApiCallResult-1.html": {
    "href": "bitprim-cs/Bitprim.ApiCallResult-1.html",
    "title": "Class ApiCallResult<TResultData> | Bitprim Documentation Site",
    "keywords": "Class ApiCallResult<TResultData> Inheritance Object ApiCallResult<TResultData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class ApiCallResult<TResultData> : object Type Parameters Name Description TResultData Properties | Improve this Doc View Source ErrorCode Declaration public ErrorCode ErrorCode { get; set; } Property Value Type Description ErrorCode | Improve this Doc View Source Result Declaration public TResultData Result { get; set; } Property Value Type Description TResultData"
  },
  "bitprim-cs/Bitprim.html": {
    "href": "bitprim-cs/Bitprim.html",
    "title": "Namespace Bitprim | Bitprim Documentation Site",
    "keywords": "Namespace Bitprim Classes ApiCallResult<TResultData> Binary Represents a binary filter. Block Represents a full Bitcoin blockchain block. BlockIndexList BlockList BlockReader Allows user to read a specific set of blocks from the blockchain. Chain Represents the Bitcoin blockchain; meant to offer its different interfaces (query, mining, network) CompactBlock TODO: Omit from docs (not implemented yet) BIP 512 representation of a block for reduced propagation bandwidth. DisposableApiCallResult<TResultData> Executor Controls the execution of the Bitprim bitcoin node. GetBlockDataResult<TBlockData> GetBlockHashTimestampResult GetBlockHeaderByHashTxSizeResult GetTxDataResult HashList Header Represents a full Bitcoin blockchain block. HeaderReader Helper for reading the header for each block in a specific set of blocks. HistoryCompact Output points, values, and spends for a payment address. HistoryCompactList Input Represents a Transaction input. InputList MempoolTransaction Represents an unconfirmed transaction. MempoolTransactionList MerkleBlock Merkle tree representation of a blockchain block. NativeList<T> NodeSettings Output Represents one of the outputs of a Transaction. OutputList OutputPoint Transaction hash and index pair representing one of the transaction outputs. PaymentAddress Represents a Bitcoin wallet address. Point Represents one of the transaction inputs. It's a transaction hash and index pair. PointList Script Represents a transaction script. StealthCompact Stealth payment related data. StealthCompactList Transaction Represents a Bitcoin transaction. TransactionList Validations Structs GetTxPositionResult Enums CurrencyType ErrorCode NetworkType PointKind Delegates Executor.BlockHandler Executor.TransactionHandler"
  },
  "bitprim-cs/Bitprim.Validations.html": {
    "href": "bitprim-cs/Bitprim.Validations.html",
    "title": "Class Validations | Bitprim Documentation Site",
    "keywords": "Class Validations Inheritance Object Validations Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public static class Validations : object Methods | Improve this Doc View Source IsValidHash(String) Returns true iif hex represents a valid Bitcoin hash (i.e. 32 arbitrary bytes => 64 hex characters) Declaration public static bool IsValidHash(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Boolean True iif hex is a valid hash string | Improve this Doc View Source IsValidPaymentAddress(String) Check if the hex string represents a valid base58 address Declaration public static bool IsValidPaymentAddress(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Boolean True iif hex is a valid base 58 address"
  },
  "bitprim-cs/Bitprim.StealthCompactList.html": {
    "href": "bitprim-cs/Bitprim.StealthCompactList.html",
    "title": "Class StealthCompactList | Bitprim Documentation Site",
    "keywords": "Class StealthCompactList Inheritance Object NativeList < StealthCompact > StealthCompactList Implements IDisposable Inherited Members NativeList<StealthCompact>.GetEnumerator() NativeList<StealthCompact>.Dispose() NativeList<StealthCompact>.Dispose(Boolean) NativeList<StealthCompact>.Item[UInt32] NativeList<StealthCompact>.Count NativeList<StealthCompact>.Add(StealthCompact) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class StealthCompactList : NativeList<StealthCompact>, IDisposable Methods | Improve this Doc View Source AddElement(StealthCompact) Declaration public override void AddElement(StealthCompact element) Parameters Type Name Description StealthCompact element Overrides Bitprim.NativeList<Bitprim.StealthCompact>.AddElement(Bitprim.StealthCompact) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.StealthCompact>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.StealthCompact>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.StealthCompact>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override StealthCompact GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description StealthCompact Overrides Bitprim.NativeList<Bitprim.StealthCompact>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.StealthCompact.html": {
    "href": "bitprim-cs/Bitprim.StealthCompact.html",
    "title": "Class StealthCompact | Bitprim Documentation Site",
    "keywords": "Class StealthCompact Stealth payment related data. Inheritance Object StealthCompact Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class StealthCompact : IDisposable Properties | Improve this Doc View Source EphemeralPublicKeyHash 33 bytes. Includes the sign byte (0x02). Declaration public byte[] EphemeralPublicKeyHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source PublicKeyHash Public key hash in 32 bytes array format. Declaration public byte[] PublicKeyHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source TransactionHash Transaction hash in 32 byte array format. Declaration public byte[] TransactionHash { get; } Property Value Type Description Byte [] Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize()"
  },
  "bitprim-cs/Bitprim.NativeList-1.html": {
    "href": "bitprim-cs/Bitprim.NativeList-1.html",
    "title": "Class NativeList<T> | Bitprim Documentation Site",
    "keywords": "Class NativeList<T> Inheritance Object NativeList<T> BlockIndexList BlockList HashList HistoryCompactList InputList MempoolTransactionList OutputList PointList StealthCompactList TransactionList Implements IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public abstract class NativeList<T> : IEnumerable<T>, IDisposable Type Parameters Name Description T Constructors | Improve this Doc View Source NativeList() Declaration protected NativeList() | Improve this Doc View Source NativeList(IntPtr) Declaration protected NativeList(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Properties | Improve this Doc View Source Count Declaration public uint Count { get; } Property Value Type Description UInt32 | Improve this Doc View Source Item[UInt32] Declaration public T this[uint index] { get; } Parameters Type Name Description UInt32 index Property Value Type Description T Methods | Improve this Doc View Source Add(T) Declaration public void Add(T element) Parameters Type Name Description T element | Improve this Doc View Source AddElement(T) Declaration public abstract void AddElement(T element) Parameters Type Name Description T element | Improve this Doc View Source CreateNativeList() Declaration public abstract IntPtr CreateNativeList() Returns Type Description IntPtr | Improve this Doc View Source DestroyNativeList() Declaration public abstract void DestroyNativeList() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetCount() Declaration public abstract uint GetCount() Returns Type Description UInt32 | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public abstract T GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description T Implements IDisposable"
  },
  "bitprim-cs/Bitprim.MerkleBlock.html": {
    "href": "bitprim-cs/Bitprim.MerkleBlock.html",
    "title": "Class MerkleBlock | Bitprim Documentation Site",
    "keywords": "Class MerkleBlock Merkle tree representation of a blockchain block. Inheritance Object MerkleBlock Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MerkleBlock : IDisposable Properties | Improve this Doc View Source HashCount Transaction hashes list element count. Declaration public UInt64 HashCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source Header The block's header. Declaration public Header Header { get; } Property Value Type Description Header | Improve this Doc View Source IsValid Returns true if and only if it the block contains txs hashes, and the header is valid. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source TotalTransactionCount Amount of transactions inside the block. Declaration public UInt64 TotalTransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetNthHash(Int32) Get the Nth transaction hash from the block. Declaration public byte[] GetNthHash(int n) Parameters Type Name Description Int32 n Zerp-based index. Returns Type Description Byte [] Transaction hash in 32 byte array format. | Improve this Doc View Source GetSerializedSize(UInt32) Block size in bytes (as a Merkle block, not as a full block). Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating size. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source Reset() Delete all the data inside the block. Declaration public void Reset()"
  },
  "bitprim-cs/Bitprim.HeaderReader.html": {
    "href": "bitprim-cs/Bitprim.HeaderReader.html",
    "title": "Class HeaderReader | Bitprim Documentation Site",
    "keywords": "Class HeaderReader Helper for reading the header for each block in a specific set of blocks. Inheritance Object HeaderReader Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HeaderReader : IDisposable Constructors | Improve this Doc View Source HeaderReader() Create an empty reader. Declaration public HeaderReader() | Improve this Doc View Source HeaderReader(HashList, Byte[]) Create a reader with predefined start hashes and stop hash. Declaration public HeaderReader(HashList start, byte[] stop) Parameters Type Name Description HashList start When all of these blocks are synced, start reading. Byte [] stop Stop at this block. Properties | Improve this Doc View Source IsValid The block set is valid iif all its blocks are valid. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source StartHashes Define when to start reading: Once these blocks are synced (include the newest one). Declaration public HashList StartHashes { get; set; } Property Value Type Description HashList | Improve this Doc View Source StopHash Stop at this block (include it in the set). Declaration public byte[] StopHash { get; set; } Property Value Type Description Byte [] Methods | Improve this Doc View Source Dispose() Release resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetSerializedSize(UInt32) The sum of the header sizes for this set. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating header size. Returns Type Description UInt64 Sum of header sizes. | Improve this Doc View Source Reset() Go back to first block in the set. Declaration public void Reset()"
  },
  "bitprim-cs/Bitprim.Header.html": {
    "href": "bitprim-cs/Bitprim.Header.html",
    "title": "Class Header | Bitprim Documentation Site",
    "keywords": "Class Header Represents a full Bitcoin blockchain block. Inheritance Object Header Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Header : IDisposable Properties | Improve this Doc View Source Bits Difficulty threshold. Declaration public UInt32 Bits { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Hash Block hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source IsValid Returns true if and only if the header conforms to the Bitcoin protocol format. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Merkle Merkle root in 32 byte array format. Declaration public byte[] Merkle { get; } Property Value Type Description Byte [] | Improve this Doc View Source Nonce The nonce that allowed this block to be added to the blockchain. Declaration public UInt32 Nonce { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source PreviousBlockHash Hash belonging to the immediately previous block in the blockchain, as a 32 byte array. This is all zeros for the first block, a.k.a. Genesis. Declaration public byte[] PreviousBlockHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source ProofString Hexadecimal string representation of the block's proof (which is a 256-bit number). Declaration public string ProofString { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Block timestamp in UNIX Epoch format (seconds since January 1st 1970) Assume UTC 0. Declaration public UInt32 Timestamp { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Version Header protocol version. Declaration public UInt32 Version { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize()"
  },
  "bitprim-cs/Bitprim.GetTxDataResult.html": {
    "href": "bitprim-cs/Bitprim.GetTxDataResult.html",
    "title": "Class GetTxDataResult | Bitprim Documentation Site",
    "keywords": "Class GetTxDataResult Inheritance Object GetTxDataResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class GetTxDataResult : IDisposable Properties | Improve this Doc View Source Tx Declaration public Transaction Tx { get; set; } Property Value Type Description Transaction | Improve this Doc View Source TxPosition Declaration public GetTxPositionResult TxPosition { get; set; } Property Value Type Description GetTxPositionResult Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "bitprim-cs/Bitprim.Chain.html": {
    "href": "bitprim-cs/Bitprim.Chain.html",
    "title": "Class Chain | Bitprim Documentation Site",
    "keywords": "Class Chain Represents the Bitcoin blockchain; meant to offer its different interfaces (query, mining, network) Inheritance Object Chain Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Chain : object Properties | Improve this Doc View Source IsStale Determine if the node is synchronized (i.e. has the latest copy of the blockchain/is at top height) Declaration public bool IsStale { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source FetchBlockByHashAsync(Byte[]) Given a block hash, retrieve the full block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Block>>> FetchBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Block >>> | Improve this Doc View Source FetchBlockByHeightAsync(UInt64) Given a block height, retrieve the full block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Block>>> FetchBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Block >>> | Improve this Doc View Source FetchBlockByHeightHashTimestampAsync(UInt64) Given a block height, retrieve only block hash and timestamp, asynchronously. Declaration public Task<ApiCallResult<GetBlockHashTimestampResult>> FetchBlockByHeightHashTimestampAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < ApiCallResult < GetBlockHashTimestampResult >> | Improve this Doc View Source FetchBlockHeaderByHashAsync(Byte[]) Given a block hash, get the header from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Header>>> FetchBlockHeaderByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Header >>> | Improve this Doc View Source FetchBlockHeaderByHashTxSizesAsync(Byte[]) Given a block hash, retrieve block header, tx hashes and serialized block size, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockHeaderByHashTxSizeResult>> FetchBlockHeaderByHashTxSizesAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockHeaderByHashTxSizeResult >> | Improve this Doc View Source FetchBlockHeaderByHeightAsync(UInt64) Given a block height, get the header from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Header>>> FetchBlockHeaderByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Header >>> | Improve this Doc View Source FetchBlockHeightAsync(Byte[]) Given a block hash, it queries the chain asynchronously for the block's height. Return right away and uses a callback to return the result. Declaration public Task<ApiCallResult<UInt64>> FetchBlockHeightAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32-byte array representation of the block hash. Identifies it univocally. Returns Type Description Task < ApiCallResult < UInt64 >> | Improve this Doc View Source FetchBlockLocatorAsync(BlockIndexList) Given a list of indexes, fetch a header reader for them, asynchronously Declaration public Task<DisposableApiCallResult<HeaderReader>> FetchBlockLocatorAsync(BlockIndexList indexes) Parameters Type Name Description BlockIndexList indexes Block indexes Returns Type Description Task < DisposableApiCallResult < HeaderReader >> | Improve this Doc View Source FetchCompactBlockByHash(Byte[]) Given a block hash, get the compact block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<CompactBlock>>> FetchCompactBlockByHash(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < CompactBlock >>> | Improve this Doc View Source FetchCompactBlockByHeightAsync(UInt64) Given a block height, get the compact block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<CompactBlock>>> FetchCompactBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Desired block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < CompactBlock >>> | Improve this Doc View Source FetchConfirmedTransactionsAsync(PaymentAddress, UInt64, UInt64) Get a list of tx ids for a given payment address (asynchronously). Duplicates are already filtered out. Declaration public Task<DisposableApiCallResult<HashList>> FetchConfirmedTransactionsAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < HashList >> | Improve this Doc View Source FetchHistoryAsync(PaymentAddress, UInt64, UInt64) Get a list of output points, values, and spends for a given payment address (asynchronously) Declaration public Task<DisposableApiCallResult<HistoryCompactList>> FetchHistoryAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < HistoryCompactList >> | Improve this Doc View Source FetchLastHeightAsync() Gets the height of the highest block in the local copy of the blockchain, asynchronously. Declaration public Task<ApiCallResult<UInt64>> FetchLastHeightAsync() Returns Type Description Task < ApiCallResult < UInt64 >> | Improve this Doc View Source FetchMerkleBlockByHashAsync(Byte[]) Given a block hash, get the merkle block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<MerkleBlock>>> FetchMerkleBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < MerkleBlock >>> | Improve this Doc View Source FetchMerkleBlockByHeightAsync(UInt64) Given a block height, get the merkle block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<MerkleBlock>>> FetchMerkleBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Desired block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < MerkleBlock >>> | Improve this Doc View Source FetchSpendAsync(OutputPoint) Fetch the transaction input which spends the indicated output, asynchronously. Declaration public Task<ApiCallResult<Point>> FetchSpendAsync(OutputPoint outputPoint) Parameters Type Name Description OutputPoint outputPoint Tx hash and index pair where the output was spent. Returns Type Description Task < ApiCallResult < Point >> | Improve this Doc View Source FetchStealthAsync(Binary, UInt64) Get metadata on potential payment transactions by stealth filter. Given a filter and a height in the chain, it queries the chain for transactions matching the given filter. Declaration public Task<DisposableApiCallResult<StealthCompactList>> FetchStealthAsync(Binary filter, UInt64 fromHeight) Parameters Type Name Description Binary filter Must be at least 8 bits in length. example \"10101010\" UInt64 fromHeight Starting height in the chain to search for transactions Returns Type Description Task < DisposableApiCallResult < StealthCompactList >> | Improve this Doc View Source FetchTransactionAsync(Byte[], Boolean) Get a transaction by its hash, asynchronously. Declaration public Task<DisposableApiCallResult<GetTxDataResult>> FetchTransactionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True if the transaction must belong to a block Returns Type Description Task < DisposableApiCallResult < GetTxDataResult >> | Improve this Doc View Source FetchTransactionPositionAsync(Byte[], Boolean) Given a transaction hash, it fetches the height and position inside the block, asynchronously. Declaration public Task<ApiCallResult<GetTxPositionResult>> FetchTransactionPositionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True iif the transaction must belong to a block Returns Type Description Task < ApiCallResult < GetTxPositionResult >> | Improve this Doc View Source GetMempoolTransactions(PaymentAddress, Boolean) Declaration public MempoolTransactionList GetMempoolTransactions(PaymentAddress address, bool useTestnetRules) Parameters Type Name Description PaymentAddress address Boolean useTestnetRules Returns Type Description MempoolTransactionList | Improve this Doc View Source OrganizeBlockAsync(Block) Given a block, organize it (async). Declaration public Task<ErrorCode> OrganizeBlockAsync(Block block) Parameters Type Name Description Block block The block to organize Returns Type Description Task < ErrorCode > | Improve this Doc View Source OrganizeTransactionAsync(Transaction) Given a transaction, organize it (async). Declaration public Task<ErrorCode> OrganizeTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction The transaction to organize. Returns Type Description Task < ErrorCode > | Improve this Doc View Source ValidateTransactionAsync(Transaction) Determine if a transaction is valid for submission to the blockchain. Declaration public Task<ApiCallResult<string>> ValidateTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction Transaction to validate Returns Type Description Task < ApiCallResult < String >>"
  },
  "bitprim-cs/Bitprim.BlockIndexList.html": {
    "href": "bitprim-cs/Bitprim.BlockIndexList.html",
    "title": "Class BlockIndexList | Bitprim Documentation Site",
    "keywords": "Class BlockIndexList Inheritance Object NativeList < UInt32 > BlockIndexList Implements IDisposable Inherited Members NativeList<UInt32>.GetEnumerator() NativeList<UInt32>.Dispose() NativeList<UInt32>.Dispose(Boolean) NativeList<UInt32>.Item[UInt32] NativeList<UInt32>.Count NativeList<UInt32>.Add(UInt32) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class BlockIndexList : NativeList<uint>, IDisposable Methods | Improve this Doc View Source AddElement(UInt32) Declaration public override void AddElement(uint element) Parameters Type Name Description UInt32 element Overrides Bitprim.NativeList<System.UInt32>.AddElement(System.UInt32) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<System.UInt32>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<System.UInt32>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<System.UInt32>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override uint GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description UInt32 Overrides Bitprim.NativeList<System.UInt32>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "restapi/bitprim-api.html": {
    "href": "restapi/bitprim-api.html",
    "title": "bitprim | Bitprim Documentation Site",
    "keywords": "bitprim Address | Improve this Doc View Source GetUnconfirmedBalance Given an address, get unconfirmed balance in coin units. Request GET /api/addr/{paymentAddress}/unconfirmedBalance Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetAddressBalance Given an address, get current confirmed balance in coin units. Request GET /api/addr/{paymentAddress}/balance Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetAddressHistory Given an address, get current confirmed and unconfirmed balance, and optionally, a list of all transaction ids involved in the address. Request GET /api/addr/{paymentAddress}[?noTxList&from&to] Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. noTxList integer If 1, include transaction id list; otherwise, do not include it. from integer Allows selecting a subrange of transaction ids from the full list; starts in zero (0). to integer Allows selecting a subrange of transactions from the full list; max value is (txCount - 1). Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTotalReceived Given an address, get total received amount in coin units. Request GET /api/addr/{paymentAddress}/totalReceived Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetTotalSent Given an address, get total sent amount in coin units. Request GET /api/addr/{paymentAddress}/totalSent Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetUtxoForMultipleAddresses Given a list of addresses, get their combined unspent outputs. Request GET /api/addrs/{paymentAddresses}/utxo Parameters Name Type Value Notes *paymentAddresses string Comma separated list of addresses. For BCH, cashaddr format is accepted. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetUtxoForMultipleAddressesPost Given a list of addresses, get their combined unspent outputs. Request POST /api/addrs/utxo Parameters Name Type Value Notes requestParams In params.addrs, a comma separated list of addresses. For BCH, cashaddr format is accepted. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetUtxoForSingleAddress Given an address, get all of its currently unspent outputs. Request GET /api/addr/{paymentAddress}/utxo Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, cashaddr format is accepted. Responses Status Code Description Samples 200 Success Block | Improve this Doc View Source GetBlockByHash Given a block hash, retrieve its univocally associated block. Request GET /api/block/{hash} Parameters Name Type Value Notes *hash string 32-character hex string. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetBlockByHeight Given a block height, retrieve the block hash. Request GET /api/block-index/{height} Parameters Name Type Value Notes *height integer Block height. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetBlocksByDate Given a date, return all blocks mined on that day. Request GET /api/blocks[?limit&blockDate] Parameters Name Type Value Notes limit integer Max amount of blocks in result (older ones discarded). blockDate string Date to search, in the format specified in the settings. Defaults to yyyy-MM-dd (dashes required). Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetRawBlockByHash Given a block hash, return the block's representation as a hex string. Request GET /api/rawblock/{hash} Parameters Name Type Value Notes *hash string 32-character hex string which univocally identifies the block in the blockchain. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetRawBlockByHeight Given a block height, return the block's representation as a hex string. Request GET /api/rawblock-index/{height} Parameters Name Type Value Notes *height integer Height which univocally identifies the block in the blockchain. Responses Status Code Description Samples 200 Success Chain | Improve this Doc View Source GetEstimateFee Get an estimate value for current block fee. Request GET /api/utils/estimatefee[?nbBlocks] Parameters Name Type Value Notes nbBlocks integer Number of blocks to consider for estimation; a higher number implies higher precision, but will take longer to calculate. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetBestBlockHash Get best block hash. Request GET /api/status/bestblockhash Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetCurrency Get current coin price in US dollars. Request GET /api/currency Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetDifficulty Get latest block difficulty. Request GET /api/status/difficulty Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetHealthCheck Check if the underlying bitprim node is running correctly. Request GET /api/healthcheck[?minimumSync] Parameters Name Type Value Notes minimumSync number Minimum required sync percentage (from 0 to 100) to consider node healthy. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetInfo Get underlying node information. Request GET /api/status/info Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetLastBlockHash Get latest block hash. Request GET /api/status/lastblockhash Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetStatus Get various node status information. (getInfo: see GetInfo method | getDifficulty: see GetDifficulty method | getBestBlockHash: see GetBestBlockHash method | getLastBlockHash: see GetLastBlockHash method) Request GET /api/status[?q] Parameters Name Type Value Notes q string (getInfo | getDifficulty | getBestBlockHash | getLastBlockHash). Default: getInfo. Use the name 'q' for this query parameter (it will be mapped to the 'method' parameter). Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetSyncStatus Get node synchronization status, as in how up to date it is with the blockchain. Request GET /api/sync Responses Status Code Description Samples 200 Success Message | Improve this Doc View Source VerifyMessage Validate message. Request GET /api/messages/verify[?address&signature&message] Parameters Name Type Value Notes address string Destination address. For BCH, cashaddr format is accepted. signature string To identify message sender, created using his private key. message string Message to verify. Responses Status Code Description Samples 200 Success | Improve this Doc View Source VerifyMessage Validate message. Request POST /api/messages/verify[?address&signature&message] Parameters Name Type Value Notes address string Destination address. For BCH, cashaddr format is accepted. signature string To identify message sender, created using his private key. message string Message to verify. Responses Status Code Description Samples 200 Success Peer | Improve this Doc View Source GetApiVersion Get bitprim-insight API version. Request GET /api/version Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetPeerStatus Get peer/Bitprim node status information. Request GET /api/peer Responses Status Code Description Samples 200 Success Transaction | Improve this Doc View Source BroadcastTransaction Publish a transaction to the P2P network. Request POST /api/tx/send Parameters Name Type Value Notes request See RawTxRequest DTO. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetRawTransactionByHash Given a transaction hash, retrieve its representation as a hex string. Request GET /api/rawtx/{hash} Parameters Name Type Value Notes *hash string 32-character hex string which univocally identifies the transaction in the network. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetTransactionByHash Given a transaction hash, retrieve its representation as a hex string. Request GET /api/tx/{hash}[?requireConfirmed] Parameters Name Type Value Notes *hash string 32-character hex string which univocally identifies the transaction in the network. requireConfirmed integer 1 = only confirmed transactions, otherwise include unconfirmed as well. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTransactions Returns all transactions from a block, or an address (only one source at a time). Request GET /api/txs[?block&address&pageNum] Parameters Name Type Value Notes block string 32-character hex string which univocally identifies a block. address string Address to get transactions from. When selecting by address, unconfirmed transactions are included. pageNum integer Results page number to select; starts in zero. Page size is configurable via appsettings.json and command line. By default, page size is 10 transactions. See TransactionsByAddressPageSize key. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTransactionsForMultipleAddresses Returns all transactions from a set of addresses. Request GET /api/addrs/{paymentAddresses}/txs[?from&to] Parameters Name Type Value Notes *paymentAddresses string Comma-separated list of addresses. For BCH, cashaddr format is accepted. from integer Results selection starting point; first item is 0 (zero). Default to said value. to integer Results selection ending point. Default to 10. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTransactionsForMultipleAddresses_Post Returns all transactions from a set of adresses. Request POST /api/addrs/txs Parameters Name Type Value Notes request See GetTxsForMultipleAddressesRequest DTO. Responses Status Code Description Samples 200 Success 400 Bad Request"
  },
  "content/developer_guide/restapi/introduction.html": {
    "href": "content/developer_guide/restapi/introduction.html",
    "title": "Introduction | Bitprim Documentation Site",
    "keywords": "Introduction Bitprim Insight Multi-Cryptocurrency Rest API. Bitprim Insight is a REST API written in C# with .NET Core 2.x which exposes methods matching the insight API interface Bitprim Insight supports the following cryptocurrencies: Bitcoin Cash Bitcoin Litecoin (coming soon) Installation Requirements 64-bit machine. Conan package manager, version 1.1.0 or newer. See Conan Installation . .NET Core 2.0 SDK In case there are no pre-built binaries for your platform, conan will automatically try to build from source code. In such a scenario, the following requirements must be added to the previous ones: C++11 Conforming Compiler. CMake building tool, version 3.4 or newer. Building Procedure The Bitprim libraries can be installed using conan (see below) on Linux, macOS, FreeBSD, Windows and others. These binaries are pre-built for the most usual operating system/compiler combinations and are downloaded from an online repository. If there are no pre-built binaries for your platform, conan will attempt to build from source during the installation. Build In the project folder run: For Bitcoin Cash dotnet build /property:Platform=x64 /p:BCH=true -c Release -f netcoreapp2.0 -v normal For Bitcoin dotnet build /property:Platform=x64 /p:BTC=true -c Release -f netcoreapp2.0 -v normal Run dotnet bin/x64/Release/netcoreapp2.0/bitprim.insight.dll --server.port=3000 --server.address=0.0.0.0 or you can publish the app and run over the published folder dotnet publish /property:Platform=x64 /p:BTC=true -c Release -f netcoreapp2.0 -v normal -o published dotnet bin/x64/Release/netcoreapp2.0/published/bitprim.insight.dll --server.port=3000 --server.address=0.0.0.0 Command line arguments --server.port : Defines the listening TCP port. Default value:1549 --server.address : Defines the listening IP address. Default value:localhost Configuration Options You need to create an appsettings.json file in the build directory to run the application. You can use appsettings.example.json as a starting point. Eg. { \"ApiPrefix\" : \"api\", \"AcceptStaleRequests\" : true, \"AllowedOrigins\": \"http://localhost:1549\", \"Connections\": 8, \"DateInputFormat\": \"yyyy-MM-dd\", \"EstimateFeeDefault\": \"0.00001000\", \"ForwardUrl\" : \"http://localhost:1234\", \"InitializeNode\" : true, \"LongResponseCacheDurationInSeconds\": 86400, \"MaxBlockSummarySize\": 500, \"MaxCacheSize\": 50000, \"MaxSocketPublishRetries\": 3, \"NodeConfigFile\": \"config.cfg\", \"NodeType\": \"bitprim node\", \"PoolsFile\": \"pools.json\", \"ProtocolVersion\": \"70015\", \"Proxy\": \"\", \"RelayFee\": \"0.00001\", \"ShortResponseCacheDurationInSeconds\": 30, \"SocketPublishRetryIntervalInSeconds\": 1, \"TimeOffset\": \"0\", \"TransactionsByAddressPageSize\": 10, \"Version\": \"170000\", \"HttpClientTimeoutInSeconds\" : 5, \"WebsocketForwarderClientRetryDelay\": 10, \"Serilog\": { \"Using\": [\"Serilog.Sinks.Console\", \"Serilog.Sinks.File\"], \"MinimumLevel\": { \"Default\": \"Information\", \"Override\": { \"Microsoft\": \"Warning\" } }, \"WriteTo\": [ { \"Name\": \"Console\", \"Args\": { \"outputTemplate\" : \"[{Timestamp:yyyy-MM-dd HH:mm:ss} {TimeZone}] {Level:u3} {SourceIP} {RequestId} {HttpMethod} {RequestPath} {HttpProtocol} {HttpResponseStatusCode} {HttpResponseLength} {ElapsedMs} {Message:lj}{NewLine}{Exception}\" } }, { \"Name\": \"File\", \"Args\": { \"path\": \"log-.txt\", \"rollingInterval\": \"Day\", \"fileSizeLimitBytes\": null, \"retainedFileCountLimit\" : 5, \"outputTemplate\" : \"[{Timestamp:yyyy-MM-dd HH:mm:ss} {TimeZone}] {Level:u3} {SourceIP} {RequestId} {HttpMethod} {RequestPath} {HttpProtocol} {HttpResponseStatusCode} {HttpResponseLength} {ElapsedMs} {Message:lj}{NewLine}{Exception}\" } } ], \"Enrich\": [\"FromLogContext\"] } } All the settings can be passed as command line arguments prefixing the name with '--' Eg. dotnet bin/x64/Release/netcoreapp2.0/published/bitprim.insight.dll --server.port=3000 --server.address=0.0.0.0 --MaxBlockSummarySize=1000 The application has two different operation modes. As a Full Node or a Forwarder . In Full Node mode, the application starts a full Bitprim node, generating a copy of the blockchain. In Forwarder mode, the application only relays the request to a Full Node application. Settings ApiPrefix : Defines the name of the url segment where you expose the api methods. http://blockdozer.com/[ApiPrefix]/blocks/ Default value:api AcceptStaleRequests : Allows the API to respond to requests even if the chain is stale (the local copy of the blockchain isn't fully synchronized with the network). Default value:true AllowedOrigins : Configure the allowed CORS origins. For multiple origins, separate them with semicolon (;). Default value: * Connections : Configures the value returned in the connection element of the /status request. Default value:8 DateInputFormat : Defines the date format used by /blocks and other requests that require dates. Default value:yyyy-MM-dd EstimateFeeDefault : Sets the value returned by /utils/estimatefee. Default value:0.00001000 ForwardUrl : When you use the application in Forwarder mode, this settings defines the Full Node's URL. Default value:\"\" InitializeNode : This setting defines the node's working mode: True for Full Node, False for Forwarder Node. Default value:true LongResponseCacheDurationInSeconds : Duration of the long cache responses. Used to cache results for the following requests: /rawblock /rawtx Default value:86400 MaxBlockSummarySize : Defines the max limit of the /blocks method. Default value:500 MaxCacheSize : Configures the cache size limit; this is an adimensional value, because measuring object size is not trivial. The size for each cache entry is also adimensional and arbitrarily set by the user. The total size sum will never exceed this value. Default value:50000 MaxSocketPublishRetries : Defines how many times the server retries when publishing websocket messages before throwing an exception. Default value:3 NodeConfigFile : Node config file path; can be absolute, or relative to the project directory. Only use in Full Node mode. Default value:\"\" NodeType : The value returned in type element by the /sync method. Default value:bitprim node PoolsFile : Path to the json file with the mining pool information. Default value:pools.json ProtocolVersion : The value returned in protocolversion element by the /status method. Default value:70015 Proxy : The value returned in proxy element by the /status method. Default value:\"\" RelayFee : The value returned in relayfee element by the /status method. Default value:0.00001 ShortResponseCacheDurationInSeconds : Duration of the short cache responses. Used to cache results for the following requests: /txs /addrs/{paymentAddresses}/txs /addrs/txs /tx/{hash} /txs /rawblock-index/{height} /blocks /block/{hash} /block-index/{height} /sync /status /addr/{paymentAddress}/balance /addr/{paymentAddress}/totalReceived /addr/{paymentAddress}/totalSent /addr/{paymentAddress}/unconfirmedBalance /addr/{paymentAddress}/utxo /addrs/{paymentAddresses}/utxo /addrs/utxo /addr/{paymentAddress} /peer /version Default value:30 SocketPublishRetryIntervalInSeconds : Delay in seconds between retries for \"Publish\" websocket messages. Default value:1 MaxSocketPublishRetries : Maximum number of retries for a \"Publish\" websocket message Default value:3 TimeOffset : The value returned in timeoffset element by the /status method. Default value:0 TransactionsByAddressPageSize : The max page limit used by the /txs method. Default value:10 Version : The value returned in version element by the /status method. Default value:\"\" HttpClientTimeoutInSeconds : Defines HttpClient timeout. Used in forwarder mode. Default value:5 WebsocketForwarderClientRetryDelay : The delay in seconds beetween retries when the websocket connection to the fullnode fails. Default value:10 Serilog : The Serilog configuration. For more detailed documentation, check https://github.com/serilog/serilog/wiki/Getting-Started API HTTP Endpoints Block /api/block/[:hash] /api/block/00000000a967199a2fad0877433c93df785a8d8ce062e5f9b451cd1397bdbf62 Block Index Get block hash by height /api/block-index/[:height] /api/block-index/0 This would return: { \"blockHash\":\"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\" } which is the hash of the Genesis block (0 height) Raw Block /api/rawblock/[:blockHash] /api/rawblock/[:blockHeight] This would return: { \"rawblock\":\"blockhexstring...\" } Block Summaries Get block summaries by date: /api/blocks?limit=3&blockDate=2016-04-22 Example response: { \"blocks\": [ { \"height\": 408495, \"size\": 989237, \"hash\": \"00000000000000000108a1f4d4db839702d72f16561b1154600a26c453ecb378\", \"time\": 1461360083, \"txlength\": 1695, \"poolInfo\": { \"poolName\": \"BTCC Pool\", \"url\": \"https://pool.btcc.com/\" } } ], \"length\": 1, \"pagination\": { \"next\": \"2016-04-23\", \"prev\": \"2016-04-21\", \"currentTs\": 1461369599, \"current\": \"2016-04-22\", \"isToday\": true, \"more\": true, \"moreTs\": 1461369600 } } Transaction /api/tx/[:txid] /api/tx/525de308971eabd941b139f46c7198b5af9479325c2395db7f2fb5ae8562556c /api/rawtx/[:rawid] /api/rawtx/525de308971eabd941b139f46c7198b5af9479325c2395db7f2fb5ae8562556c Address /api/addr/[:addr][?noTxList=1][&from=&to=] /api/addr/mmvP3mTe53qxHdPqXEvdu8WdC7GfQ2vmx5?noTxList=1 /api/addr/mmvP3mTe53qxHdPqXEvdu8WdC7GfQ2vmx5?from=1000&to=2000 noTxList: 1 to include transactions, 0 otherwise. Address Properties /api/addr/[:addr]/balance /api/addr/[:addr]/totalReceived /api/addr/[:addr]/totalSent /api/addr/[:addr]/unconfirmedBalance The response contains the value in Satoshis. Unspent Outputs /api/addr/[:addr]/utxo Sample return: [ { \"address\":\"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\", \"txid\":\"d5f8a96faccf79d4c087fa217627bb1120e83f8ea1a7d84b1de4277ead9bbac1\", \"vout\":0, \"scriptPubKey\":\"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\", \"amount\":0.000006, \"satoshis\":600, \"confirmations\":0, \"ts\":1461349425 }, { \"address\": \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\", \"txid\": \"bc9df3b92120feaee4edc80963d8ed59d6a78ea0defef3ec3cb374f2015bfc6e\", \"vout\": 1, \"scriptPubKey\": \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\", \"amount\": 0.12345678, \"satoshis: 12345678, \"confirmations\": 1, \"height\": 300001 } ] Unspent Outputs for Multiple Addresses GET method: /api/addrs/[:addrs]/utxo /api/addrs/2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f/utxo POST method: /api/addrs/utxo POST params: addrs: 2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f Transactions by Block /api/txs/?block=HASH /api/txs/?block=00000000fa6cf7367e50ad14eb0ca4737131f256fc4c5841fd3c3f140140e6b6 Transactions by Address /api/txs/?address=ADDR /api/txs/?address=mmhmMNfBiZZ37g1tgg2t8DDbNoEdqKVxAL Transactions for Multiple Addresses GET method: /api/addrs/[:addrs]/txs[?from=&to=] /api/addrs/2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f/txs?from=0&to=20 POST method: /api/addrs/txs POST params: addrs: 2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f from (optional): 0 to (optional): 20 noAsm (optional): 1 (will omit script asm from results) noScriptSig (optional): 1 (will omit the scriptSig from all inputs) noSpent (option): 1 (will omit spent information per output) Sample output: { totalItems: 100, from: 0, to: 20, items: [ { txid: '3e81723d069b12983b2ef694c9782d32fca26cc978de744acbc32c3d3496e915', version: 1, locktime: 0, vin: [Object], vout: [Object], blockhash: '00000000011a135e5277f5493c52c66829792392632b8b65429cf07ad3c47a6c', confirmations: 109367, time: 1393659685, blocktime: 1393659685, valueOut: 0.3453, size: 225, firstSeenTs: undefined, valueIn: 0.3454, fees: 0.0001 }, { ... }, { ... }, ... { ... } ] } Note: if pagination params are not specified, the result is an array of transactions. Transaction Broadcasting POST method: /api/tx/send POST params: { \"rawtx\": \"signed transaction as hex string\" } eg { \"rawtx\": \"01000000017b1eabe0209b1fe794124575ef807057c77ada2138ae4fa8d6c4de0398a14f3f00000000494830450221008949f0cb400094ad2b5eb399d59d01c14d73d8fe6e96df1a7150deb388ab8935022079656090d7f6bac4c9a94e0aad311a4268e082a725f8aeae0573fb12ff866a5f01ffffffff01f0ca052a010000001976a914cbc20a7664f2f69e5355aa427045bc15e7c6c77288ac00000000\" } POST response: { txid: [:txid] } eg { txid: \"c7736a0a0046d5a8cc61c8c3c2821d4d7517f5de2bc66a966011aaa79965ffba\" } Historic Blockchain Data Sync Status /api/sync Live Network P2P Data Sync Status /api/peer Status of the Bitcoin Network /api/status?q=method Where \"method\" can be: getInfo getDifficulty getBestBlockHash getLastBlockHash Utility Methods /api/utils/estimatefee[?nbBlocks=2] Healthcheck Methods * /api/healthcheck[?minimumSync] * /forwarderhealth (only for Forwarder mode) Web Socket API The web socket API is served using standard, pure web sockets . The first step is connecting to _domain_/wss ; once connection is established, specific messages need to be sent to the server in order to subscribe to the different events (see each event entry). To simplify event subscription, the ScopedPureWebSocket class can be used. The following are the events published by insight: tx : new transaction received from network. To receive this event, after connecting to the websocket endpoint, send the SubscribeToTxs plain text message. Sample output: { \"eventname\": 'tx', \"txid\":\"00c1b1acb310b87085c7deaaeba478cef5dc9519fab87a4d943ecbb39bd5b053\", \"valueOut: \"0.564BCH\", \"addresses\": [\"17orHVW3pF86VQqraegS6PCjk579EasXYg\", \"12vJYnCm5QgY4vntutTG95SkiLfXhgbiAc\"] ... } Output fields: txid is the transaction hash, valueOut is the sum of all the transaction outputs, and addresses contains a list of the addresses involved in the transaction, considering inputs and outputs. block : new block received from network. After connecting to the webscoket endpoint, send the SubscribeToBlocks plain text message to begin receiving these notifications. Sample output: { \"eventname\":\"block\" } <addresstx> : new transaction received on a specific address. To subscribe to a specific address, send a message with that address in legacy format in plain text. Sample output: { eventname: 'addresstx', txid: \"00c1b1acb310b87085c7deaaeba478cef5dc9519fab87a4d943ecbb39bd5b053\" } Example Usage The following html page connects to the web socket insight API and listens for new transactions. <html> <body> <script> var socket = new WebSocket('http://domain.com/ws'); socket.onopen = function() { socket.send(\"SubscribeToTxs\"); }; socket.onmessage = function(msg) { var messageData = JSON.parse(msg.data); if(messageData.eventname != undefined && messageData.eventname == 'tx') { console.log(\"Transaction received! txid: \" + messageData.txid); } }; </script> </body> </html>"
  },
  "content/developer_guide/python/Python-interface.html": {
    "href": "content/developer_guide/python/Python-interface.html",
    "title": "Basic structure | Bitprim Documentation Site",
    "keywords": "Bitprim's Pyhton interface is built on top of Bitprim's C interface, in this fashion: On top of the raw C interface, a 1-1 binding is made in Python, in order to separate access to the API from its usage; this avoids impedance mismatch by separating the marshalling aspects from the binding language idiosyncrasies. That is, the 1-1 interface takes care of marshalling, without changing the interface. Then, the idiomatic interface uses the higher level language tools and idioms in order to hide the complexity from the application programmer. It takes another programmer profile in order to tinker with the lower level interfaces or consume them directly, but that is also possible when working with this approach: 3 separate levels of abstraction for accessing the same functionality. Basic structure See the source in Github : bitprimmodule.c : This is where the 1-1 native interface is implemented. C functions which can be called from Python are defined here, implementing all necessary marshalling. bitprim.py : This is the idiomatic interface definition. Here, Python classes are defined and Python idioms and conventions offered to make life easier for the Python application programmer. bitprim_run.py . Entry point. Creates an executor and starts it. Use for testing the API. User guide Python interface documentation is available here."
  },
  "content/developer_guide/go/Go-interface.html": {
    "href": "content/developer_guide/go/Go-interface.html",
    "title": "Basic structure | Bitprim Documentation Site",
    "keywords": "Bitprim's Go interface is built on top of Bitprim's C interface, in this fashion: On top of the raw C interface, a 1-1 binding is made in Go, in order to separate access to the API from its usage; this avoids impedance mismatch by separating the marshalling aspects from the binding language idiosyncrasies. That is, the 1-1 interface takes care of marshalling, without changing the interface. Then, the idiomatic interface uses the higher level language tools and idioms in order to hide the complexity from the application programmer. It takes another programmer profile in order to tinker with the lower level interfaces or consume them directly, but that is also possible when working with this approach: 3 separate levels of abstraction for accessing the same functionality. Basic structure See the source in Github : {entity}_native.go: All of these together implement the 1-1 native interface. As usual, executor is the main entity which is used for manipulating the node. {entity}.go: Together, all of these comprise the idiomatic interface. They define user defined types using the Go conventions that Go application programmers are familiar with and expect from a Go library/binding. RESTful interface One characteristic that sets Go apart from, say, Python, is the ease with which a REST API can be created and tested from scratch. This is a very useful feature in today's web-centric world, and in order to make things even easier for Go developers, a REST api is also offered in this interface. See here for an example of how to start an http server which hosts it and can be consumed from Postman, Curl or a browser and thus easily integrated into any web application."
  },
  "content/developer_guide/dotnet/tutorials/how_to_generate_addresses.html": {
    "href": "content/developer_guide/dotnet/tutorials/how_to_generate_addresses.html",
    "title": "Generate Seed | Bitprim Documentation Site",
    "keywords": "#How to create addresses If you want to receive coins you need to generate an address. In this tutorial you will learn: How to generate a seed How to generare a private key How to generate a public key How to generate an address Generate Seed First you need a seed to generate the private key. The seed must be a random string with a high degree of entropy. For this, we use the following method. Generate Private key Now we can generate the private key. The private key has 256 bits in length. And can be encoded in different formats: Raw Hex WIF WIF-Compressed Generate Public key The public key is derived from the private key using elliptic curve calculations. The public key can be compressed or uncompressed. Generate Address Now we can generate our public address to share with anyone. If K is the public key, the resulting address A is: A = Base58Check(RIPEMD160(SHA256(K)))"
  },
  "content/developer_guide/c++/C---interface.html": {
    "href": "content/developer_guide/c++/C---interface.html",
    "title": "Package diagram | Bitprim Documentation Site",
    "keywords": "Bitprim's C++ interface is the base layer of the platform, the lowest abstraction level available. It's a fork of the Satoshi/reference implementation with several improvements, the main of them being modularization. Being monolithic, the reference client is harder to change, not only because a change ripples across the whole system, but also because it's not possible to mix and match different module implementations. Package diagram If we were to view the Bitprim projects as UML packages, their dependencies would look like this (some projects omitted for simplicity): Which is the main responsibility/functionality for each package? secp256k1 : Implementation of the standard of the same name which deals with ellyptic curves cryptography. bitprim-core : Basic Bitcoin utilities (encryption, wallet, math) to be reused by all projects. bitprim-consensus : An implementation of Satoshi's algorithm for agreeing on a course of action (achieving consensus) between nodes in a network. bitprim-database : Defines how to store and manipulate Bitcoin transactions. bitprim-network : P2P communication rules between nodes in the Bitcoin network. bitprim-protocol : Defines payload structure and lower level communication details. bitprim-blockchain : Interface for accessing the Bitcoin public ledger, a.k.a. blockchain, in which all transactions are linked between them. bitprim-node : The highest level of abstraction: a full node in the Bitcoin network; it can query the blockchain in many ways and insert blocks as well. Exploring the public interface for each package All packages follow the same structure: At the top level of their source tree, they have an include directory. Inside it, there's a single .hpp file which #includes all the public headers for the package for convenience. Then, inside the include directory, all the public headers for the library reside. These represent the public interface, i.e. those classes meant to be consumed by other packages or programs built on top of the package. For example, for bitprim-node : Taking a look inside full_node.hpp , we can see in its public methods how an instance of a full node can be consumed: There's a constructor which receives a configuration object (see configuration.hpp ), a destructor, and more interestingly, functions for starting, running, stopping and closing the node. Some have callbacks (start and run), which the user will have to implement to handle the associated events asynchronously. Examples of how to do this can be seen in Bitprim projects which use the node package: bitprim-client and bitprim-server ."
  },
  "content/index.html": {
    "href": "content/index.html",
    "title": "Welcome to Bitprim | Bitprim Documentation Site",
    "keywords": "\"Bringing decentralized solutions to everyday life\" Welcome to Bitprim Bitprim is a multi-coin developing platform, working with multi-languages programming compatible with the Satoshi Client. Download: Github: https://github.com/bitprim Slack: bitprim.slack.com Email: info@bitprim.org The platform includes: 100% Satoshi Client Compatible Protocol Implementation Mining Engine Multi-Coin Bitcoin Cash (BCH) Bitcoin (BTC) Litecoin (LTC) RPC support C Interface C++ Interface Interfaces for Go, Python, Node, C#, Rust and Eiffel Full REST API implementation, compatible with insight API"
  },
  "README.html": {
    "href": "README.html",
    "title": "Bitprim documentation | Bitprim Documentation Site",
    "keywords": "Bitprim documentation This repository contains the Bitprim project's documentation. To read it online please go to http://bitprim.readthedocs.io/en/latest/ How to collaborate The documentation is written in Markdown, and hosted in http://readthedocs.org . If you want to contribute fixing errors or adding new content, please fork the repository and open a Pull Request with the proposed changes. Additional Resources General GitHub documentation GitHub pull request documentation Forking a Repo Using Pull Requests"
  },
  "content/developer_guide/c/C-interface.html": {
    "href": "content/developer_guide/c/C-interface.html",
    "title": "Resource management | Bitprim Documentation Site",
    "keywords": "Bitprim's C interface, the bitprim-node-cint project, is built on top of the C++ interface. Asides from allowing a C library or program to consume all the Bitprim functionality, it can act as the base to create bindings for many current popular programming languages, such as Javascript, C#, Golang, Java and Python. All of these languages can interface easily with C, but not with C++. Granted, the Object Oriented paradigm is lost when transitioning to C, but it can be \"recovered\" when implementing a binding in an object oriented language such as C#. In such a context, classes can be built in order to give application programmers a friendlier interface for integrating Bitcoin in their projects, bridging the gap created by C/C++'s inherent complexity. Therefore, Bitprim's interface is not really meant to be consumed directly, but as the basis for a higher level binding in another language. To make this task easier, most functions will receive a parameter which will wrap the implicit object (this), so that OOP can be preserved in the binding if possible. Resource management To avoid memory leaks, all C functions which allocate memory that must be released by the user are clearly documented as such. When implementing a binding on top of the C interface, it is advisable to use the RAII idiom whenever possible to relieve the application programmer from the burden of manual memory management. Basic structure - memory management Since this is C we're dealing with, there is nothing beyond a set of functions and some user defined types, but there is a structure nevertheless. The main \"entry point\" for the interface are the functions from executor_c.h and the types defined in primitives.h . To start consuming node functionality, the first step is calling one of these functions: executor_t executor_construct(char const* path, FILE* sout, FILE* serr); executor_t executor_construct_fd(char const* path, int sout_fd, int serr_fd); Any function with the construct suffix will create an object in dynamic memory, which will have to be released by calling the associated destruct : void executor_destruct(executor_t exec); This pattern will be seen with many other types; whenever an object is created by the user with a construct function, it will need to be released with destruct as soon as it is no longer needed. Another case is when a function needs to create an object for returning it. For example, if we wanted to fetch the transaction history for a specific Bitcoin address, we could use the fetch_history function: void fetch_history(executor_t exec, payment_address_t address, size_t limit, size_t from_height, history_fetch_handler_t handler); There's another concept in play here: a pointer to function acting as a callback. Looking at the definition for history_fetch_handler_t in primitives.h: typedef void (*history_fetch_handler_t)(int error, history_compact_list_t history); The second parameter, history, is created dynamically, and therefore must be released by the user, even if he didn't create it. This has to be done this way because there is no way for the C interface to know when the user is done using history. Therefore, it is up to him/her to call history_ compact__list _destruct(history)._ The remaining header files follow these conventions; transaction.h contains functions for manipulating a transaction object, block.h for blocks, and so on. Keep in mind that objects must be destroyed manually. API documentation Detailed documentation"
  },
  "content/developer_guide/introduction.html": {
    "href": "content/developer_guide/introduction.html",
    "title": "Introduction | Bitprim Documentation Site",
    "keywords": "Introduction Bitprim works as a cryptocurrency development platform with several programmable APIs: C++ ( https://github.com/bitprim/bitprim-node ) C ( https://github.com/bitprim/bitprim-node-cint ) C# ( https://github.com/bitprim/bitprim-cs ) Python ( https://github.com/bitprim/bitprim-py ) Javascript ( https://github.com/bitprim/bitprim-js ) Rust ( https://github.com/bitex-la/bitprim-rust ) Golang ( https://github.com/bitprim/bitprim-go ) Eiffel ( https://github.com/jvelilla/EiffelCryptocurrencyClient )"
  },
  "content/user_guide/rpc.html": {
    "href": "content/user_guide/rpc.html",
    "title": "| Bitprim Documentation Site",
    "keywords": "We are currently developing full RPC support, to be compatible with software that currently relies on other Bitcoin implementations. Currently we are able to respond to the following messages: getaddressbalance getaddresstxids getaddressdeltas getaddressutxos getblockhashes getaddressmempool getbestblockhash getblock getblockhash getblockchaininfo getblockheader getblockcount getblocktemplate getchaintips getdifficulty getinfo getmininginfo getrawtransaction getspentinfo validateaddress sendrawtransaction submitblock This allow us to successfully mine using our software."
  },
  "content/user_guide/releases_notes.html": {
    "href": "content/user_guide/releases_notes.html",
    "title": "Releases | Bitprim Documentation Site",
    "keywords": "Releases Here is the list of bitprim's releases"
  },
  "content/user_guide/introduction.html": {
    "href": "content/user_guide/introduction.html",
    "title": "Introduction | Bitprim Documentation Site",
    "keywords": "Introduction Bitprim allows you to run a full Bitcoin Cash / Bitcoin / Litecoin node, with all four main features: Wallet Mining Full blockchain Routing Bitprim also works as a cryptocurrency development platform with several programmable APIs: C++ C C# Python Javascript Rust Golang ... and networking APIs: bitprim-insight: A Bitprim implementation of the Insight-API JSON-RPC Libbitcoin BS-BX protocol"
  },
  "content/user_guide/installation.html": {
    "href": "content/user_guide/installation.html",
    "title": "Installation Requirements | Bitprim Documentation Site",
    "keywords": "Installation Requirements 64-bit machine. Conan package manager, version 1.4.0 or newer. See Conan Installation . Installation Procedure The Bitprim executables can be installed on Linux, macOS, FreeBSD, Windows and others. These binaries are pre-built for the most usual operating system/compiler combinations and hosted in an online repository. If there are no pre-built binaries for your platform, a build from source will be attempted. So, for any platform, an installation can be performed in 2 simple steps: Configure the Conan remote conan remote add bitprim https://api.bintray.com/conan/bitprim/bitprim Install the appropriate executable # For Bitcoin Cash conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=BCH # ... or (BCH is the default crypto) conan install bitprim-node-exe/0.10.2@bitprim/stable # For Bitcoin Legacy conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=BTC # For Litecoin conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=LTC Building from source Requirements In case there are no pre-built binaries for your platform, it is necessary to build from source code. In such a scenario, the following requirements must be added to the previous ones: C++11 Conforming Compiler. CMake building tool, version 3.4 or newer. Running the node In order to run the full node, you have to initialize the database and then run the node: Run the following to initialize the database: ./bn -i Finally, run the node: ./bn The above commands use the default configuration hardcoded in the executable. You can use a configuration file to customize the behavior of the node. In the bitprim-config repository you can find some example files. Initialize the database using a configuration file: ./bn -i -c <configuration file path> Run the node using a configuration file: ./bn -c <configuration file path> Advanced Installation Bitprim is a high performance node, so we have some options and pre-built packages tuned for several platforms. Specifically, you can choose your computer microarchitecture to download a pre-build executable compiled to take advantage of the instructions available in your processor. For example: # For Haswell microarchitecture and Bitcoin Cash currency conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=BCH -o microarchitecture=haswell So, you can manually choose the appropriate microarchitecture, some examples are: x86_64 , haswell , ivybridge , sandybridge , bulldozer , ... By default, if you do not specify any, the building system will select a base microarchitecture corresponding to your Instruction Set Architecture (ISA). For example, for Intel 80x86 , the x86_64 microarchitecture will be selected. Automatic Microarchitecture selection Our build system has the ability to automatically detect the microarchitecture of your processor. To do this, first, you have to install our pip package called cpuid . Our build system detects if this package is installed and in such case, makes use of it to detect the best possible executable for your processor. pip install cpuid conan install bitprim-node-exe/0.10.2@bitprim/stable"
  },
  "content/developer_guide/dotnet/introduction.html": {
    "href": "content/developer_guide/dotnet/introduction.html",
    "title": "Basic structure | Bitprim Documentation Site",
    "keywords": "Bitprim's .NET interface is built on top of Bitprim's C interface, in this fashion: On top of the raw C interface, a 1-1 binding is made in .NET, by using the Platform Invoke mechanism , in order to separate access to the API from its usage; this avoids impedance mismatch by separating the marshalling aspects from the binding language idiosyncrasies. That is, the 1-1 interface takes care of marshalling, without changing the interface. Then, the idiomatic interface uses the higher level language tools and idioms in order to hide the complexity from the application programmer. It takes another programmer profile in order to tinker with the lower level interfaces or consume them directly, but that is also possible when working with this approach: 3 separate levels of abstraction for accessing the same functionality. The platform invoke mechanism was chosen in order to support as many operating systems as possible, because .NET Core does not support C++/CLI. Basic structure The api is fully written in C#. See the source in Github : idiomatic classes : Object oriented abstractions over Bitcoin concepts: Chain, Transaction, Block, Header, and so on. The Executor class is responsible for handling node execution. native classes : These are all static classes, since each of these contains a set of DllImports of the native C functions. .Net standard Support The api implements .net standard 2.0 support to allow multiple consumers. Multiples coins Our API implements bindings for Bitcoin Cash (BCH) and Bitcoin Legacy (BCT). Litecoin (LTC) is in progress."
  },
  "content/developer_guide/dotnet/installation.html": {
    "href": "content/developer_guide/dotnet/installation.html",
    "title": "Installation | Bitprim Documentation Site",
    "keywords": "Installation Prerequisites 64-bit machine. Conan package manager, version 1.1.0 or newer. See Conan Installation . In case there are no pre-built binaries for your platform, conan will automatically try to build from source code. In such a scenario, the following requirements must be added to the previous ones: C++11 Conforming Compiler. CMake building tool, version 3.4 or newer. Installation You can install the Bitprim C# binding via Nuget. There are two packages available: For Bitcoin Cash (BCH) you need to use https://www.nuget.org/packages/bitprim-bch/ and for Bitcoin Legacy (BTC) you need to use https://www.nuget.org/packages/bitprim-btc/ If you use Visual Studio, you can use the UI or the Package Manager. UI Right click on your project Select Manage Nuget Packages Search for bitprim-bch or bitprim-btc Click Install Package Manager * Open Package Manager * Run the following command Install-Package bitprim-bch -Version 0.4.2 or Install-Package bitprim-btc -Version 0.4.2 If you are using dotnet cli: dotnet add package bitprim-bch --version 0.4.2 or dotnet add package bitprim-btc --version 0.4.2 Building from source If you want to build from source, you need the following prerequisites: .Net Framework 4.6.1 .Net Core 2.0 Powershell (Windows only) Run the following commands: git clone https://github.com/bitprim/bitprim-cs.git cd bitprim-cs if you are on Windows, run: powershell ./build.ps1 if you are in Linux or osx : chmod +x build.sh ./build.sh If you have problems running build.ps1 please check this link https://cakebuild.net/docs/tutorials/powershell-security"
  },
  "content/blank.html": {
    "href": "content/blank.html",
    "title": "Test | Bitprim Documentation Site",
    "keywords": "Test"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Bitprim | Bitprim Documentation Site",
    "keywords": "\"Bringing decentralized solutions to everyday life\" Welcome to Bitprim Bitprim is a multi-coin developing platform, working with multi-languages programming compatible with the Satoshi Client. Download: Github: https://github.com/bitprim Slack: bitprim.slack.com Email: info@bitprim.org The platform includes: 100% Satoshi Client Compatible Protocol Implementation Mining Engine Multi-Coin Bitcoin Cash (BCH) Bitcoin (BTC) Litecoin (LTC) RPC support C Interface C++ Interface Interfaces for Go, Python, Node, C#, Rust and Eiffel Full REST API implementation, compatible with insight API"
  },
  "content/team.html": {
    "href": "content/team.html",
    "title": "Members | Bitprim Documentation Site",
    "keywords": "Members Juan Garavaglia - CEO Founder Mariano Orsili - CTO Founder Mateo Friedman - Math Expert Fernando Pelliccioni - Lead Developer Ramiro Carlucho - Developer Guillermo Paoletti - Developer Dario Ramos - Developer Mario Dal Lago - Developer Gerardo Arceri - DevOp Renzo Barrionuevo - Project Manager Sergio Suchockas - Operations Manager We are open for contibutors and looking for full time developers, feel free to contact us at info@bitprim.org"
  },
  "bitprim-cs/Bitprim.PaymentAddress.html": {
    "href": "bitprim-cs/Bitprim.PaymentAddress.html",
    "title": "Class PaymentAddress | Bitprim Documentation Site",
    "keywords": "Class PaymentAddress Represents a Bitcoin wallet address. Inheritance Object PaymentAddress Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class PaymentAddress : IDisposable Constructors | Improve this Doc View Source PaymentAddress(String) Create an address from its hex string representation. Declaration public PaymentAddress(string hexString) Parameters Type Name Description String hexString Properties | Improve this Doc View Source Encoded Human readable representation. Declaration public string Encoded { get; } Property Value Type Description String | Improve this Doc View Source IsValid Returns true iif this is a valid Base58 address. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Version Address version. Declaration public byte Version { get; } Property Value Type Description Byte Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize()"
  },
  "bitprim-cs/Bitprim.OutputPoint.html": {
    "href": "bitprim-cs/Bitprim.OutputPoint.html",
    "title": "Class OutputPoint | Bitprim Documentation Site",
    "keywords": "Class OutputPoint Transaction hash and index pair representing one of the transaction outputs. Inheritance Object OutputPoint Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class OutputPoint : IDisposable Constructors | Improve this Doc View Source OutputPoint() Create an empty output point. Declaration public OutputPoint() | Improve this Doc View Source OutputPoint(Byte[], UInt32) Create an output point from a hash and index pair. Declaration public OutputPoint(byte[] pointHash, UInt32 index) Parameters Type Name Description Byte [] pointHash UInt32 index Properties | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Index Transaction index (zero-based). Declaration public UInt32 Index { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize()"
  },
  "bitprim-cs/Bitprim.NodeSettings.html": {
    "href": "bitprim-cs/Bitprim.NodeSettings.html",
    "title": "Class NodeSettings | Bitprim Documentation Site",
    "keywords": "Class NodeSettings Inheritance Object NodeSettings Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class NodeSettings : object Properties | Improve this Doc View Source CurrencyType Declaration public static CurrencyType CurrencyType { get; } Property Value Type Description CurrencyType"
  },
  "bitprim-cs/Bitprim.NetworkType.html": {
    "href": "bitprim-cs/Bitprim.NetworkType.html",
    "title": "Enum NetworkType | Bitprim Documentation Site",
    "keywords": "Enum NetworkType Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum NetworkType : int Fields Name Description Mainnet None Regtest Testnet"
  },
  "bitprim-cs/Bitprim.ErrorCode.html": {
    "href": "bitprim-cs/Bitprim.ErrorCode.html",
    "title": "Enum ErrorCode | Bitprim Documentation Site",
    "keywords": "Enum ErrorCode Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum ErrorCode : int Fields Name Description AcceptFailed AddressBlocked AddressInUse BadStream BlockEmbeddedSigopLimit BlockInternalDoubleSpend BlockLegacySigopLimit BlockNonFinal BlockSizeLimit ChannelStopped ChannelTimeout CheckpointsFailed CoinbaseHeightMismatch CoinbaseMaturity CoinbaseTransaction CoinbaseValueLimit Deprecated DoubleSpend DuplicateBlock DustyTransaction EmptyBlock EmptyTransaction ExtraCoinbases FileSystem FirstNotCoinbase FuturisticTimestamp IncorrectProofOfWork IncorrectSignature InsufficientFee InsufficientWork InternalDuplicate InvalidCoinbaseScriptSize InvalidOperationCount InvalidPreviousBlock InvalidProofOfWork InvalidPushDataSize InvalidScript InvalidScriptEmbed InvalidScriptSize InvalidSignatureEncoding invalidSignatureLaxEncoding InvalidStackScope InvalidStackSize ListenFailed MerkleMismatch MissingPreviousOutput NetworkUnreachable NonStandard NotFound NotImplemented OldVersionBlock OpAbs OpAdd OpAdd1 OpBoolAnd OpBoolOr OpCheckLocktimeVerify1 OpCheckLocktimeVerify2 OpCheckLocktimeVerify3 OpCheckLocktimeVerify4 OpCheckLocktimeVerify5 OpCheckLocktimeVerify6 OpCheckMultisig OpCheckMultisigVerify1 OpCheckMultisigVerify2 OpCheckMultisigVerify3 OpCheckMultisigVerify4 OpCheckMultisigVerify5 OpCheckMultisigVerify6 OpCheckMultisigVerify7 OpCheckSequenceVerify1 OpCheckSequenceVerify2 OpCheckSequenceVerify3 OpCheckSequenceVerify4 OpCheckSequenceVerify5 OpCheckSequenceVerify6 OpCheckSequenceVerify7 OpCheckSig OpCheckSigVerify1 OpCodeSeperator OpDisabled OpDrop OpDrop2 OpDup OpDup2 OpDup3 OpElse OpEndIf OpEqual OpEqualVerify1 OpEqualVerify2 OperationFailed OpFromAltStack OpGreaterThan OpGreaterThanOrEqual OpHash160 OpHash256 OpIf OpIfDup OpLessThan OpLessThanOrEqual OpMax OpMin OpNegate OpNip OpNonZero OpNot OpNotIf OpNumEqual OpNumEqualVerify1 OpNumEqualVerify2 OpNumNotEqual OpOver OpOver2 OpPick OpPushData OpPushSize OpReserved OpReturn OpRipemd160 OpRoll OpRot OpRot2 OpSha1 OpSha256 OpSize OpSub OpSub1 OpSwap OpSwap2 OpToAltStack OpTuck OpVerify1 OpVerify2 OpWithin OrphanBlock OrphanTransaction Oversubscribed PeerThrottling PrematureValidation PreviousOutputNull ResolveFailed SequenceLocked ServiceStopped SpendExceedsValue SpendOverflow StackFalse StaleChain StoreBlockDuplicate StoreBlockInvalidHeight StoreBlockMissingParent Success TimestampTooEarly TransactionEmbeddedSigopLimit TransactionInternalDoubleSpend TransactionLegacySigopLimit TransactionNonFinal TransactionSizeLimit Unknown UnspentDuplicate"
  },
  "bitprim-cs/Bitprim.DisposableApiCallResult-1.html": {
    "href": "bitprim-cs/Bitprim.DisposableApiCallResult-1.html",
    "title": "Class DisposableApiCallResult<TResultData> | Bitprim Documentation Site",
    "keywords": "Class DisposableApiCallResult<TResultData> Inheritance Object DisposableApiCallResult<TResultData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class DisposableApiCallResult<TResultData> : IDisposable where TResultData : IDisposable Type Parameters Name Description TResultData Properties | Improve this Doc View Source ErrorCode Declaration public ErrorCode ErrorCode { get; set; } Property Value Type Description ErrorCode | Improve this Doc View Source Result Declaration public TResultData Result { get; set; } Property Value Type Description TResultData Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "bitprim-cs/Bitprim.CompactBlock.html": {
    "href": "bitprim-cs/Bitprim.CompactBlock.html",
    "title": "Class CompactBlock | Bitprim Documentation Site",
    "keywords": "Class CompactBlock TODO: Omit from docs (not implemented yet) BIP 512 representation of a block for reduced propagation bandwidth. Inheritance Object CompactBlock Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class CompactBlock : IDisposable Properties | Improve this Doc View Source IsValid Returns true iif this is a valid compact representation of a block (as per BIP 512). Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Nonce Block nonce (i.e. value which makes hash start with leading zeroes), as a 64-bit unsigned integer. Declaration public UInt64 Nonce { get; } Property Value Type Description UInt64 | Improve this Doc View Source TransactionCount Amount of transactions that belong to the block. Declaration public UInt64 TransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetNthTransaction(UInt64) Get the block's nth transaction, synchronously. Declaration public Transaction GetNthTransaction(UInt64 n) Parameters Type Name Description UInt64 n Zero-based index Returns Type Description Transaction Full transaction object | Improve this Doc View Source GetSerializedSize(UInt32) Get the compact block's serialized size. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating size. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source Reset() TODO: Document Declaration public void Reset()"
  },
  "bitprim-cs/Bitprim.BlockReader.html": {
    "href": "bitprim-cs/Bitprim.BlockReader.html",
    "title": "Class BlockReader | Bitprim Documentation Site",
    "keywords": "Class BlockReader Allows user to read a specific set of blocks from the blockchain. Inheritance Object BlockReader Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class BlockReader : IDisposable Constructors | Improve this Doc View Source BlockReader() Declaration public BlockReader() | Improve this Doc View Source BlockReader(HashList, Byte[]) Declaration public BlockReader(HashList start, byte[] stop) Parameters Type Name Description HashList start Byte [] stop Properties | Improve this Doc View Source IsValid Return true iif all blocks in the specified set are valid Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source StartHashes Get or set the hashes that have to be read in order to start reading. Declaration public HashList StartHashes { get; set; } Property Value Type Description HashList | Improve this Doc View Source StopHash Get or set on which block to stop reading. Declaration public byte[] StopHash { get; set; } Property Value Type Description Byte [] Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetSerializedSize(UInt32) The sum of the sizes of the read blocks. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating block size. Returns Type Description UInt64 UInt64 representation of the sum | Improve this Doc View Source Reset() Go back to the beginning of the block set. Declaration public void Reset()"
  },
  "bitprim-cs/Bitprim.PointKind.html": {
    "href": "bitprim-cs/Bitprim.PointKind.html",
    "title": "Enum PointKind | Bitprim Documentation Site",
    "keywords": "Enum PointKind Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum PointKind : int Fields Name Description Output Spend"
  },
  "bitprim-cs/Bitprim.Point.html": {
    "href": "bitprim-cs/Bitprim.Point.html",
    "title": "Class Point | Bitprim Documentation Site",
    "keywords": "Class Point Represents one of the transaction inputs. It's a transaction hash and index pair. Inheritance Object Point Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Point : object Properties | Improve this Doc View Source Checksum This is used with OutputPoint identification within a set of history rows of the same address. Declaration public UInt64 Checksum { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Index Input position in the transaction (zero-based). Declaration public UInt32 Index { get; } Property Value Type Description UInt32 | Improve this Doc View Source IsValid Returns true if and only if this point is not null. Declaration public bool IsValid { get; } Property Value Type Description Boolean"
  },
  "bitprim-cs/Bitprim.OutputList.html": {
    "href": "bitprim-cs/Bitprim.OutputList.html",
    "title": "Class OutputList | Bitprim Documentation Site",
    "keywords": "Class OutputList Inheritance Object NativeList < Output > OutputList Implements IDisposable Inherited Members NativeList<Output>.GetEnumerator() NativeList<Output>.Dispose() NativeList<Output>.Dispose(Boolean) NativeList<Output>.Item[UInt32] NativeList<Output>.Count NativeList<Output>.Add(Output) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class OutputList : NativeList<Output>, IDisposable Methods | Improve this Doc View Source AddElement(Output) Declaration public override void AddElement(Output element) Parameters Type Name Description Output element Overrides Bitprim.NativeList<Bitprim.Output>.AddElement(Bitprim.Output) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Output>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Output>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Output>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override Output GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Output Overrides Bitprim.NativeList<Bitprim.Output>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.Output.html": {
    "href": "bitprim-cs/Bitprim.Output.html",
    "title": "Class Output | Bitprim Documentation Site",
    "keywords": "Class Output Represents one of the outputs of a Transaction. Inheritance Object Output Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Output : IDisposable Constructors | Improve this Doc View Source Output() Create an empty output. Declaration public Output() | Improve this Doc View Source Output(UInt64, Script) Create an output from a value and a script. Declaration public Output(UInt64 value, Script script) Parameters Type Name Description UInt64 value In Satoshis. Script script Output script. Properties | Improve this Doc View Source IsValid Returns false if and only if output is not found. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Script Output script. Declaration public Script Script { get; } Property Value Type Description Script | Improve this Doc View Source SignatureOperationCount The amount of signature operations in the output script. Declaration public UInt64 SignatureOperationCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source Value Spend, in Satoshis. Declaration public UInt64 Value { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetSerializedSize(Boolean) Output size in bytes. Declaration public UInt64 GetSerializedSize(bool wire) Parameters Type Name Description Boolean wire If true, size will include size of 'uint32' for storing spender height. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source PaymentAddress(Boolean) Declaration public PaymentAddress PaymentAddress(bool useTestnetRules) Parameters Type Name Description Boolean useTestnetRules Returns Type Description PaymentAddress"
  },
  "bitprim-cs/Bitprim.InputList.html": {
    "href": "bitprim-cs/Bitprim.InputList.html",
    "title": "Class InputList | Bitprim Documentation Site",
    "keywords": "Class InputList Inheritance Object NativeList < Input > InputList Implements IDisposable Inherited Members NativeList<Input>.GetEnumerator() NativeList<Input>.Dispose() NativeList<Input>.Dispose(Boolean) NativeList<Input>.Item[UInt32] NativeList<Input>.Count NativeList<Input>.Add(Input) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class InputList : NativeList<Input>, IDisposable Methods | Improve this Doc View Source AddElement(Input) Declaration public override void AddElement(Input element) Parameters Type Name Description Input element Overrides Bitprim.NativeList<Bitprim.Input>.AddElement(Bitprim.Input) | Improve this Doc View Source CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Input>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Input>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Input>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt32) Declaration public override Input GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Input Overrides Bitprim.NativeList<Bitprim.Input>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "bitprim-cs/Bitprim.Input.html": {
    "href": "bitprim-cs/Bitprim.Input.html",
    "title": "Class Input | Bitprim Documentation Site",
    "keywords": "Class Input Represents a Transaction input. Inheritance Object Input Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Input : IDisposable Constructors | Improve this Doc View Source Input() Create an empty input. Declaration public Input() | Improve this Doc View Source Input(Output, Script, UInt32) Create an input from a previous output, a script and a sequence number. Declaration public Input(Output previousOutput, Script script, UInt32 sequence) Parameters Type Name Description Output previousOutput The output to spend. Script script Input script. UInt32 sequence Zero-based, indexes this input in the input set. Properties | Improve this Doc View Source IsFinal Returns 1 iif sequence is equal to max_sequence. Declaration public bool IsFinal { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns false if and only if previous outputs or input script are invalid. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source PreviousOutput Returns a reference to the previous output, as an OutputPoint: a transaction hash and index pair. Declaration public OutputPoint PreviousOutput { get; } Property Value Type Description OutputPoint | Improve this Doc View Source Script The input's script. Declaration public Script Script { get; } Property Value Type Description Script | Improve this Doc View Source Sequence Zero-based index for the input in the transaction's input set. Declaration public UInt32 Sequence { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetSerializedSize(Boolean) Input size in bytes. Declaration public UInt64 GetSerializedSize(bool wire) Parameters Type Name Description Boolean wire Iif true, consider 4 extra bytes from wire field. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source GetSignatureOperationsCount(Boolean) Total amount of sigops (signature operations) in the input script. Declaration public UInt64 GetSignatureOperationsCount(bool bip16Active) Parameters Type Name Description Boolean bip16Active Iif true, count BIP 16 active sig ops Returns Type Description UInt64 Sigops count."
  },
  "bitprim-cs/Bitprim.GetBlockHeaderByHashTxSizeResult.html": {
    "href": "bitprim-cs/Bitprim.GetBlockHeaderByHashTxSizeResult.html",
    "title": "Class GetBlockHeaderByHashTxSizeResult | Bitprim Documentation Site",
    "keywords": "Class GetBlockHeaderByHashTxSizeResult Inheritance Object GetBlockHeaderByHashTxSizeResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class GetBlockHeaderByHashTxSizeResult : IDisposable Properties | Improve this Doc View Source Block Declaration public GetBlockDataResult<Header> Block { get; set; } Property Value Type Description GetBlockDataResult < Header > | Improve this Doc View Source SerializedBlockSize Declaration public UInt64 SerializedBlockSize { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source TransactionHashes Declaration public HashList TransactionHashes { get; set; } Property Value Type Description HashList Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "bitprim-cs/Bitprim.GetBlockHashTimestampResult.html": {
    "href": "bitprim-cs/Bitprim.GetBlockHashTimestampResult.html",
    "title": "Class GetBlockHashTimestampResult | Bitprim Documentation Site",
    "keywords": "Class GetBlockHashTimestampResult Inheritance Object GetBlockHashTimestampResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class GetBlockHashTimestampResult : object Properties | Improve this Doc View Source BlockHash Declaration public byte[] BlockHash { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source BlockTimestamp Declaration public DateTime BlockTimestamp { get; set; } Property Value Type Description DateTime"
  }
}
{
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedSetInitialAssetIdHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedSetInitialAssetIdHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedSetInitialAssetIdHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedSetInitialAssetIdHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate void KeokenStateDelegatedSetInitialAssetIdHandler(IntPtr state, UInt32 asset_id_initial); Parameters Type Name Description IntPtr state UInt32 asset_id_initial"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetBalanceHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetBalanceHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetBalanceHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetBalanceHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate Int64 KeokenStateDelegatedGetBalanceHandler(IntPtr state, UInt32 asset_id, IntPtr addr); Parameters Type Name Description IntPtr state UInt32 asset_id IntPtr addr Returns Type Description Int64"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsListHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsListHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsListHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsListHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate IntPtr KeokenStateDelegatedGetAssetsListHandler(IntPtr state); Parameters Type Name Description IntPtr state Returns Type Description IntPtr"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsByAddressHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsByAddressHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsByAddressHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsByAddressHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate IntPtr KeokenStateDelegatedGetAssetsByAddressHandler(IntPtr state, IntPtr addr); Parameters Type Name Description IntPtr state IntPtr addr Returns Type Description IntPtr"
  },
  "bitprim-cs/Bitprim.Native.hash_t.html": {
    "href": "bitprim-cs/Bitprim.Native.hash_t.html",
    "title": "Struct hash_t | Bitprim Documentation Site",
    "keywords": "Struct hash_t Namespace : Bitprim.Native Assembly : bitprim-bch.dll Syntax public struct hash_t Fields | Improve this Doc View Source hash Declaration public byte[] hash Field Value Type Description Byte []"
  },
  "bitprim-cs/Bitprim.MerkleBlock.html": {
    "href": "bitprim-cs/Bitprim.MerkleBlock.html",
    "title": "Class MerkleBlock | Bitprim Documentation Site",
    "keywords": "Class MerkleBlock Merkle tree representation of a blockchain block. Inheritance Object MerkleBlock Implements IMerkleBlock IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MerkleBlock : object, IMerkleBlock, IDisposable Properties | Improve this Doc View Source HashCount Transaction hashes list element count. Declaration public UInt64 HashCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source Header The block's header. Declaration public IHeader Header { get; } Property Value Type Description IHeader | Improve this Doc View Source IsValid Returns true if and only if it the block contains txs hashes, and the header is valid. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source TotalTransactionCount Amount of transactions inside the block. Declaration public UInt64 TotalTransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetNthHash(Int32) Get the Nth transaction hash from the block. Declaration public byte[] GetNthHash(int n) Parameters Type Name Description Int32 n Zerp-based index. Returns Type Description Byte [] Transaction hash in 32 byte array format. | Improve this Doc View Source GetSerializedSize(UInt32) Block size in bytes (as a Merkle block, not as a full block). Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating size. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source Reset() Delete all the data inside the block. Declaration public void Reset() Implements IMerkleBlock IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.DelegatedState.html": {
    "href": "bitprim-cs/Bitprim.Keoken.DelegatedState.html",
    "title": "Class DelegatedState | Bitprim Documentation Site",
    "keywords": "Class DelegatedState Inheritance Object DelegatedState Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public static class DelegatedState : object Fields | Improve this Doc View Source KeokenStateDelegatedAssetIdExistsHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedAssetIdExistsHandler KeokenStateDelegatedAssetIdExistsHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedAssetIdExistsHandler | Improve this Doc View Source KeokenStateDelegatedCreateAssetHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedCreateAssetHandler KeokenStateDelegatedCreateAssetHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedCreateAssetHandler | Improve this Doc View Source KeokenStateDelegatedCreateBalanceEntryHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedCreateBalanceEntryHandler KeokenStateDelegatedCreateBalanceEntryHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedCreateBalanceEntryHandler | Improve this Doc View Source KeokenStateDelegatedGetAllAssetAddressesListHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedGetAllAssetAddressesListHandler KeokenStateDelegatedGetAllAssetAddressesListHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedGetAllAssetAddressesListHandler | Improve this Doc View Source KeokenStateDelegatedGetAssetsByAddressHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsByAddressHandler KeokenStateDelegatedGetAssetsByAddressHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsByAddressHandler | Improve this Doc View Source KeokenStateDelegatedGetAssetsListHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsListHandler KeokenStateDelegatedGetAssetsListHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsListHandler | Improve this Doc View Source KeokenStateDelegatedGetBalanceHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedGetBalanceHandler KeokenStateDelegatedGetBalanceHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedGetBalanceHandler | Improve this Doc View Source KeokenStateDelegatedSetInitialAssetIdHandler Declaration public static KeokenManagerNativeDelegates.KeokenStateDelegatedSetInitialAssetIdHandler KeokenStateDelegatedSetInitialAssetIdHandler Field Value Type Description KeokenManagerNativeDelegates.KeokenStateDelegatedSetInitialAssetIdHandler Methods | Improve this Doc View Source SetDelegatedState(IKeokenState) Declaration public static void SetDelegatedState(IKeokenState internalState) Parameters Type Name Description IKeokenState internalState"
  },
  "bitprim-cs/Bitprim.ITransaction.html": {
    "href": "bitprim-cs/Bitprim.ITransaction.html",
    "title": "Interface ITransaction | Bitprim Documentation Site",
    "keywords": "Interface ITransaction Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface ITransaction : IDisposable Properties | Improve this Doc View Source Fees Fees to pay to the winning miner. Declaration UInt64 Fees { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Inputs A list with all the transaction inputs. Declaration InputList Inputs { get; } Property Value Type Description InputList | Improve this Doc View Source IsCoinbase Returns true if and only if this is a coinbase transaction (i.e. generates new coins). Declaration bool IsCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocktimeConflict Returns true if and only if the transaction is locked and every input is final, false otherwise. Declaration bool IsLocktimeConflict { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMissingPreviousOutputs Returns true if and only if at least one of the previous outputs is invalid, false otherwise. Declaration bool IsMissingPreviousOutputs { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNullNonCoinbase Return true if and only if the transaction is not coinbase and has a null previous output, false otherwise. Declaration bool IsNullNonCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOversizeCoinbase Returns true if the transaction is coinbase and has an invalid script size on its first input. Declaration bool IsOversizeCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverspent Returns true if transaction is not a coinbase, and the sum of its outputs is higher than the sum of its inputs, false otherwise. Declaration bool IsOverspent { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns true if and only if this transaction is valid according to the protocol. Declaration bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Locktime Transaction locktime. Declaration UInt32 Locktime { get; } Property Value Type Description UInt32 | Improve this Doc View Source Outputs A list with all the transaction outputs. Declaration OutputList Outputs { get; } Property Value Type Description OutputList | Improve this Doc View Source SignatureOperations Amount of signature operations in the transaction. Declaration UInt64 SignatureOperations { get; } Property Value Type Description UInt64 | Improve this Doc View Source TotalInputValue Sum of every input value in the transaction. Declaration UInt64 TotalInputValue { get; } Property Value Type Description UInt64 | Improve this Doc View Source TotalOutputValue Sum of every output value in the transaction. Declaration UInt64 TotalOutputValue { get; } Property Value Type Description UInt64 | Improve this Doc View Source Version Transaction protocol version. Declaration UInt32 Version { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source GetHashBySigHashType(UInt32) 32 bytes transaction hash + 4 bytes signature hash type Declaration byte[] GetHashBySigHashType(UInt32 sigHashType) Parameters Type Name Description UInt32 sigHashType Sighash type. Returns Type Description Byte [] Hash and sighash type. | Improve this Doc View Source GetSerializedSize(Boolean) Transaction size in bytes. Declaration UInt64 GetSerializedSize(bool wire = true) Parameters Type Name Description Boolean wire If and only if true, size will include size of 'uint32' for storing spender output height Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source GetSignatureOperationsBip16Active(Boolean) Amount of signature operations in the transactions. Declaration UInt64 GetSignatureOperationsBip16Active(bool bip16Active) Parameters Type Name Description Boolean bip16Active True if and only if BIP16 is active, false otherwise. Returns Type Description UInt64 | Improve this Doc View Source IsDoubleSpend(Boolean) Returns true if at least one of the previous outputs was already spent, false otherwise. Declaration bool IsDoubleSpend(bool includeUnconfirmed) Parameters Type Name Description Boolean includeUnconfirmed Iif true, consider unconfirmed transactions. Returns Type Description Boolean True if and only if transaction is double spend. | Improve this Doc View Source IsFinal(UInt64, UInt32) Returns true if and only if the transaction is final, false otherwise. Declaration bool IsFinal(UInt64 blockHeight, UInt32 blockTime) Parameters Type Name Description UInt64 blockHeight UInt32 blockTime Returns Type Description Boolean | Improve this Doc View Source IsImmature(UInt64) Returns true if and only if at least one of the inputs is not mature, false otherwise. Declaration bool IsImmature(UInt64 targetHeight) Parameters Type Name Description UInt64 targetHeight Returns Type Description Boolean | Improve this Doc View Source ToData(Boolean) Raw transaction data. Declaration byte[] ToData(bool wire) Parameters Type Name Description Boolean wire Iif true, include data size at the beginning. Returns Type Description Byte [] Byte array with transaction data."
  },
  "bitprim-cs/Bitprim.IHeader.html": {
    "href": "bitprim-cs/Bitprim.IHeader.html",
    "title": "Interface IHeader | Bitprim Documentation Site",
    "keywords": "Interface IHeader Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IHeader : IDisposable Properties | Improve this Doc View Source Bits Difficulty threshold. Declaration UInt32 Bits { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Hash Block hash in 32 byte array format. Declaration byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source IsValid Returns true if and only if the header conforms to the Bitcoin protocol format. Declaration bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Merkle Merkle root in 32 byte array format. Declaration byte[] Merkle { get; } Property Value Type Description Byte [] | Improve this Doc View Source Nonce The nonce that allowed this block to be added to the blockchain. Declaration UInt32 Nonce { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source PreviousBlockHash Hash belonging to the immediately previous block in the blockchain, as a 32 byte array. This is all zeros for the first block, a.k.a. Genesis. Declaration byte[] PreviousBlockHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source ProofString Hexadecimal string representation of the block's proof (which is a 256-bit number). Declaration string ProofString { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Block timestamp in UNIX Epoch format (seconds since January 1st 1970) Assume UTC 0. Declaration UInt32 Timestamp { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Version Header protocol version. Declaration UInt32 Version { get; set; } Property Value Type Description UInt32"
  },
  "bitprim-cs/Bitprim.IChain.html": {
    "href": "bitprim-cs/Bitprim.IChain.html",
    "title": "Interface IChain | Bitprim Documentation Site",
    "keywords": "Interface IChain Blockchain abstract interface. Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IChain Properties | Improve this Doc View Source IsStale Returns true if and only if the blockchain is synchronized (i.e. at current network top height) Declaration bool IsStale { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source FetchBlockByHashAsync(Byte[]) Given a block hash, retrieve the full block it identifies, asynchronously. Declaration Task<DisposableApiCallResult<GetBlockDataResult<IBlock>>> FetchBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IBlock >>> | Improve this Doc View Source FetchBlockByHeightAsync(UInt64) Given a block height, retrieve the full block it identifies, asynchronously. Declaration Task<DisposableApiCallResult<GetBlockDataResult<IBlock>>> FetchBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IBlock >>> | Improve this Doc View Source FetchBlockByHeightHashTimestampAsync(UInt64) Given a block height, retrieve only block hash and timestamp, asynchronously. Declaration Task<ApiCallResult<GetBlockHashTimestampResult>> FetchBlockByHeightHashTimestampAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < ApiCallResult < GetBlockHashTimestampResult >> | Improve this Doc View Source FetchBlockHeaderByHashAsync(Byte[]) Given a block hash, get the header from the block it identifies, asynchronously. Declaration Task<DisposableApiCallResult<GetBlockDataResult<IHeader>>> FetchBlockHeaderByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IHeader >>> | Improve this Doc View Source FetchBlockHeaderByHashTxSizesAsync(Byte[]) Given a block hash, retrieve block header, tx hashes and serialized block size, asynchronously. Declaration Task<DisposableApiCallResult<GetBlockHeaderByHashTxSizeResult>> FetchBlockHeaderByHashTxSizesAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockHeaderByHashTxSizeResult >> Tx hashes and serialized block size. Dispose result. | Improve this Doc View Source FetchBlockHeaderByHeightAsync(UInt64) Given a block height, get the header from the block it identifies, asynchronously. Declaration Task<DisposableApiCallResult<GetBlockDataResult<IHeader>>> FetchBlockHeaderByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IHeader >>> | Improve this Doc View Source FetchBlockHeightAsync(Byte[]) Given a block hash, it queries the chain asynchronously for the block's height. Return right away and uses a callback to return the result. Declaration Task<ApiCallResult<UInt64>> FetchBlockHeightAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32-byte array representation of the block hash. Identifies it univocally. Returns Type Description Task < ApiCallResult < UInt64 >> | Improve this Doc View Source FetchConfirmedTransactionsAsync(PaymentAddress, UInt64, UInt64) Get a list of tx ids for a given payment address (asynchronously). Duplicates are already filtered out. Declaration Task<DisposableApiCallResult<INativeList<byte[]>>> FetchConfirmedTransactionsAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < INativeList < Byte []>>> | Improve this Doc View Source FetchHistoryAsync(PaymentAddress, UInt64, UInt64) Get a list of output points, values, and spends for a given payment address (asynchronously) Declaration Task<DisposableApiCallResult<INativeList<IHistoryCompact>>> FetchHistoryAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < INativeList < IHistoryCompact >>> | Improve this Doc View Source FetchLastHeightAsync() Gets the height of the highest block in the local copy of the blockchain, asynchronously. Declaration Task<ApiCallResult<UInt64>> FetchLastHeightAsync() Returns Type Description Task < ApiCallResult < UInt64 >> | Improve this Doc View Source FetchMerkleBlockByHashAsync(Byte[]) Given a block hash, get the merkle block from the block it identifies, asynchronously. Declaration Task<DisposableApiCallResult<GetBlockDataResult<IMerkleBlock>>> FetchMerkleBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IMerkleBlock >>> | Improve this Doc View Source FetchMerkleBlockByHeightAsync(UInt64) Given a block height, get the merkle block from the block it identifies, asynchronously. Declaration Task<DisposableApiCallResult<GetBlockDataResult<IMerkleBlock>>> FetchMerkleBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Desired block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IMerkleBlock >>> | Improve this Doc View Source FetchSpendAsync(OutputPoint) Fetch the transaction input which spends the indicated output, asynchronously. Declaration Task<ApiCallResult<IPoint>> FetchSpendAsync(OutputPoint outputPoint) Parameters Type Name Description OutputPoint outputPoint Tx hash and index pair where the output was spent. Returns Type Description Task < ApiCallResult < IPoint >> | Improve this Doc View Source FetchStealthAsync(Binary, UInt64) Get metadata on potential payment transactions by stealth filter. Given a filter and a height in the chain, it queries the chain for transactions matching the given filter. Declaration Task<DisposableApiCallResult<INativeList<IStealthCompact>>> FetchStealthAsync(Binary filter, UInt64 fromHeight) Parameters Type Name Description Binary filter Must be at least 8 bits in length. example \"10101010\" UInt64 fromHeight Starting height in the chain to search for transactions Returns Type Description Task < DisposableApiCallResult < INativeList < IStealthCompact >>> | Improve this Doc View Source FetchTransactionAsync(Byte[], Boolean) Get a transaction by its hash, asynchronously. Declaration Task<DisposableApiCallResult<GetTxDataResult>> FetchTransactionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True if the transaction must belong to a block Returns Type Description Task < DisposableApiCallResult < GetTxDataResult >> | Improve this Doc View Source FetchTransactionPositionAsync(Byte[], Boolean) Given a transaction hash, it fetches the height and position inside the block, asynchronously. Declaration Task<ApiCallResult<GetTxPositionResult>> FetchTransactionPositionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True iif the transaction must belong to a block Returns Type Description Task < ApiCallResult < GetTxPositionResult >> | Improve this Doc View Source GetMempoolTransactions(PaymentAddress, Boolean) Get mempool transactions (unconfirmed) from a specific address. Declaration INativeList<IMempoolTransaction> GetMempoolTransactions(PaymentAddress address, bool useTestnetRules) Parameters Type Name Description PaymentAddress address Address to search. Boolean useTestnetRules Tells whether we are in testnet or not. Returns Type Description INativeList < IMempoolTransaction > | Improve this Doc View Source OrganizeBlockAsync(Block) Given a block, organize it (async). Declaration Task<ErrorCode> OrganizeBlockAsync(Block block) Parameters Type Name Description Block block The block to organize Returns Type Description Task < ErrorCode > | Improve this Doc View Source OrganizeTransactionAsync(Transaction) Add new transaction to blockchain. It will be validated, so it might get rejected. Confirmation time might depende on miner fees. Declaration Task<ErrorCode> OrganizeTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction Transaction to add. Returns Type Description Task < ErrorCode > ErrorCode with operation result. See ErrorCode enumeration. | Improve this Doc View Source ValidateTransactionAsync(Transaction) Determine if a transaction is valid for submission to the blockchain. Declaration Task<ApiCallResult<string>> ValidateTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction Transaction to validate Returns Type Description Task < ApiCallResult < String >>"
  },
  "bitprim-cs/Bitprim.GetBlockHeaderByHashTxSizeResult.html": {
    "href": "bitprim-cs/Bitprim.GetBlockHeaderByHashTxSizeResult.html",
    "title": "Class GetBlockHeaderByHashTxSizeResult | Bitprim Documentation Site",
    "keywords": "Class GetBlockHeaderByHashTxSizeResult Return type for FetchBlockHeaderByHashTxSizesAsync Inheritance Object GetBlockHeaderByHashTxSizeResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class GetBlockHeaderByHashTxSizeResult : IDisposable Properties | Improve this Doc View Source Header Block Data Declaration public GetBlockDataResult<IHeader> Header { get; set; } Property Value Type Description GetBlockDataResult < IHeader > | Improve this Doc View Source SerializedBlockSize Serialized block size in bytes Declaration public UInt64 SerializedBlockSize { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source TransactionHashes List of transaction hashes Declaration public INativeList<byte[]> TransactionHashes { get; set; } Property Value Type Description INativeList < Byte []> Methods | Improve this Doc View Source Dispose() Dispose method for resource cleanup Declaration public void Dispose()"
  },
  "bitprim-cs/Bitprim.Executor.html": {
    "href": "bitprim-cs/Bitprim.Executor.html",
    "title": "Class Executor | Bitprim Documentation Site",
    "keywords": "Class Executor Controls the execution of the Bitprim bitcoin node. Before you can work with transactions, blocks and adresses, you need to instantiate an Executor . The executor needs a config file. You need to use the correct config file for the selected coin. You can view an example here NOTE If you pass an empty string, the node will use the default settings. Then you need to start the executor with InitAndRunAsync() Inheritance Object Executor Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Executor : IDisposable Remarks This is the entry point to use the bitprim node Constructors | Improve this Doc View Source Executor(String) Create executor. Does not init database or start execution yet. Declaration public Executor(string configFile) Parameters Type Name Description String configFile Path to configuration file. | Improve this Doc View Source Executor(String, IntPtr, IntPtr) Create executor. Does not init database or start execution yet. Declaration public Executor(string configFile, IntPtr stdOut, IntPtr stdErr) Parameters Type Name Description String configFile Path to configuration file. IntPtr stdOut Handle for redirecting standard output. IntPtr stdErr Handle for redirecting standard output. Properties | Improve this Doc View Source Chain The node's query interface. Will be null until node starts running (i.e. Run or RunWait succeeded) Declaration public Chain Chain { get; } Property Value Type Description Chain | Improve this Doc View Source IsLoadConfigValid Returns true if and only if and only if the config file is valid Declaration public bool IsLoadConfigValid { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStopped Returns true if and only if the node is stopped Declaration public bool IsStopped { get; } Property Value Type Description Boolean | Improve this Doc View Source KeokenManager Declaration public KeokenManager KeokenManager { get; } Property Value Type Description KeokenManager | Improve this Doc View Source NetworkType The node's network. Won't be valid until node starts running (i.e. Run or RunWait succeeded) Declaration public NetworkType NetworkType { get; } Property Value Type Description NetworkType | Improve this Doc View Source UseTestnetRules Returns true iif the current network is a testnet. Declaration public bool UseTestnetRules { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source InitAndRunAsync() Initialize if necessary and starts running the node; blockchain starts synchronizing (downloading). The call returns right away, and the handler is invoked when the node actually starts running. Declaration public Task<int> InitAndRunAsync() Returns Type Description Task < Int32 > Error code (0 = success) | Improve this Doc View Source InitChain() Initialize the local dabatase structure. Declaration public bool InitChain() Returns Type Description Boolean True iif local chain init succeeded | Improve this Doc View Source RunAsync() Starts running the node; blockchain starts synchronizing (downloading). The call returns right away, and the handler is invoked when the node actually starts running. Declaration public Task<int> RunAsync() Returns Type Description Task < Int32 > Error code (0 = success) | Improve this Doc View Source Stop() Stops the node; that includes all activies, such as synchronization and networking. Declaration public void Stop() | Improve this Doc View Source SubscribeToBlockChain(Executor.BlockHandler) Be notified (called back) when the local copy of the blockchain is reorganized. Declaration public void SubscribeToBlockChain(Executor.BlockHandler handler) Parameters Type Name Description Executor.BlockHandler handler Callback which will be called when blocks are added or removed. The callback returns 3 parameters: Height (UInt64): The chain height at which reorganization takes place Incoming (Blocklist): Incoming blocks (added to the blockchain). Outgoing (Blocklist): Outgoing blocks (removed from the blockchain). | Improve this Doc View Source SubscribeToTransaction(Executor.TransactionHandler) Be notified (called back) when the local copy of the blockchain is updated at the transaction level. Declaration public void SubscribeToTransaction(Executor.TransactionHandler handler) Parameters Type Name Description Executor.TransactionHandler handler Callback which will be called when a transaction is added."
  },
  "bitprim-cs/Bitprim.DisposableApiCallResult-1.html": {
    "href": "bitprim-cs/Bitprim.DisposableApiCallResult-1.html",
    "title": "Class DisposableApiCallResult<TResultData> | Bitprim Documentation Site",
    "keywords": "Class DisposableApiCallResult<TResultData> Represents a disposable result of calling an API method. It's necessary to call Dispose when the result is not needed anymore Inheritance Object ApiCallResult <TResultData> DisposableApiCallResult<TResultData> Implements IDisposable Inherited Members ApiCallResult<TResultData>.ErrorCode ApiCallResult<TResultData>.Result Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class DisposableApiCallResult<TResultData> : ApiCallResult<TResultData>, IDisposable where TResultData : IDisposable Type Parameters Name Description TResultData The Result's type Methods | Improve this Doc View Source Dispose() Dispose method for resource cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "bitprim-cs/Bitprim.CompactBlock.html": {
    "href": "bitprim-cs/Bitprim.CompactBlock.html",
    "title": "Class CompactBlock | Bitprim Documentation Site",
    "keywords": "Class CompactBlock BIP 512 representation of a block for reduced propagation bandwidth. Inheritance Object CompactBlock Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class CompactBlock : IDisposable Properties | Improve this Doc View Source IsValid Returns true iif this is a valid compact representation of a block (as per BIP 512). Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Nonce Block nonce (i.e. value which makes hash start with leading zeroes), as a 64-bit unsigned integer. Declaration public UInt64 Nonce { get; } Property Value Type Description UInt64 | Improve this Doc View Source TransactionCount Amount of transactions that belong to the block. Declaration public UInt64 TransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetNthTransaction(UInt64) Get the block's nth transaction, synchronously. Declaration public Transaction GetNthTransaction(UInt64 n) Parameters Type Name Description UInt64 n Zero-based index Returns Type Description Transaction Full transaction object | Improve this Doc View Source GetSerializedSize(UInt32) Get the compact block's serialized size. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating size. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source Reset() TODO: Document Declaration public void Reset()"
  },
  "bitprim-cs/Bitprim.Binary.html": {
    "href": "bitprim-cs/Bitprim.Binary.html",
    "title": "Class Binary | Bitprim Documentation Site",
    "keywords": "Class Binary Represents a binary filter. Inheritance Object Binary Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Binary : IDisposable Constructors | Improve this Doc View Source Binary() Create an empty binary object. Declaration public Binary() | Improve this Doc View Source Binary(String) Creates a binary filter from a binary string. Declaration public Binary(string hexString) Parameters Type Name Description String hexString Binary string. Example: '10111010101011011111000000001101' | Improve this Doc View Source Binary(UInt64, Byte[], UInt64) Creates a binary filter from an int array. Declaration public Binary(UInt64 bitsSize, byte[] blocks, UInt64 n) Parameters Type Name Description UInt64 bitsSize Elements size Byte [] blocks Filter representation. Example: '[186,173,240,13]'. UInt64 n Array length in amount of elements. Properties | Improve this Doc View Source Encoded Filter representation as binary string. Declaration public string Encoded { get; } Property Value Type Description String Methods | Improve this Doc View Source ByteArrayToHexString(Byte[]) Convert byte array to hex tring Declaration public static string ByteArrayToHexString(byte[] ba) Parameters Type Name Description Byte [] ba Byte array Returns Type Description String Hex string representation, with as many characters as bytes | Improve this Doc View Source ByteArrayToHexString(Byte[], Boolean) Convert byte array to hex tring Declaration public static string ByteArrayToHexString(byte[] ba, bool reverse) Parameters Type Name Description Byte [] ba Byte array Boolean reverse If and only if true, invert result order (at the byte level) Returns Type Description String Hex string representation, with as many characters as bytes | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source HexStringToByteArray(String) Convert hex string to byte array Declaration public static byte[] HexStringToByteArray(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Byte [] ASCII byte array | Improve this Doc View Source HexStringToByteArray(String, Boolean) Convert hex string to byte array Declaration public static byte[] HexStringToByteArray(string hex, bool reverse) Parameters Type Name Description String hex Hex string Boolean reverse Reverse the resulting array Returns Type Description Byte [] ASCII byte array"
  },
  "bitprim-cs/SharpCashAddr.Converter.html": {
    "href": "bitprim-cs/SharpCashAddr.Converter.html",
    "title": "Class Converter | Bitprim Documentation Site",
    "keywords": "Class Converter Inheritance Object Converter Namespace : SharpCashAddr Assembly : bitprim-bch.dll Syntax public static class Converter : object Methods | Improve this Doc View Source CashAddrToLegacyAddr(String, out Boolean, out Boolean) Declaration public static string CashAddrToLegacyAddr(string cashAddr, out bool isP2PKH, out bool mainnet) Parameters Type Name Description String cashAddr Boolean isP2PKH Boolean mainnet Returns Type Description String | Improve this Doc View Source LegacyAddrToCashAddr(String, Boolean, out Boolean, out Boolean) Declaration public static string LegacyAddrToCashAddr(string oldAddress, bool includePrefix, out bool isP2PKH, out bool mainnet) Parameters Type Name Description String oldAddress Boolean includePrefix Boolean isP2PKH Boolean mainnet Returns Type Description String"
  },
  "bitprim-cs/SharpCashAddr.CashAddrConversionException.html": {
    "href": "bitprim-cs/SharpCashAddr.CashAddrConversionException.html",
    "title": "Class CashAddrConversionException | Bitprim Documentation Site",
    "keywords": "Class CashAddrConversionException Inheritance Object CashAddrConversionException Namespace : SharpCashAddr Assembly : bitprim-bch.dll Syntax public class CashAddrConversionException : Exception Constructors | Improve this Doc View Source CashAddrConversionException() Declaration public CashAddrConversionException() | Improve this Doc View Source CashAddrConversionException(String) Declaration public CashAddrConversionException(String message) Parameters Type Name Description String message"
  },
  "bitprim-cs/Bitprim.StealthCompactList.html": {
    "href": "bitprim-cs/Bitprim.StealthCompactList.html",
    "title": "Class StealthCompactList | Bitprim Documentation Site",
    "keywords": "Class StealthCompactList Inheritance Object NativeReadableList < IStealthCompact > StealthCompactList Implements INativeList < IStealthCompact > IEnumerable < IStealthCompact > IDisposable Inherited Members NativeReadableList<IStealthCompact>.nativeInstance_ NativeReadableList<IStealthCompact>.GetEnumerator() NativeReadableList<IStealthCompact>.Dispose() NativeReadableList<IStealthCompact>.Dispose(Boolean) NativeReadableList<IStealthCompact>.Item[UInt64] NativeReadableList<IStealthCompact>.Count NativeReadableList<IStealthCompact>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class StealthCompactList : NativeReadableList<IStealthCompact>, INativeList<IStealthCompact>, IEnumerable<IStealthCompact>, IDisposable Methods | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.IStealthCompact>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.IStealthCompact>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override IStealthCompact GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description IStealthCompact Overrides Bitprim.NativeReadableList<Bitprim.IStealthCompact>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.StealthCompact.html": {
    "href": "bitprim-cs/Bitprim.StealthCompact.html",
    "title": "Class StealthCompact | Bitprim Documentation Site",
    "keywords": "Class StealthCompact Stealth payment related data. Inheritance Object StealthCompact Implements IStealthCompact IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class StealthCompact : object, IStealthCompact, IDisposable Properties | Improve this Doc View Source EphemeralPublicKeyHash 33 bytes. Includes the sign byte (0x02). Declaration public byte[] EphemeralPublicKeyHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source PublicKeyHash Public key hash in 32 bytes array format. Declaration public byte[] PublicKeyHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source TransactionHash Transaction hash in 32 byte array format. Declaration public byte[] TransactionHash { get; } Property Value Type Description Byte [] Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements IStealthCompact IDisposable"
  },
  "bitprim-cs/Bitprim.Script.html": {
    "href": "bitprim-cs/Bitprim.Script.html",
    "title": "Class Script | Bitprim Documentation Site",
    "keywords": "Class Script Represents a transaction script. Inheritance Object Script Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Script : IDisposable Properties | Improve this Doc View Source IsValid All script bytes are valid under some circumstance (e.g. coinbase). Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source OperationsAreValid Script validity is independent of individual operation validity. Operations are considered invalid if there is a trailing invalid/default op or if a push op has a size mismatch. Declaration public bool OperationsAreValid { get; } Property Value Type Description Boolean | Improve this Doc View Source SatoshiContentSize Size in bytes. Declaration public UInt64 SatoshiContentSize { get; } Property Value Type Description UInt64 | Improve this Doc View Source Type Script type Declaration public string Type { get; } Property Value Type Description String Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetEmbeddedSigOps(Script) Count the sigops in the embedded script using BIP16 rules. Declaration public UInt64 GetEmbeddedSigOps(Script prevOutScript) Parameters Type Name Description Script prevOutScript Reference to previous output script. Returns Type Description UInt64 Embedded sigops count. | Improve this Doc View Source GetSigOps(Boolean) Amount of signature operations in the script. Declaration public UInt64 GetSigOps(bool embedded) Parameters Type Name Description Boolean embedded Iif true, consider this an embedded script. Returns Type Description UInt64 Sigops count. | Improve this Doc View Source ToData(Boolean) Raw script data Declaration public byte[] ToData(bool prefix) Parameters Type Name Description Boolean prefix Tells whether to include script size in data Returns Type Description Byte [] Byte array with script data | Improve this Doc View Source ToString(UInt32) Translate operations in the script to a string. Declaration public string ToString(UInt32 activeForks) Parameters Type Name Description UInt32 activeForks Tells which rule is active. Returns Type Description String Human readable script."
  },
  "bitprim-cs/Bitprim.PointKind.html": {
    "href": "bitprim-cs/Bitprim.PointKind.html",
    "title": "Enum PointKind | Bitprim Documentation Site",
    "keywords": "Enum PointKind Defines output point kind (Value or Spend) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum PointKind : int Fields Name Description Output Output point Spend Spend output"
  },
  "bitprim-cs/Bitprim.Point.html": {
    "href": "bitprim-cs/Bitprim.Point.html",
    "title": "Class Point | Bitprim Documentation Site",
    "keywords": "Class Point Represents one of the transaction inputs. It's a transaction hash and index pair. Inheritance Object Point Implements IPoint Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Point : object, IPoint Properties | Improve this Doc View Source Checksum This is used with OutputPoint identification within a set of history rows of the same address. Declaration public UInt64 Checksum { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Index Input position in the transaction (zero-based). Declaration public UInt32 Index { get; } Property Value Type Description UInt32 | Improve this Doc View Source IsValid Returns true if and only if this point is not null. Declaration public bool IsValid { get; } Property Value Type Description Boolean Implements IPoint"
  },
  "bitprim-cs/Bitprim.PaymentAddress.html": {
    "href": "bitprim-cs/Bitprim.PaymentAddress.html",
    "title": "Class PaymentAddress | Bitprim Documentation Site",
    "keywords": "Class PaymentAddress Represents a Bitcoin wallet address. Inheritance Object PaymentAddress Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class PaymentAddress : IDisposable Constructors | Improve this Doc View Source PaymentAddress(String) Create an address from its hex string representation. Declaration public PaymentAddress(string hexString) Parameters Type Name Description String hexString Properties | Improve this Doc View Source Encoded Human readable representation. Declaration public string Encoded { get; } Property Value Type Description String | Improve this Doc View Source IsValid Returns true iif this is a valid Base58 address. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Version Address version. Declaration public byte Version { get; } Property Value Type Description Byte Methods | Improve this Doc View Source CashAddressToLegacyAddress(String) (Only for BCH) Utility function for cashaddr-to-legacy conversion. Declaration public static string CashAddressToLegacyAddress(string cashAddr) Parameters Type Name Description String cashAddr Returns Type Description String | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source LegacyAddressToCashAddress(String, Boolean) (Only for BCH) Utility function for legacy-to-cashaddr conversion. Declaration public static string LegacyAddressToCashAddress(string legacyAddr, bool includePrefix) Parameters Type Name Description String legacyAddr Boolean includePrefix If and only if true, include cashaddr prefix (bchtest/bitcoincash) Returns Type Description String | Improve this Doc View Source ToCashAddr(Boolean) (Only for BCH) The native node only handles legacy addresses; this method converts them to the CashAddr format, using bchtest: prefix for testnet and bitcoincash: prefix for mainnet. Declaration public string ToCashAddr(bool includePrefix) Parameters Type Name Description Boolean includePrefix If and only if true, include cashaddr prefix (bchtest/bitcoincash) Returns Type Description String | Improve this Doc View Source TryParsePaymentAddress(String, out PaymentAddress) Try to parse a hex string which represents a payment address. Declaration public static bool TryParsePaymentAddress(string hex, out PaymentAddress address) Parameters Type Name Description String hex For BCH, it can be in cashaddr format, with or without prefix. PaymentAddress address If parsing fails (invalid address), this will be null; otherwise, it will contain a newly created PaymentAdress instance. Returns Type Description Boolean"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedCreateAssetHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedCreateAssetHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedCreateAssetHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedCreateAssetHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate void KeokenStateDelegatedCreateAssetHandler(IntPtr state, string asset_name, Int64 asset_amount, IntPtr owner, UInt64 block_height, hash_t txid); Parameters Type Name Description IntPtr state String asset_name Int64 asset_amount IntPtr owner UInt64 block_height hash_t txid"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedAssetIdExistsHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedAssetIdExistsHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedAssetIdExistsHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedAssetIdExistsHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate int KeokenStateDelegatedAssetIdExistsHandler(IntPtr state, UInt32 asset_id); Parameters Type Name Description IntPtr state UInt32 asset_id Returns Type Description Int32"
  },
  "bitprim-cs/Bitprim.MempoolTransactionList.html": {
    "href": "bitprim-cs/Bitprim.MempoolTransactionList.html",
    "title": "Class MempoolTransactionList | Bitprim Documentation Site",
    "keywords": "Class MempoolTransactionList Represents a list of MempoolTransaction Inheritance Object NativeReadableList < IMempoolTransaction > NativeReadableWritableList < IMempoolTransaction > MempoolTransactionList Implements INativeList < IMempoolTransaction > IEnumerable < IMempoolTransaction > IDisposable Inherited Members NativeReadableWritableList<IMempoolTransaction>.Add(IMempoolTransaction) NativeReadableList<IMempoolTransaction>.nativeInstance_ NativeReadableList<IMempoolTransaction>.GetEnumerator() NativeReadableList<IMempoolTransaction>.Dispose() NativeReadableList<IMempoolTransaction>.Dispose(Boolean) NativeReadableList<IMempoolTransaction>.Item[UInt64] NativeReadableList<IMempoolTransaction>.Count NativeReadableList<IMempoolTransaction>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MempoolTransactionList : NativeReadableWritableList<IMempoolTransaction>, INativeList<IMempoolTransaction>, IEnumerable<IMempoolTransaction>, IDisposable Methods | Improve this Doc View Source AddElement(IMempoolTransaction) Declaration protected override void AddElement(IMempoolTransaction element) Parameters Type Name Description IMempoolTransaction element Overrides Bitprim.NativeReadableWritableList<Bitprim.IMempoolTransaction>.AddElement(Bitprim.IMempoolTransaction) | Improve this Doc View Source CreateNativeList() Declaration protected override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeReadableWritableList<Bitprim.IMempoolTransaction>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.IMempoolTransaction>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.IMempoolTransaction>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override IMempoolTransaction GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description IMempoolTransaction Overrides Bitprim.NativeReadableList<Bitprim.IMempoolTransaction>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.MempoolTransaction.html": {
    "href": "bitprim-cs/Bitprim.MempoolTransaction.html",
    "title": "Class MempoolTransaction | Bitprim Documentation Site",
    "keywords": "Class MempoolTransaction Represents an unconfirmed transaction. Inheritance Object MempoolTransaction Implements IMempoolTransaction Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MempoolTransaction : object, IMempoolTransaction Properties | Improve this Doc View Source Address Transaction output address Declaration public string Address { get; } Property Value Type Description String | Improve this Doc View Source Hash Transaction hash (unique identifier) Declaration public string Hash { get; } Property Value Type Description String | Improve this Doc View Source Index Transaction index Declaration public UInt64 Index { get; } Property Value Type Description UInt64 | Improve this Doc View Source PreviousOutputHash Previous output transaction hash Declaration public string PreviousOutputHash { get; } Property Value Type Description String | Improve this Doc View Source PreviousOutputIndex Previous output transaction index Declaration public string PreviousOutputIndex { get; } Property Value Type Description String | Improve this Doc View Source Satoshis Sum of output values in Satoshis Declaration public string Satoshis { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Transaction timestamp Declaration public UInt64 Timestamp { get; } Property Value Type Description UInt64 Implements IMempoolTransaction"
  },
  "bitprim-cs/Bitprim.ManagedReadableList-1.html": {
    "href": "bitprim-cs/Bitprim.ManagedReadableList-1.html",
    "title": "Class ManagedReadableList<T> | Bitprim Documentation Site",
    "keywords": "Class ManagedReadableList<T> Inheritance Object ManagedReadableList<T> Implements INativeList <T> IEnumerable <T> IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class ManagedReadableList<T> : object, INativeList<T>, IEnumerable<T>, IDisposable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public ulong Count { get; } Property Value Type Description UInt64 | Improve this Doc View Source Item[UInt64] Declaration public T this[ulong index] { get; } Parameters Type Name Description UInt64 index Property Value Type Description T | Improve this Doc View Source NativeInstance Declaration public IntPtr NativeInstance { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.html": {
    "href": "bitprim-cs/Bitprim.Keoken.html",
    "title": "Namespace Bitprim.Keoken | Bitprim Documentation Site",
    "keywords": "Namespace Bitprim.Keoken Classes DelegatedState GetAllAssetsAddressesData TODO: Add docs GetAllAssetsAddressesDataList GetAssetsByAddressData TODO: Add docs GetAssetsByAddressDataList GetAssetsData TODO: Add docs GetAssetsDataList KeokenManager TODO: Add docs KeokenMemoryState Interfaces IGetAllAssetsAddressesData IGetAssetsByAddressData IGetAssetsData IKeokenState"
  },
  "bitprim-cs/Bitprim.Keoken.IKeokenState.html": {
    "href": "bitprim-cs/Bitprim.Keoken.IKeokenState.html",
    "title": "Interface IKeokenState | Bitprim Documentation Site",
    "keywords": "Interface IKeokenState Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public interface IKeokenState : IDisposable Properties | Improve this Doc View Source InitialAssetId Declaration UInt32 InitialAssetId { set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source CreateAsset(String, Int64, PaymentAddress, UInt64, Byte[]) Declaration void CreateAsset(string assetName, Int64 assetAmount, PaymentAddress owner, UInt64 blockHeight, byte[] txId) Parameters Type Name Description String assetName Int64 assetAmount PaymentAddress owner UInt64 blockHeight Byte [] txId | Improve this Doc View Source CreateBalanceEntry(UInt32, Int64, PaymentAddress, PaymentAddress, UInt64, Byte[]) Declaration void CreateBalanceEntry(UInt32 assetId, Int64 assetAmount, PaymentAddress source, PaymentAddress target, UInt64 blockHeight, byte[] txId) Parameters Type Name Description UInt32 assetId Int64 assetAmount PaymentAddress source PaymentAddress target UInt64 blockHeight Byte [] txId | Improve this Doc View Source GetAllAssetAddresses() Declaration INativeList<IGetAllAssetsAddressesData> GetAllAssetAddresses() Returns Type Description INativeList < IGetAllAssetsAddressesData > | Improve this Doc View Source GetAssets() Declaration INativeList<IGetAssetsData> GetAssets() Returns Type Description INativeList < IGetAssetsData > | Improve this Doc View Source GetAssetsByAddress(PaymentAddress) Declaration INativeList<IGetAssetsByAddressData> GetAssetsByAddress(PaymentAddress addr) Parameters Type Name Description PaymentAddress addr Returns Type Description INativeList < IGetAssetsByAddressData > | Improve this Doc View Source GetBalance(UInt32, PaymentAddress) Declaration Int64 GetBalance(UInt32 id, PaymentAddress addr) Parameters Type Name Description UInt32 id PaymentAddress addr Returns Type Description Int64 | Improve this Doc View Source StateAssetIdExists(UInt32) Declaration bool StateAssetIdExists(UInt32 id) Parameters Type Name Description UInt32 id Returns Type Description Boolean"
  },
  "bitprim-cs/Bitprim.Keoken.IGetAssetsData.html": {
    "href": "bitprim-cs/Bitprim.Keoken.IGetAssetsData.html",
    "title": "Interface IGetAssetsData | Bitprim Documentation Site",
    "keywords": "Interface IGetAssetsData Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public interface IGetAssetsData : IDisposable Properties | Improve this Doc View Source Amount Declaration Int64 Amount { get; } Property Value Type Description Int64 | Improve this Doc View Source AssetCreator Declaration PaymentAddress AssetCreator { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetId Declaration UInt32 AssetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source AssetName Declaration string AssetName { get; } Property Value Type Description String"
  },
  "bitprim-cs/Bitprim.Keoken.GetAssetsDataList.html": {
    "href": "bitprim-cs/Bitprim.Keoken.GetAssetsDataList.html",
    "title": "Class GetAssetsDataList | Bitprim Documentation Site",
    "keywords": "Class GetAssetsDataList Inheritance Object NativeReadableList < GetAssetsData > GetAssetsDataList Implements INativeList < GetAssetsData > IEnumerable < GetAssetsData > IDisposable Inherited Members NativeReadableList<GetAssetsData>.nativeInstance_ NativeReadableList<GetAssetsData>.GetEnumerator() NativeReadableList<GetAssetsData>.Dispose() NativeReadableList<GetAssetsData>.Dispose(Boolean) NativeReadableList<GetAssetsData>.Item[UInt64] NativeReadableList<GetAssetsData>.Count NativeReadableList<GetAssetsData>.NativeInstance Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class GetAssetsDataList : NativeReadableList<GetAssetsData>, INativeList<GetAssetsData>, IEnumerable<GetAssetsData>, IDisposable Methods | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAssetsData>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAssetsData>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override GetAssetsData GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description GetAssetsData Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAssetsData>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.GetAssetsData.html": {
    "href": "bitprim-cs/Bitprim.Keoken.GetAssetsData.html",
    "title": "Class GetAssetsData | Bitprim Documentation Site",
    "keywords": "Class GetAssetsData TODO: Add docs Inheritance Object GetAssetsData Implements IGetAssetsData IDisposable Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class GetAssetsData : object, IGetAssetsData, IDisposable Constructors | Improve this Doc View Source GetAssetsData(IntPtr) Declaration public GetAssetsData(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Properties | Improve this Doc View Source Amount Declaration public Int64 Amount { get; } Property Value Type Description Int64 | Improve this Doc View Source AssetCreator Declaration public PaymentAddress AssetCreator { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetId Declaration public UInt32 AssetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source AssetName Declaration public string AssetName { get; } Property Value Type Description String Methods | Improve this Doc View Source Dispose() Release resources Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements IGetAssetsData IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.GetAllAssetsAddressesDataList.html": {
    "href": "bitprim-cs/Bitprim.Keoken.GetAllAssetsAddressesDataList.html",
    "title": "Class GetAllAssetsAddressesDataList | Bitprim Documentation Site",
    "keywords": "Class GetAllAssetsAddressesDataList Inheritance Object NativeReadableList < GetAllAssetsAddressesData > GetAllAssetsAddressesDataList Implements INativeList < GetAllAssetsAddressesData > IEnumerable < GetAllAssetsAddressesData > IDisposable Inherited Members NativeReadableList<GetAllAssetsAddressesData>.nativeInstance_ NativeReadableList<GetAllAssetsAddressesData>.GetEnumerator() NativeReadableList<GetAllAssetsAddressesData>.Dispose() NativeReadableList<GetAllAssetsAddressesData>.Dispose(Boolean) NativeReadableList<GetAllAssetsAddressesData>.Item[UInt64] NativeReadableList<GetAllAssetsAddressesData>.Count NativeReadableList<GetAllAssetsAddressesData>.NativeInstance Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class GetAllAssetsAddressesDataList : NativeReadableList<GetAllAssetsAddressesData>, INativeList<GetAllAssetsAddressesData>, IEnumerable<GetAllAssetsAddressesData>, IDisposable Methods | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAllAssetsAddressesData>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAllAssetsAddressesData>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override GetAllAssetsAddressesData GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description GetAllAssetsAddressesData Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAllAssetsAddressesData>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.GetAllAssetsAddressesData.html": {
    "href": "bitprim-cs/Bitprim.Keoken.GetAllAssetsAddressesData.html",
    "title": "Class GetAllAssetsAddressesData | Bitprim Documentation Site",
    "keywords": "Class GetAllAssetsAddressesData TODO: Add docs Inheritance Object GetAllAssetsAddressesData Implements IGetAllAssetsAddressesData IDisposable Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class GetAllAssetsAddressesData : object, IGetAllAssetsAddressesData, IDisposable Constructors | Improve this Doc View Source GetAllAssetsAddressesData(IntPtr) Declaration public GetAllAssetsAddressesData(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Properties | Improve this Doc View Source Amount Declaration public Int64 Amount { get; } Property Value Type Description Int64 | Improve this Doc View Source AmountOwner Declaration public PaymentAddress AmountOwner { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetCreator Declaration public PaymentAddress AssetCreator { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetId Declaration public UInt32 AssetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source AssetName Declaration public string AssetName { get; } Property Value Type Description String Methods | Improve this Doc View Source Dispose() Release resources Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements IGetAllAssetsAddressesData IDisposable"
  },
  "bitprim-cs/Bitprim.IStealthCompact.html": {
    "href": "bitprim-cs/Bitprim.IStealthCompact.html",
    "title": "Interface IStealthCompact | Bitprim Documentation Site",
    "keywords": "Interface IStealthCompact Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IStealthCompact : IDisposable Properties | Improve this Doc View Source EphemeralPublicKeyHash 33 bytes. Includes the sign byte (0x02). Declaration byte[] EphemeralPublicKeyHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source PublicKeyHash Public key hash in 32 bytes array format. Declaration byte[] PublicKeyHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source TransactionHash Transaction hash in 32 byte array format. Declaration byte[] TransactionHash { get; } Property Value Type Description Byte []"
  },
  "bitprim-cs/Bitprim.IPoint.html": {
    "href": "bitprim-cs/Bitprim.IPoint.html",
    "title": "Interface IPoint | Bitprim Documentation Site",
    "keywords": "Interface IPoint Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IPoint Properties | Improve this Doc View Source Checksum This is used with OutputPoint identification within a set of history rows of the same address. Declaration UInt64 Checksum { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Index Input position in the transaction (zero-based). Declaration UInt32 Index { get; } Property Value Type Description UInt32 | Improve this Doc View Source IsValid Returns true if and only if this point is not null. Declaration bool IsValid { get; } Property Value Type Description Boolean"
  },
  "bitprim-cs/Bitprim.INativeList-1.html": {
    "href": "bitprim-cs/Bitprim.INativeList-1.html",
    "title": "Interface INativeList<T> | Bitprim Documentation Site",
    "keywords": "Interface INativeList<T> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface INativeList<out T> : IEnumerable<T>, IDisposable Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration UInt64 Count { get; } Property Value Type Description UInt64 | Improve this Doc View Source Item[UInt64] Declaration T this[UInt64 index] { get; } Parameters Type Name Description UInt64 index Property Value Type Description T | Improve this Doc View Source NativeInstance Declaration IntPtr NativeInstance { get; } Property Value Type Description IntPtr"
  },
  "bitprim-cs/Bitprim.IMerkleBlock.html": {
    "href": "bitprim-cs/Bitprim.IMerkleBlock.html",
    "title": "Interface IMerkleBlock | Bitprim Documentation Site",
    "keywords": "Interface IMerkleBlock Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IMerkleBlock : IDisposable Properties | Improve this Doc View Source HashCount Transaction hashes list element count. Declaration UInt64 HashCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source Header The block's header. Declaration IHeader Header { get; } Property Value Type Description IHeader | Improve this Doc View Source IsValid Returns true if and only if it the block contains txs hashes, and the header is valid. Declaration bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source TotalTransactionCount Amount of transactions inside the block. Declaration UInt64 TotalTransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source GetNthHash(Int32) Get the Nth transaction hash from the block. Declaration byte[] GetNthHash(int n) Parameters Type Name Description Int32 n Zerp-based index. Returns Type Description Byte [] Transaction hash in 32 byte array format. | Improve this Doc View Source GetSerializedSize(UInt32) Block size in bytes (as a Merkle block, not as a full block). Declaration UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating size. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source Reset() Delete all the data inside the block. Declaration void Reset()"
  },
  "bitprim-cs/Bitprim.IMempoolTransaction.html": {
    "href": "bitprim-cs/Bitprim.IMempoolTransaction.html",
    "title": "Interface IMempoolTransaction | Bitprim Documentation Site",
    "keywords": "Interface IMempoolTransaction Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IMempoolTransaction Properties | Improve this Doc View Source Address Transaction output address Declaration string Address { get; } Property Value Type Description String | Improve this Doc View Source Hash Transaction hash (unique identifier) Declaration string Hash { get; } Property Value Type Description String | Improve this Doc View Source Index Transaction index Declaration UInt64 Index { get; } Property Value Type Description UInt64 | Improve this Doc View Source PreviousOutputHash Previous output transaction hash Declaration string PreviousOutputHash { get; } Property Value Type Description String | Improve this Doc View Source PreviousOutputIndex Previous output transaction index Declaration string PreviousOutputIndex { get; } Property Value Type Description String | Improve this Doc View Source Satoshis Sum of output values in Satoshis Declaration string Satoshis { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Transaction timestamp Declaration UInt64 Timestamp { get; } Property Value Type Description UInt64"
  },
  "bitprim-cs/Bitprim.IHistoryCompact.html": {
    "href": "bitprim-cs/Bitprim.IHistoryCompact.html",
    "title": "Interface IHistoryCompact | Bitprim Documentation Site",
    "keywords": "Interface IHistoryCompact Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IHistoryCompact : IDisposable Properties | Improve this Doc View Source Height Height of the block containing the Point. Declaration UInt32 Height { get; } Property Value Type Description UInt32 | Improve this Doc View Source Point The point that identifies the History instance. Declaration IPoint Point { get; } Property Value Type Description IPoint | Improve this Doc View Source PointKind Used for distinguishing between values and spends. Declaration PointKind PointKind { get; } Property Value Type Description PointKind | Improve this Doc View Source ValueOrChecksum Varies depending on point_kind. Declaration UInt64 ValueOrChecksum { get; } Property Value Type Description UInt64"
  },
  "bitprim-cs/Bitprim.IBlock.html": {
    "href": "bitprim-cs/Bitprim.IBlock.html",
    "title": "Interface IBlock | Bitprim Documentation Site",
    "keywords": "Interface IBlock Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public interface IBlock : IDisposable Properties | Improve this Doc View Source Claim Sum of coinbase outputs. Declaration UInt64 Claim { get; } Property Value Type Description UInt64 | Improve this Doc View Source Fees Miner fees included in the block's coinbase transaction. Declaration UInt64 Fees { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash The block's hash as a 32 byte array. Declaration byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Header The block's header. Declaration IHeader Header { get; } Property Value Type Description IHeader | Improve this Doc View Source IsDistinctTransactionSet Returns true if and only if all transactions in the block have a unique hash (i.e. no duplicates) Declaration bool IsDistinctTransactionSet { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExtraCoinbase Returns true if and only if there is more than one coinbase transaction in the block. Declaration bool IsExtraCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInternalDoubleSpend Returns true if and only if there is at least one double-spent transaction in this block Declaration bool IsInternalDoubleSpend { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns true if and only if the block is valid Declaration bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValidMerkleRoot Returns true if and only if the generated Merkle root equals the header's Merkle root. Declaration bool IsValidMerkleRoot { get; } Property Value Type Description Boolean | Improve this Doc View Source MerkleRoot The block's Merkle root, as a 32 byte array. Declaration byte[] MerkleRoot { get; } Property Value Type Description Byte [] | Improve this Doc View Source Proof Amount of work done to mine the block Declaration string Proof { get; } Property Value Type Description String | Improve this Doc View Source SignatureOperationsCount Amount of signature operations in the block. Declaration UInt64 SignatureOperationsCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source TransactionCount The total amount of transactions that the block contains. Declaration UInt64 TransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source GetBlockReward(UInt64) Reward = Subsidy + Fees, for the block at the given height. Declaration UInt64 GetBlockReward(UInt64 height) Parameters Type Name Description UInt64 height Block height in the chain; identifies it univocally. Returns Type Description UInt64 UInt64 representation of the block's reward. | Improve this Doc View Source GetNthTransaction(UInt64) Given a position in the block, returns the corresponding transaction. Declaration ITransaction GetNthTransaction(UInt64 n) Parameters Type Name Description UInt64 n Zero-based index Returns Type Description ITransaction Full transaction object | Improve this Doc View Source GetSerializedSize(UInt32) Block size in bytes. Declaration UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version. Returns Type Description UInt64 UInt64 representation of the block size in bytes. | Improve this Doc View Source GetSignatureOperationsCount(Boolean) Amount of signature operations in the block. Declaration UInt64 GetSignatureOperationsCount(bool bip16Active) Parameters Type Name Description Boolean bip16Active If and only if true, count bip16 active operations. Returns Type Description UInt64 The amount of signature operations in this block | Improve this Doc View Source GetTotalInputs(Boolean) The sum of all inputs of all transactions in the block. Declaration UInt64 GetTotalInputs(bool withCoinbase) Parameters Type Name Description Boolean withCoinbase If and only if true, consider coinbase transactions. Returns Type Description UInt64 UInt64 representation of the sum | Improve this Doc View Source IsFinal(UInt64) Returns true if and only if every transaction in the block is final or not. Declaration bool IsFinal(UInt64 height) Parameters Type Name Description UInt64 height Returns Type Description Boolean | Improve this Doc View Source IsValidCoinbaseClaim(UInt64) Given a block height, return true if and only if its coinbase claim is not higher than the deserved reward. Declaration bool IsValidCoinbaseClaim(UInt64 height) Parameters Type Name Description UInt64 height The height which identifies the block to examine Returns Type Description Boolean True if and only if 1 if coinbase claim is not higher than the deserved reward. | Improve this Doc View Source IsValidCoinbaseScript(UInt64) Returns true if and only if the block's coinbase script is valid. Declaration bool IsValidCoinbaseScript(UInt64 height) Parameters Type Name Description UInt64 height The block's height. Identifies it univocally. Returns Type Description Boolean True if and only if the block's coinbase script is valid. | Improve this Doc View Source ToData(Boolean) Raw block data. Declaration byte[] ToData(bool wire) Parameters Type Name Description Boolean wire if and only if true, include data size at the beginning. Returns Type Description Byte [] Byte array with block data."
  },
  "bitprim-cs/Bitprim.HistoryCompactList.html": {
    "href": "bitprim-cs/Bitprim.HistoryCompactList.html",
    "title": "Class HistoryCompactList | Bitprim Documentation Site",
    "keywords": "Class HistoryCompactList List of output points, values, and spends for a given payment address Inheritance Object NativeReadableList < IHistoryCompact > HistoryCompactList Implements INativeList < IHistoryCompact > IEnumerable < IHistoryCompact > IDisposable Inherited Members NativeReadableList<IHistoryCompact>.nativeInstance_ NativeReadableList<IHistoryCompact>.GetEnumerator() NativeReadableList<IHistoryCompact>.Dispose() NativeReadableList<IHistoryCompact>.Dispose(Boolean) NativeReadableList<IHistoryCompact>.Item[UInt64] NativeReadableList<IHistoryCompact>.Count NativeReadableList<IHistoryCompact>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HistoryCompactList : NativeReadableList<IHistoryCompact>, INativeList<IHistoryCompact>, IEnumerable<IHistoryCompact>, IDisposable Methods | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.IHistoryCompact>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.IHistoryCompact>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override IHistoryCompact GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description IHistoryCompact Overrides Bitprim.NativeReadableList<Bitprim.IHistoryCompact>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.TransactionList.html": {
    "href": "bitprim-cs/Bitprim.TransactionList.html",
    "title": "Class TransactionList | Bitprim Documentation Site",
    "keywords": "Class TransactionList Represents a list of Transactions Inheritance Object NativeReadableList < Transaction > NativeReadableWritableList < Transaction > TransactionList Implements INativeList < Transaction > IEnumerable < Transaction > IDisposable Inherited Members NativeReadableWritableList<Transaction>.Add(Transaction) NativeReadableList<Transaction>.nativeInstance_ NativeReadableList<Transaction>.GetEnumerator() NativeReadableList<Transaction>.Dispose() NativeReadableList<Transaction>.Dispose(Boolean) NativeReadableList<Transaction>.Item[UInt64] NativeReadableList<Transaction>.Count NativeReadableList<Transaction>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class TransactionList : NativeReadableWritableList<Transaction>, INativeList<Transaction>, IEnumerable<Transaction>, IDisposable Methods | Improve this Doc View Source AddElement(Transaction) Declaration protected override void AddElement(Transaction element) Parameters Type Name Description Transaction element Overrides Bitprim.NativeReadableWritableList<Bitprim.Transaction>.AddElement(Bitprim.Transaction) | Improve this Doc View Source CreateNativeList() Declaration protected override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeReadableWritableList<Bitprim.Transaction>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.Transaction>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.Transaction>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override Transaction GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description Transaction Overrides Bitprim.NativeReadableList<Bitprim.Transaction>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Transaction.html": {
    "href": "bitprim-cs/Bitprim.Transaction.html",
    "title": "Class Transaction | Bitprim Documentation Site",
    "keywords": "Class Transaction Represents a Bitcoin transaction. Inheritance Object Transaction Implements ITransaction IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Transaction : object, ITransaction, IDisposable Constructors | Improve this Doc View Source Transaction() Create an empty tramsaction. Declaration public Transaction() | Improve this Doc View Source Transaction(UInt32, String) Create a transaction from its binary hex representation. Declaration public Transaction(UInt32 version, string hexString) Parameters Type Name Description UInt32 version Transaction protocol version. String hexString Raw transaction in hex | Improve this Doc View Source Transaction(UInt32, UInt32, InputList, OutputList) Create a transaction from its version, locktime, inputs and outputs (all its data). Declaration public Transaction(UInt32 version, UInt32 locktime, InputList inputs, OutputList outputs) Parameters Type Name Description UInt32 version Transaction protocol version. UInt32 locktime Transaction locktime. InputList inputs A list with all the transaction inputs. OutputList outputs A list with all the transaction outputs. Properties | Improve this Doc View Source Fees Fees to pay to the winning miner. Declaration public UInt64 Fees { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Inputs A list with all the transaction inputs. Declaration public InputList Inputs { get; } Property Value Type Description InputList | Improve this Doc View Source IsCoinbase Returns true if and only if this is a coinbase transaction (i.e. generates new coins). Declaration public bool IsCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocktimeConflict Returns true if and only if the transaction is locked and every input is final, false otherwise. Declaration public bool IsLocktimeConflict { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMissingPreviousOutputs Returns true if and only if at least one of the previous outputs is invalid, false otherwise. Declaration public bool IsMissingPreviousOutputs { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNullNonCoinbase Return true if and only if the transaction is not coinbase and has a null previous output, false otherwise. Declaration public bool IsNullNonCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOversizeCoinbase Returns true if the transaction is coinbase and has an invalid script size on its first input. Declaration public bool IsOversizeCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverspent Returns true if transaction is not a coinbase, and the sum of its outputs is higher than the sum of its inputs, false otherwise. Declaration public bool IsOverspent { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns true if and only if this transaction is valid according to the protocol. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Locktime Transaction locktime. Declaration public UInt32 Locktime { get; } Property Value Type Description UInt32 | Improve this Doc View Source Outputs A list with all the transaction outputs. Declaration public OutputList Outputs { get; } Property Value Type Description OutputList | Improve this Doc View Source SignatureOperations Amount of signature operations in the transaction. Declaration public UInt64 SignatureOperations { get; } Property Value Type Description UInt64 | Improve this Doc View Source TotalInputValue Sum of every input value in the transaction. Declaration public UInt64 TotalInputValue { get; } Property Value Type Description UInt64 | Improve this Doc View Source TotalOutputValue Sum of every output value in the transaction. Declaration public UInt64 TotalOutputValue { get; } Property Value Type Description UInt64 | Improve this Doc View Source Version Transaction protocol version. Declaration public UInt32 Version { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetHashBySigHashType(UInt32) 32 bytes transaction hash + 4 bytes signature hash type Declaration public byte[] GetHashBySigHashType(UInt32 sigHashType) Parameters Type Name Description UInt32 sigHashType Sighash type. Returns Type Description Byte [] Hash and sighash type. | Improve this Doc View Source GetSerializedSize(Boolean) Transaction size in bytes. Declaration public UInt64 GetSerializedSize(bool wire = true) Parameters Type Name Description Boolean wire If and only if true, size will include size of 'uint32' for storing spender output height Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source GetSignatureOperationsBip16Active(Boolean) Amount of signature operations in the transactions. Declaration public UInt64 GetSignatureOperationsBip16Active(bool bip16Active) Parameters Type Name Description Boolean bip16Active True if and only if BIP16 is active, false otherwise. Returns Type Description UInt64 | Improve this Doc View Source IsDoubleSpend(Boolean) Returns true if at least one of the previous outputs was already spent, false otherwise. Declaration public bool IsDoubleSpend(bool includeUnconfirmed) Parameters Type Name Description Boolean includeUnconfirmed Iif true, consider unconfirmed transactions. Returns Type Description Boolean True if and only if transaction is double spend. | Improve this Doc View Source IsFinal(UInt64, UInt32) Returns true if and only if the transaction is final, false otherwise. Declaration public bool IsFinal(UInt64 blockHeight, UInt32 blockTime) Parameters Type Name Description UInt64 blockHeight UInt32 blockTime Returns Type Description Boolean | Improve this Doc View Source IsImmature(UInt64) Returns true if and only if at least one of the inputs is not mature, false otherwise. Declaration public bool IsImmature(UInt64 targetHeight) Parameters Type Name Description UInt64 targetHeight Returns Type Description Boolean | Improve this Doc View Source ToData(Boolean) Raw transaction data. Declaration public byte[] ToData(bool wire) Parameters Type Name Description Boolean wire Iif true, include data size at the beginning. Returns Type Description Byte [] Byte array with transaction data. Implements ITransaction IDisposable"
  },
  "bitprim-cs/Bitprim.Output.html": {
    "href": "bitprim-cs/Bitprim.Output.html",
    "title": "Class Output | Bitprim Documentation Site",
    "keywords": "Class Output Represents one of the outputs of a Transaction. Inheritance Object Output Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Output : IDisposable Constructors | Improve this Doc View Source Output() Create an empty output. Declaration public Output() | Improve this Doc View Source Output(UInt64, Script) Create an output from a value and a script. Declaration public Output(UInt64 value, Script script) Parameters Type Name Description UInt64 value In Satoshis. Script script Output script. Properties | Improve this Doc View Source IsValid Returns false if and only if output is not found. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Script Output script. Declaration public Script Script { get; } Property Value Type Description Script | Improve this Doc View Source SignatureOperationCount The amount of signature operations in the output script. Declaration public UInt64 SignatureOperationCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source Value Spend, in Satoshis. Declaration public UInt64 Value { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetSerializedSize(Boolean) Output size in bytes. Declaration public UInt64 GetSerializedSize(bool wire) Parameters Type Name Description Boolean wire If true, size will include size of 'uint32' for storing spender height. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source PaymentAddress(Boolean) Declaration public PaymentAddress PaymentAddress(bool useTestnetRules) Parameters Type Name Description Boolean useTestnetRules Returns Type Description PaymentAddress"
  },
  "bitprim-cs/Bitprim.NodeSettings.html": {
    "href": "bitprim-cs/Bitprim.NodeSettings.html",
    "title": "Class NodeSettings | Bitprim Documentation Site",
    "keywords": "Class NodeSettings Holds node settings Inheritance Object NodeSettings Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class NodeSettings : object Properties | Improve this Doc View Source CurrencyType Returns the node's currency Declaration public static CurrencyType CurrencyType { get; } Property Value Type Description CurrencyType"
  },
  "restapi/bitprim-api.html": {
    "href": "restapi/bitprim-api.html",
    "title": "bitprim | Bitprim Documentation Site",
    "keywords": "bitprim Address | Improve this Doc View Source GetUnconfirmedBalance Given an address, get unconfirmed balance in coin units. Request GET /api/addr/{paymentAddress}/unconfirmedBalance Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetAddressBalance Given an address, get current confirmed balance in coin units. Request GET /api/addr/{paymentAddress}/balance Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetAddressHistory Given an address, get current confirmed and unconfirmed balance, and optionally, a list of all transaction ids involved in the address. Request GET /api/addr/{paymentAddress}[?noTxList&from&to&returnLegacyAddresses] Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. noTxList integer If 0, include transaction id list; otherwise, do not include it. from integer Allows selecting a subrange of transaction ids from the full list; starts in zero (0). to integer Allows selecting a subrange of transactions from the full list; max value is (txCount - 1). returnLegacyAddresses boolean If and only if true, use legacy address format in response (BCH only). Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTotalReceived Given an address, get total received amount in coin units. Request GET /api/addr/{paymentAddress}/totalReceived Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetTotalSent Given an address, get total sent amount in coin units. Request GET /api/addr/{paymentAddress}/totalSent Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, it can be in cashaddr format. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetUtxoForMultipleAddresses Given a list of addresses, get their combined unspent outputs. Request GET /api/addrs/{paymentAddresses}/utxo[?returnLegacyAddresses] Parameters Name Type Value Notes *paymentAddresses string Comma separated list of addresses. For BCH, cashaddr format is accepted. returnLegacyAddresses boolean If and only if true, return addresses in legacy format. By default, use cashaddr. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetUtxoForMultipleAddressesPost Given a list of addresses, get their combined unspent outputs. Request POST /api/addrs/utxo Parameters Name Type Value Notes requestParams In params.addrs, a comma separated list of addresses. For BCH, cashaddr format is accepted. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetUtxoForSingleAddress Given an address, get all of its currently unspent outputs. Request GET /api/addr/{paymentAddress}/utxo[?legacyAddresFormat] Parameters Name Type Value Notes *paymentAddress string The address of interest. For BCH, cashaddr format is accepted. legacyAddresFormat boolean If and only if true, use legacy address format in returned object. By default, cash addr is used. Responses Status Code Description Samples 200 Success Block | Improve this Doc View Source GetBlockByHash Given a block hash, retrieve its univocally associated block. Request GET /api/block/{hash}[?noTxList] Parameters Name Type Value Notes *hash string 64-character (32 bytes) hex string. noTxList integer If 0, include transaction id list; otherwise, do not include it. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetBlockByHeight Given a block height, retrieve the block hash. Request GET /api/block-index/{height} Parameters Name Type Value Notes *height integer Block height. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetBlocksByDate Given a date, return all blocks mined on that day. Request GET /api/blocks[?limit&blockDate] Parameters Name Type Value Notes limit integer Max amount of blocks in result (older ones discarded). blockDate string Date to search, in the format specified in the settings. Defaults to yyyy-MM-dd (dashes required). Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetRawBlockByHash Given a block hash, return the block's representation as a hex string. Request GET /api/rawblock/{hash} Parameters Name Type Value Notes *hash string 64-character (32 bytes) hex string which univocally identifies the block in the blockchain. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetRawBlockByHeight Given a block height, return the block's representation as a hex string. Request GET /api/rawblock-index/{height} Parameters Name Type Value Notes *height integer Height which univocally identifies the block in the blockchain. Responses Status Code Description Samples 200 Success Chain | Improve this Doc View Source GetEstimateFee Get an estimate value for current block fee. Request GET /api/utils/estimatefee[?nbBlocks] Parameters Name Type Value Notes nbBlocks string Comma-separed list of block numbers to use for each estimation; a higher number implies higher precision, but will take longer to calculate. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetBestBlockHash Get best block hash. Request GET /api/status/bestblockhash Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetCurrency Get current coin price in US dollars. Request GET /api/currency Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetDifficulty Get latest block difficulty. Request GET /api/status/difficulty Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetHealthCheck Check if the underlying bitprim node is running correctly. Request GET /api/healthcheck[?minimumSync] Parameters Name Type Value Notes minimumSync number Minimum required sync percentage (from 0 to 100) to consider node healthy. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetInfo Get underlying node information. Request GET /api/status/info Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetLastBlockHash Get latest block hash. Request GET /api/status/lastblockhash Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetStatus Get various node status information. (getInfo: see GetInfo method | getDifficulty: see GetDifficulty method | getBestBlockHash: see GetBestBlockHash method | getLastBlockHash: see GetLastBlockHash method) Request GET /api/status[?q] Parameters Name Type Value Notes q string (getInfo | getDifficulty | getBestBlockHash | getLastBlockHash). Default: getInfo. Use the name 'q' for this query parameter (it will be mapped to the 'method' parameter). Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetSyncStatus Get node synchronization status, as in how up to date it is with the blockchain. Request GET /api/sync Responses Status Code Description Samples 200 Success Message | Improve this Doc View Source VerifyMessage Validate message. Request GET /api/messages/verify[?address&signature&message] Parameters Name Type Value Notes address string Destination address. For BCH, cashaddr format is accepted. signature string To identify message sender, created using his private key. message string Message to verify. Responses Status Code Description Samples 200 Success | Improve this Doc View Source VerifyMessagePost Validate message. Request POST /api/messages/verify[?address&signature&message] Parameters Name Type Value Notes address string Destination address. For BCH, cashaddr format is accepted. signature string To identify message sender, created using his private key. message string Message to verify. Responses Status Code Description Samples 200 Success Peer | Improve this Doc View Source GetApiVersion Get bitprim-insight API version. Request GET /api/version Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetPeerStatus Get peer/Bitprim node status information. Request GET /api/peer Responses Status Code Description Samples 200 Success Transaction | Improve this Doc View Source BroadcastTransaction Publish a transaction to the P2P network. Request POST /api/tx/send Parameters Name Type Value Notes request See RawTxRequest DTO. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetRawTransactionByHash Given a transaction hash, retrieve its representation as a hex string. Request GET /api/rawtx/{hash} Parameters Name Type Value Notes *hash string 64-character (32 bytes) hex string which univocally identifies the transaction in the network. Responses Status Code Description Samples 200 Success | Improve this Doc View Source GetTransactionByHash Given a transaction hash, retrieve its representation as a hex string. Request GET /api/tx/{hash}[?requireConfirmed&returnLegacyAddresses] Parameters Name Type Value Notes *hash string 64-character (32 bytes) hex string which univocally identifies the transaction in the network. requireConfirmed integer 1 = only confirmed transactions, otherwise include unconfirmed as well. returnLegacyAddresses boolean If and only if true, return addresses in legacy format for BCH. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTransactions Returns all transactions from a block, or an address (only one source at a time). Request GET /api/txs[?block&address&pageNum&returnLegacyAddresses] Parameters Name Type Value Notes block string 64-character (32 bytes) hex string which univocally identifies a block. address string Address to get transactions from. When selecting by address, unconfirmed transactions are included. pageNum integer Results page number to select; starts in zero. Page size is configurable via appsettings.json and command line. By default, page size is 10 transactions. See TransactionsByAddressPageSize key. returnLegacyAddresses boolean If and only if true, return legacy addresses in BCH. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTransactionsForMultipleAddresses Returns all transactions from a set of addresses. Request GET /api/addrs/{paymentAddresses}/txs[?from&to&returnLegacyAddresses] Parameters Name Type Value Notes *paymentAddresses string Comma-separated list of addresses. For BCH, cashaddr format is accepted. The maximum amount of addresses is determined by the MaxAddressesPerQuery configuration key. from integer Results selection starting point; first item is 0 (zero). Default to said value. to integer Results selection ending point. Default to 10. returnLegacyAddresses boolean If and only if true, return addresses in legacy format for BCH. Responses Status Code Description Samples 200 Success 400 Bad Request | Improve this Doc View Source GetTransactionsForMultipleAddresses_Post Returns all transactions from a set of adresses. Request POST /api/addrs/txs Parameters Name Type Value Notes request See GetTxsForMultipleAddressesRequest DTO. Responses Status Code Description Samples 200 Success 400 Bad Request"
  },
  "content/user_guide/releases_notes.html": {
    "href": "content/user_guide/releases_notes.html",
    "title": "Releases | Bitprim Documentation Site",
    "keywords": "Releases Here is the list of bitprim's releases"
  },
  "content/developer_guide/restapi/introduction.html": {
    "href": "content/developer_guide/restapi/introduction.html",
    "title": "Introduction | Bitprim Documentation Site",
    "keywords": "Introduction Bitprim Insight is a Rest API written in C# with .NET Core 2.x which exposes methods matching the insight API interface. Bitprim Insight supports the following cryptocurrencies: Bitcoin Cash Bitcoin Litecoin (coming soon)"
  },
  "content/developer_guide/restapi/installation.html": {
    "href": "content/developer_guide/restapi/installation.html",
    "title": "Installation Requirements | Bitprim Documentation Site",
    "keywords": "Installation Requirements 64-bit machine. Conan package manager, version 1.1.0 or newer. See Conan Installation . .NET Core 2.0 SDK In case there are no pre-built binaries for your platform, conan will automatically try to build from source code. In such a scenario, the following requirements must be added to the previous ones: C++11 Conforming Compiler. CMake building tool, version 3.4 or newer. Building Procedure The Bitprim libraries can be installed using conan (see below) on Linux, macOS, FreeBSD, Windows and others. These binaries are pre-built for the most usual operating system/compiler combinations and are downloaded from an online repository. If there are no pre-built binaries for your platform, conan will attempt to build from source during the installation. Build In the project folder run: For Bitcoin Cash dotnet build /p:BCH=true -c Release -v normal For Bitcoin dotnet build /p:BTC=true -c Release -v normal Run dotnet bin/Release/netcoreapp2.0/bitprim.insight.dll --server.port=3000 --server.address=0.0.0.0 or you can publish the app and run over the published folder dotnet publish /p:BTC=true -c Release -v normal -o published dotnet bin/Release/netcoreapp2.0/published/bitprim.insight.dll --server.port=3000 --server.address=0.0.0.0 Command line arguments --server.port : Defines the listening TCP port. Default value:1549 --server.address : Defines the listening IP address. Default value:localhost --max.url : Maximum allowed URL length for all requests, in characters. Any request which exceeds this value will be rejected with error 414 (request URI too long). Default value:600 --max.post : Maximum body size for all requests, in bytes. Any request which exceeds this value will be rejected with error 413 (payload too large). Default value:204800 (200kB)"
  },
  "content/developer_guide/go/Go-interface.html": {
    "href": "content/developer_guide/go/Go-interface.html",
    "title": "Basic structure | Bitprim Documentation Site",
    "keywords": "Bitprim's Go interface is built on top of Bitprim's C interface, in this fashion: On top of the raw C interface, a 1-1 binding is made in Go, in order to separate access to the API from its usage; this avoids impedance mismatch by separating the marshalling aspects from the binding language idiosyncrasies. That is, the 1-1 interface takes care of marshalling, without changing the interface. Then, the idiomatic interface uses the higher level language tools and idioms in order to hide the complexity from the application programmer. It takes another programmer profile in order to tinker with the lower level interfaces or consume them directly, but that is also possible when working with this approach: 3 separate levels of abstraction for accessing the same functionality. Basic structure See the source in Github : {entity}_native.go: All of these together implement the 1-1 native interface. As usual, executor is the main entity which is used for manipulating the node. {entity}.go: Together, all of these comprise the idiomatic interface. They define user defined types using the Go conventions that Go application programmers are familiar with and expect from a Go library/binding. RESTful interface One characteristic that sets Go apart from, say, Python, is the ease with which a Rest API can be created and tested from scratch. This is a very useful feature in today's web-centric world, and in order to make things even easier for Go developers, a Rest api is also offered in this interface. See here for an example of how to start an http server which hosts it and can be consumed from Postman, Curl or a browser and thus easily integrated into any web application."
  },
  "content/developer_guide/dotnet/tutorials/tutorials.html": {
    "href": "content/developer_guide/dotnet/tutorials/tutorials.html",
    "title": "Tutorials | Bitprim Documentation Site",
    "keywords": "Tutorials Introduction As an example of what can be achieved with the bitprim-cs API, we'll show how to implement a Memo.cash scraper consuming the API from a C# console application. Memo.cash is a Twitter-like social network built on top of the Bitcoin Cash Network. Posts are published as transactions with OP_RETURN output scripts using Memo-specific prefix codes . The code for this tutorial is available in Github , in the bitprim.tutorials folder. Referencing bitprim-cs In the sample code, in bitprim.tutorials.csproj , a project reference to bitprim-cs (BCH version) is used: <ItemGroup> <ProjectReference Include=\"..\\bitprim-bch\\bitprim-bch.csproj\" /> </ItemGroup> When the API is referenced like this, it is necessary to manually copy the underlying native dll (libbitprim-nodecint.so or .dll) to the target dir. We have provided a .targets file which performs that task. In bitprim.tutorials.csproj , that target is imported... <Import Project=\"..\\bitprim-bch\\build\\Common.targets\" /> ... and invoked after build: <Target Name=\"CopyNativeLib\" AfterTargets=\"Build\"> <CallTarget Targets=\"GetBitprimNodeCint\" /> </Target> When referencing bitprim-cs via NuGet , these steps are unnecessary, since they are injected automatically by NuGet when restoring. API basic usage Using bitprim-cs implies running a full bitprim node, so keep in mind that considerable storage space will be needed if connecting to mainnet. To control node execution, the Executor class can be used. Create an instance , initialize it , and once initialization succeeds, the [Chain property] ( https://bitprim.github.io/docfx/bitprim-cs/Bitprim.Executor.html#Bitprim_Executor_Chain ) can be used to query the blockchain. Example code: using (var executor = new Executor(\"bcc-mainnet.cfg\")) { var result = await executor.InitAndRunAsync(); if (result != 0) { throw new ApplicationException(\"Executor::InitAndRunAsync failed; error code: \" + result); } // Query the blockchain using executor.Chain and its component classes // Once querying is done, close gracefully executor.Stop(); } The executor constructor requires a node configuration file; its values will depende on the coin (BCH/BTC/LTC), and the network (testnet/mainnet). For details on each field, see the libbitcoin documentation . Various sample config files for bitprim nodes are publicly available in Github . 1. Identifying a Memo transaction Given a transaction hash, we want to be able to tell whether it's a Memo transaction or not. A Memo transaction uses OP_RETURN in at least one of its outputs, and that output's script will have the memo opcode. For example, transaction 4a69a310ce5cade43a12308101822dd9e2988f4be17c53c20785d7060688157d . We can use the Chain class' FetchTransactionAsync method to check its contents: If successful, the method will return an instance of the Transaction class which will contain all the transaction information. A transaction contains outputs , each of which has a Script object, representing the output's script. If we look at the script from the second output (n=1) from the sample transaction, using the ToString method : it's an OP_RETURN operation. Furthermore, take a look at the prefix codes: return [6d0c] [6d656d6f] . By reading the content of the square brackets as hex strings, we get return [m\\n] [memo] . The first string between square brackets is what identifies this as a Memo transaction, according to the Memo protocol . Finally, if we decode the third hex string between square brackets, we get the Memo post: Yesterday 150632-148590=2042 memo transactions. Number of transactionsð20%. Charts available at https://memo.cash/charts . considering whether should I stop this recording??? Reading the N most recent Memo posts Now that we can tell if a transaction is Memo or not, we can use the bitprim-cs API to traverse the blockchain and scrape them. Suppose we want the N most recent posts. First, we need to know the current BCH blockchain height. This can be done using the FetchLastHeightAsync method . So, now that blockchain height is known, blocks and their transactions can be examined to search for Memo transactions. Given a block height, the block can be retrieved using the FetchBlockByHeightAsync method . Given the block, its transactions can now be navigated using the GetNthTransaction method and the TransactionCount property . For example (omitting error handling for simplicity): // chain_ = executor.Chain, after calling executor.InitAndRunAsync() successfully. public async List<string> GetLatestPosts(int nPosts) { UInt64 blockchainHeight = await chain_.FetchLastHeightAsync(); int postsFound = 0; var posts = new List<string>(); while(postsFound < nPosts && blockchainHeight > 1) { using(Block block = await chain_.FetchBlockByHeightAsync(blockchainHeight).BlockData) { for(uint iTx=0; iTx<block.TransactionCount && postsFound < nPosts; ++iTx) { using(var tx = block.GetNthTransaction(iTx)) { if(TransactionIsMemo(tx)) { posts.Add(GetPost(tx)); ++postsFound; } } } } blockchainHeight--; } return posts; } As an optimization, using these same methods, it would be possible to scrape the whole blockchain from genesis to top to retrieve all Memo posts, save them to an external storage and cache them to avoid scraping every time. Then, it could be possible to modify the scraping code to start from a specific height, so as to periodically update, or monitor incoming blocks to detect Memo posts as soon as possible (see SubscribeToBlockChain ). 2. Making a Memo post To make a post, a transaction must be created with an OP_RETURN output script with the Memo prefix. Once the transaction is created, its hex representation can be handed to the Transaction constructor ; for the transaction protocol version, 1 is the recommended value. Once the transaction object is created, it can be handed to the OrganizeTransactionAsync method . This will send the transaction to the BCH blockchain, where it should eventually become part of a mined block and permanently added to the blockchain. After a certain time, it should be visible as a new Memo transaction."
  },
  "content/developer_guide/c/C-interface.html": {
    "href": "content/developer_guide/c/C-interface.html",
    "title": "Resource management | Bitprim Documentation Site",
    "keywords": "Bitprim's C interface, the bitprim-node-cint project, is built on top of the C++ interface. Asides from allowing a C library or program to consume all the Bitprim functionality, it can act as the base to create bindings for many current popular programming languages, such as Javascript, C#, Golang, Java and Python. All of these languages can interface easily with C, but not with C++. Granted, the Object Oriented paradigm is lost when transitioning to C, but it can be \"recovered\" when implementing a binding in an object oriented language such as C#. In such a context, classes can be built in order to give application programmers a friendlier interface for integrating Bitcoin in their projects, bridging the gap created by C/C++'s inherent complexity. Therefore, Bitprim's interface is not really meant to be consumed directly, but as the basis for a higher level binding in another language. To make this task easier, most functions will receive a parameter which will wrap the implicit object (this), so that OOP can be preserved in the binding if possible. Resource management To avoid memory leaks, all C functions which allocate memory that must be released by the user are clearly documented as such. When implementing a binding on top of the C interface, it is advisable to use the RAII idiom whenever possible to relieve the application programmer from the burden of manual memory management. Basic structure - memory management Since this is C we're dealing with, there is nothing beyond a set of functions and some user defined types, but there is a structure nevertheless. The main \"entry point\" for the interface are the functions from executor_c.h and the types defined in primitives.h . To start consuming node functionality, the first step is calling one of these functions: executor_t executor_construct(char const* path, FILE* sout, FILE* serr); executor_t executor_construct_fd(char const* path, int sout_fd, int serr_fd); Any function with the construct suffix will create an object in dynamic memory, which will have to be released by calling the associated destruct : void executor_destruct(executor_t exec); This pattern will be seen with many other types; whenever an object is created by the user with a construct function, it will need to be released with destruct as soon as it is no longer needed. Another case is when a function needs to create an object for returning it. For example, if we wanted to fetch the transaction history for a specific Bitcoin address, we could use the fetch_history function: void fetch_history(executor_t exec, payment_address_t address, size_t limit, size_t from_height, history_fetch_handler_t handler); There's another concept in play here: a pointer to function acting as a callback. Looking at the definition for history_fetch_handler_t in primitives.h: typedef void (*history_fetch_handler_t)(int error, history_compact_list_t history); The second parameter, history, is created dynamically, and therefore must be released by the user, even if he didn't create it. This has to be done this way because there is no way for the C interface to know when the user is done using history. Therefore, it is up to him/her to call history_ compact__list _destruct(history)._ The remaining header files follow these conventions; transaction.h contains functions for manipulating a transaction object, block.h for blocks, and so on. Keep in mind that objects must be destroyed manually. API documentation Detailed documentation"
  },
  "content/user_guide/rpc.html": {
    "href": "content/user_guide/rpc.html",
    "title": "| Bitprim Documentation Site",
    "keywords": "We are currently developing full RPC support, to be compatible with software that currently relies on other Bitcoin implementations. Currently we are able to respond to the following messages: getaddressbalance getaddresstxids getaddressdeltas getaddressutxos getblockhashes getaddressmempool getbestblockhash getblock getblockhash getblockchaininfo getblockheader getblockcount getblocktemplate getchaintips getdifficulty getinfo getmininginfo getrawtransaction getspentinfo validateaddress sendrawtransaction submitblock This allow us to successfully mine using our software."
  },
  "content/team.html": {
    "href": "content/team.html",
    "title": "Members | Bitprim Documentation Site",
    "keywords": "Members Juan Garavaglia - CEO Founder Mariano Orsili - CTO Founder Mateo Friedman - Math Expert Fernando Pelliccioni - Lead Developer Ramiro Carlucho - Developer Guillermo Paoletti - Developer Dario Ramos - Developer Mario Dal Lago - Developer Gerardo Arceri - DevOp Renzo Barrionuevo - Project Manager Sergio Suchockas - Operations Manager We are open for contibutors and looking for full time developers, feel free to contact us at info@bitprim.org"
  },
  "content/blank.html": {
    "href": "content/blank.html",
    "title": "Test | Bitprim Documentation Site",
    "keywords": "Test"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Bitprim | Bitprim Documentation Site",
    "keywords": "\"Bringing decentralized solutions to everyday life\" Welcome to Bitprim Bitprim is a multi-coin developing platform, working with multi-languages programming compatible with the Satoshi Client. Download: Github: https://github.com/bitprim Slack: bitprim.slack.com Email: info@bitprim.org The platform includes: 100% Satoshi Client Compatible Protocol Implementation Mining Engine Multi-Coin Bitcoin Cash (BCH) Bitcoin (BTC) Litecoin (LTC) RPC support C Interface C++ Interface Interfaces for Go, Python, Node, C#, Rust and Eiffel Full Rest API implementation, compatible with insight API"
  },
  "content/user_guide/introduction.html": {
    "href": "content/user_guide/introduction.html",
    "title": "Introduction | Bitprim Documentation Site",
    "keywords": "Introduction Bitprim allows you to run a full Bitcoin Cash / Bitcoin / Litecoin node, with all four main features: Wallet Mining Full blockchain Routing Bitprim also works as a cryptocurrency development platform with several programmable APIs: C++ C C# Python Javascript Rust Golang ... and networking APIs: bitprim-insight: A Bitprim implementation of the Insight-API JSON-RPC Libbitcoin BS-BX protocol"
  },
  "content/user_guide/installation.html": {
    "href": "content/user_guide/installation.html",
    "title": "Installation Requirements | Bitprim Documentation Site",
    "keywords": "Installation Requirements 64-bit machine. Conan package manager, version 1.4.0 or newer. See Conan Installation . Installation Procedure The Bitprim executables can be installed on Linux, macOS, FreeBSD, Windows and others. These binaries are pre-built for the most usual operating system/compiler combinations and hosted in an online repository. If there are no pre-built binaries for your platform, a build from source will be attempted. So, for any platform, an installation can be performed in 2 simple steps: Configure the Conan remote conan remote add bitprim https://api.bintray.com/conan/bitprim/bitprim Install the appropriate executable # For Bitcoin Cash conan install bitprim-node-exe/0.X@bitprim/stable -o currency=BCH # ... or (BCH is the default crypto) conan install bitprim-node-exe/0.X@bitprim/stable # For Bitcoin Legacy conan install bitprim-node-exe/0.X@bitprim/stable -o currency=BTC # For Litecoin conan install bitprim-node-exe/0.X@bitprim/stable -o currency=LTC Building from source Requirements In case there are no pre-built binaries for your platform, it is necessary to build from source code. In such a scenario, the following requirements must be added to the previous ones: C++11 Conforming Compiler. CMake building tool, version 3.4 or newer. Running the node In order to run the full node, you have to initialize the database and then run the node: Run the following to initialize the database: ./bn -i Finally, run the node: ./bn The above commands use the default configuration hardcoded in the executable. You can use a configuration file to customize the behavior of the node. In the bitprim-config repository you can find some example files. Initialize the database using a configuration file: ./bn -i -c <configuration file path> Run the node using a configuration file: ./bn -c <configuration file path> Advanced Installation Bitprim is a high performance node, so we have some options and pre-built packages tuned for several platforms. Specifically, you can choose your computer microarchitecture to download a pre-build executable compiled to take advantage of the instructions available in your processor. For example: # For Haswell microarchitecture and Bitcoin Cash currency conan install bitprim-node-exe/0.X@bitprim/stable -o currency=BCH -o microarchitecture=haswell So, you can manually choose the appropriate microarchitecture, some examples are: x86_64 , haswell , ivybridge , sandybridge , bulldozer , ... By default, if you do not specify any, the building system will select a base microarchitecture corresponding to your Instruction Set Architecture (ISA). For example, for Intel 80x86 , the x86_64 microarchitecture will be selected. Automatic Microarchitecture selection Our build system has the ability to automatically detect the microarchitecture of your processor. To do this, first, you have to install our pip package called cpuid . Our build system detects if this package is installed and in such case, makes use of it to detect the best possible executable for your processor. pip install cpuid conan install bitprim-node-exe/0.X@bitprim/stable"
  },
  "content/developer_guide/restapi/websockets.html": {
    "href": "content/developer_guide/restapi/websockets.html",
    "title": "Web Socket API | Bitprim Documentation Site",
    "keywords": "Web Socket API The web socket API is served using standard, pure web sockets . The first step is connecting to _domain_/wss ; once connection is established, specific messages need to be sent to the server in order to subscribe to the different events (see each event entry). To simplify event subscription, the ScopedPureWebSocket class can be used. The following are the events published by insight: tx : new transaction received from network. To receive this event, after connecting to the websocket endpoint, send the SubscribeToTxs plain text message. Sample output: { \"eventname\": 'tx', \"txid\":\"00c1b1acb310b87085c7deaaeba478cef5dc9519fab87a4d943ecbb39bd5b053\", \"valueOut: \"0.564BCH\", \"addresses\": [\"17orHVW3pF86VQqraegS6PCjk579EasXYg\", \"12vJYnCm5QgY4vntutTG95SkiLfXhgbiAc\"] ... } Output fields: txid is the transaction hash, valueOut is the sum of all the transaction outputs, and addresses contains a list of the addresses involved in the transaction, considering inputs and outputs. block : new block received from network. After connecting to the webscoket endpoint, send the SubscribeToBlocks plain text message to begin receiving these notifications. Sample output: { \"eventname\":\"block\" } <addresstx> : new transaction received on a specific address. To subscribe to a specific address, send a message with that address in legacy format in plain text. Sample output: { eventname: 'addresstx', txid: \"00c1b1acb310b87085c7deaaeba478cef5dc9519fab87a4d943ecbb39bd5b053\" } Example Usage The following html page connects to the web socket insight API and listens for new transactions. <html> <body> <script> var socket = new WebSocket('http://domain.com/ws'); socket.onopen = function() { socket.send(\"SubscribeToTxs\"); }; socket.onmessage = function(msg) { var messageData = JSON.parse(msg.data); if(messageData.eventname != undefined && messageData.eventname == 'tx') { console.log(\"Transaction received! txid: \" + messageData.txid); } }; </script> </body> </html>"
  },
  "content/developer_guide/restapi/tutorials.html": {
    "href": "content/developer_guide/restapi/tutorials.html",
    "title": "Tutorials | Bitprim Documentation Site",
    "keywords": "Tutorials Introduction As an example of what can be achieved with the bitprim-insight Rest API, we'll show how to implement a Memo.cash explorer consuming the API from a C# console application. Memo.cash is a Twitter-like social network built on top of the Bitcoin Cash Network. Posts are published as transactions with OP_RETURN output scripts using Memo-specific prefix codes . For this tutorial, our use cases will be: Identifying a Memo transaction and scraping them from the BCH blockchain. Creating and publishing a Memo post. The code for this tutorial is available in Github , in the bitprim.insight.tutorials folder. 1. Identifying a Memo transaction Given a transaction hash, we want to be able to tell whether it's a Memo transaction or not. A Memo transaction uses OP_RETURN in at least one of its outputs, and that output's script will have the memo opcode. For example, transaction 4a69a310ce5cade43a12308101822dd9e2988f4be17c53c20785d7060688157d . If we use the bitprim insight API GetTransactionByHash method to check its contents: https://blockdozer.com/api/tx/4a69a310ce5cade43a12308101822dd9e2988f4be17c53c20785d7060688157d This will be the result: { \"txid\": \"4a69a310ce5cade43a12308101822dd9e2988f4be17c53c20785d7060688157d\", \"version\": 1, \"locktime\": 0, \"vin\": [ { \"txid\": \"93e7dd59c45e287a955437aa33493e31b877f60582c8c4c4f4f85b25e52c9ef9\", \"vout\": 0, \"scriptSig\": { \"asm\": \"[3044022012b742ca2a0c4a49070eacbb018c6ed11c28eaa6a9e52282f78cecd3612424ca022023bbc42638af9c29f6bdd8eae293781e8c7b14c387914d81cdecc5525ede968041] [02e2053838670dc0383d945319d3d1a285476696a4388ed0d907ae043b64af9813]\", \"hex\": \"473044022012b742ca2a0c4a49070eacbb018c6ed11c28eaa6a9e52282f78cecd3612424ca022023bbc42638af9c29f6bdd8eae293781e8c7b14c387914d81cdecc5525ede9680412102e2053838670dc0383d945319d3d1a285476696a4388ed0d907ae043b64af9813\" }, \"addr\": \"1KZonibiByMHsXkJi5Vfm9jAySbv6yYVEi\", \"valueSat\": 385287, \"value\": 0.00385287, \"doubleSpentTxID\": null, \"sequence\": 4294967295, \"n\": 0 } ], \"vout\": [ { \"value\": 0.00384891, \"n\": 0, \"scriptPubKey\": { \"asm\": \"dup hash160 [cba6a1b91eda58e77ff5f265037326699625dfa0] equalverify checksig\", \"hex\": \"76a914cba6a1b91eda58e77ff5f265037326699625dfa088ac\", \"addresses\": [ \"1KZonibiByMHsXkJi5Vfm9jAySbv6yYVEi\" ], \"type\": \"pubkeyhash\" }, \"spentTxId\": null, \"spentIndex\": null, \"spentHeight\": null }, { \"value\": 0, \"n\": 1, \"scriptPubKey\": { \"asm\": \"return [6d0c] [6d656d6f] [596573746572646179203135303633322d3134383539303d32303432206d656d6f207472616e73616374696f6e732e204e756d626572206f66207472616e73616374696f6e73f09f93883230252e2043686172747320617661696c61626c652061742068747470733a2f2f6d656d6f2e636173682f636861727473202e20636f6e7369646572696e6720776865746865722073686f756c6420492073746f702074686973207265636f7264696e673f3f3f]\", \"hex\": \"6a026d0c046d656d6f4cb1596573746572646179203135303633322d3134383539303d32303432206d656d6f207472616e73616374696f6e732e204e756d626572206f66207472616e73616374696f6e73f09f93883230252e2043686172747320617661696c61626c652061742068747470733a2f2f6d656d6f2e636173682f636861727473202e20636f6e7369646572696e6720776865746865722073686f756c6420492073746f702074686973207265636f7264696e673f3f3f\", \"type\": \"non_standard\" }, \"spentTxId\": null, \"spentIndex\": null, \"spentHeight\": null } ], \"confirmations\": 13, \"isCoinBase\": false, \"valueOut\": 0.00384891, \"size\": 388, \"valueIn\": 0.00385287, \"blockhash\": \"0000000000000000014f42d36c0c9e42810ab0d8ec55ad95eb5e0634a31521c7\", \"time\": 1531833466, \"blocktime\": 1531833466, \"blockheight\": 539369, \"fees\": 0.00000396 } Focus on the second output (n=1), in its asm field: it's an OP_RETURN operation. Furthermore, take a look at the prefix codes: return [6d0c] [6d656d6f] . By reading the content of the square brackets as hex strings, we get return [m\\n] [memo] . The first string between square brackets is what identifies this as a Memo transaction, according to the Memo protocol . Finally, if we decode the third hex string between square brackets, we get the Memo post: Yesterday 150632-148590=2042 memo transactions. Number of transactionsð20%. Charts available at https://memo.cash/charts . considering whether should I stop this recording??? Reading the N most recent Memo posts Now that we can tell if a transaction is Memo or not, we can use the Bitprim API to traverse the blockchain and scrape them. Suppose we want the N most recent posts. First, we need to know the current BCH blockchain height. This can be done using the GetSyncStatus method . A sample output of this command would look this way: { \"status\": \"finished\", \"blockChainHeight\": 539383, \"syncPercentage\": \"100.00\", \"error\": null, \"height\": 539383, \"type\": \"bitprim node\" } The field of interest is blockChainHeight (which matches height , because the node is currently at the top of the blockchain). So, now that blockchain height is known, blocks and their transactions can be examined to search for Memo transactions. Given a block height, the block hash can be retrieved using the GetBlockByHeight method . This will yield the block hash; for 539383, it would be: { \"blockHash\": \"000000000000000000c13abc1788effd797a84a951738a423ad78581e5128a27\" } With the block hash, its transactions can now be navigated using the GetTransactions method , supplying only the block parameter (i.e. the transaction source will be a block hash). The output will have this structure: { \"pagesTotal\": 10, \"txs\": [ //Transaction array: elements will have same structure as GetTransactionByHash ] } For this block, there are 10 pages of transactions to process. It is possible to iterate over the pages by calling GetTransactions again with the same block hash and a different pageNum parameter, from 0 to 9. This way, the whole block can be traversed searching for Memo transactions. These steps can be replicated for the previous block, and so on until N Memo posts are found. As an optimization, using these same methods, it would be possible to scrape the whole blockchain from genesis to top to retrieve all Memo posts, save them to an external storage and cache them to avoid scraping every time. Then, it could be possible to modify the scraping code to start from a specific height, so as to periodically update, or monitor incoming blocks to detect Memo posts as soon as possible (see Websockets API ). 2. Making a Memo post To make a post, a transaction must be created with an OP_RETURN output script with the Memo prefix. Once the transaction is created, its hex representation can be handed to the BroadcastTransaction method . This will send the transaction to the BCH blockchain, where it should eventually become part of a mined block and permanently added to the blockchain. After a certain time, it should be visible as a new Memo transaction."
  },
  "content/developer_guide/restapi/configuration.html": {
    "href": "content/developer_guide/restapi/configuration.html",
    "title": "Configuration Options | Bitprim Documentation Site",
    "keywords": "Configuration Options You need to create an appsettings.json file in the build directory to run the application. You can use appsettings.example.json as a starting point. Eg. { \"ApiPrefix\" : \"api\", \"AcceptStaleRequests\" : true, \"AllowedOrigins\": \"http://localhost:1549\", \"Connections\": 8, \"DateInputFormat\": \"yyyy-MM-dd\", \"EstimateFeeDefault\": \"0.00001000\", \"ForwardUrl\" : \"http://localhost:1234\", \"InitializeNode\" : true, \"LongResponseCacheDurationInSeconds\": 86400, \"MaxAddressesPerQuery\": 10, \"MaxBlockSummarySize\": 500, \"MaxCacheSize\": 50000, \"MaxSocketPublishRetries\": 3, \"NodeConfigFile\": \"config.cfg\", \"NodeType\": \"bitprim node\", \"PoolsFile\": \"pools.json\", \"ProtocolVersion\": \"70015\", \"Proxy\": \"\", \"RelayFee\": \"0.00001\", \"ShortResponseCacheDurationInSeconds\": 30, \"SocketPublishRetryIntervalInSeconds\": 1, \"TimeOffset\": \"0\", \"TransactionsByAddressPageSize\": 10, \"Version\": \"170000\", \"HttpClientTimeoutInSeconds\" : 5, \"WebsocketsEnabled\": true, \"WebsocketsMsgBlockEnabled\": true, \"WebsocketsMsgTxEnabled\": true, \"WebsocketsMsgTxIncludeVout\": false, \"WebsocketsMsgAddressTxEnabled\": true, \"WebsocketsForwarderClientRetryDelay\": 10, \"Serilog\": { \"Using\": [\"Serilog.Sinks.Console\", \"Serilog.Sinks.File\"], \"MinimumLevel\": { \"Default\": \"Information\", \"Override\": { \"Microsoft\": \"Warning\" } }, \"WriteTo\": [ { \"Name\": \"Console\", \"Args\": { \"outputTemplate\" : \"[{Timestamp:yyyy-MM-dd HH:mm:ss} {TimeZone}] {Level:u3} {SourceIP} {RequestId} {HttpMethod} {RequestPath} {HttpProtocol} {HttpResponseStatusCode} {HttpResponseLength} {ElapsedMs} {Message:lj}{NewLine}{Exception}\" } }, { \"Name\": \"File\", \"Args\": { \"path\": \"log-.txt\", \"rollingInterval\": \"Day\", \"fileSizeLimitBytes\": null, \"retainedFileCountLimit\" : 5, \"outputTemplate\" : \"[{Timestamp:yyyy-MM-dd HH:mm:ss} {TimeZone}] {Level:u3} {SourceIP} {RequestId} {HttpMethod} {RequestPath} {HttpProtocol} {HttpResponseStatusCode} {HttpResponseLength} {ElapsedMs} {Message:lj}{NewLine}{Exception}\" } } ], \"Enrich\": [\"FromLogContext\"] } } All the settings can be passed as command line arguments prefixing the name with '--' Eg. dotnet bin/x64/Release/netcoreapp2.0/published/bitprim.insight.dll --server.port=3000 --server.address=0.0.0.0 --MaxBlockSummarySize=1000 The application has two different operation modes. As a Full Node or a Forwarder . In Full Node mode, the application starts a full Bitprim node, generating a copy of the blockchain. In Forwarder mode, the application only relays the request to a Full Node application. Settings ApiPrefix : Defines the name of the url segment where you expose the api methods. http://blockdozer.com/[ApiPrefix]/blocks/ Default value:api AcceptStaleRequests : Allows the API to respond to requests even if the chain is stale (the local copy of the blockchain isn't fully synchronized with the network). Default value:true AllowedOrigins : Configure the allowed CORS origins. For multiple origins, separate them with semicolon (;). Default value: * Connections : Configures the value returned in the connection element of the /status request. Default value:8 DateInputFormat : Defines the date format used by /blocks and other requests that require dates. Default value:yyyy-MM-dd EstimateFeeDefault : Sets the value returned by /utils/estimatefee. Default value:0.00001000 ForwardUrl : When you use the application in Forwarder mode, this settings defines the Full Node's URL. Default value:\"\" InitializeNode : This setting defines the node's working mode: True for Full Node, False for Forwarder Node. Default value:true LongResponseCacheDurationInSeconds : Duration of the long cache responses. Used to cache results for the following requests: /rawblock /rawtx Default value:86400 MaxAddressesPerQuery : Define the max address allowed per query. Used in the following requests: /addrs/{paymentAddresses}/utxo /addrs/utxo /addrs/{paymentAddresses}/txs Default value:10 MaxBlockSummarySize : Defines the max limit of the /blocks method. Default value:500 MaxCacheSize : Configures the cache size limit; this is an adimensional value, because measuring object size is not trivial. The size for each cache entry is also adimensional and arbitrarily set by the user. The total size sum will never exceed this value. Default value:50000 MaxSocketPublishRetries : Defines how many times the server retries when publishing websocket messages before throwing an exception. Default value:3 NodeConfigFile : Node config file path; can be absolute, or relative to the project directory. Only use in Full Node mode. Default value:\"\" NodeType : The value returned in type element by the /sync method. Default value:bitprim node PoolsFile : Path to the json file with the mining pool information. Default value:pools.json ProtocolVersion : The value returned in protocolversion element by the /status method. Default value:70015 Proxy : The value returned in proxy element by the /status method. Default value:\"\" RelayFee : The value returned in relayfee element by the /status method. Default value:0.00001 ShortResponseCacheDurationInSeconds : Duration of the short cache responses. Used to cache results for the following requests: /txs /addrs/{paymentAddresses}/txs /addrs/txs /tx/{hash} /txs /rawblock-index/{height} /blocks /block/{hash} /block-index/{height} /sync /status /addr/{paymentAddress}/balance /addr/{paymentAddress}/totalReceived /addr/{paymentAddress}/totalSent /addr/{paymentAddress}/unconfirmedBalance /addr/{paymentAddress}/utxo /addrs/{paymentAddresses}/utxo /addrs/utxo /addr/{paymentAddress} /peer /version Default value:30 SocketPublishRetryIntervalInSeconds : Delay in seconds between retries for \"Publish\" websocket messages. Default value:1 MaxSocketPublishRetries : Maximum number of retries for a \"Publish\" websocket message Default value:3 TimeOffset : The value returned in timeoffset element by the /status method. Default value:0 TransactionsByAddressPageSize : The max page limit used by the /txs method. Default value:10 Version : The value returned in version element by the /status method. Default value:\"\" HttpClientTimeoutInSeconds : Defines HttpClient timeout. Used in forwarder mode. Default value:5 WebsocketsEnabled : Define if the node accepts websocket requests. Default value:true WebsocketsMsgBlockEnabled : Define if the node sends block messages. Default value:true WebsocketsMsgTxEnabled : Define if the node sends tx messages. Default value:true WebsocketsMsgTxIncludeVout : If and only if true, include transaction outputs in tx web socket message. If included, outputs will be represented as an array of (address, amount) pairs. Default value:false WebsocketsMsgAddressTxEnabled : Define if the node sends addresstx messages. Default value:true WebsocketsForwarderClientRetryDelay : The delay in seconds beetween retries when the websocket connection to the fullnode fails. Default value:10 Serilog : The Serilog configuration. For more detailed documentation, check https://github.com/serilog/serilog/wiki/Getting-Started"
  },
  "content/developer_guide/python/Python-interface.html": {
    "href": "content/developer_guide/python/Python-interface.html",
    "title": "Basic structure | Bitprim Documentation Site",
    "keywords": "Bitprim's Pyhton interface is built on top of Bitprim's C interface, in this fashion: On top of the raw C interface, a 1-1 binding is made in Python, in order to separate access to the API from its usage; this avoids impedance mismatch by separating the marshalling aspects from the binding language idiosyncrasies. That is, the 1-1 interface takes care of marshalling, without changing the interface. Then, the idiomatic interface uses the higher level language tools and idioms in order to hide the complexity from the application programmer. It takes another programmer profile in order to tinker with the lower level interfaces or consume them directly, but that is also possible when working with this approach: 3 separate levels of abstraction for accessing the same functionality. Basic structure See the source in Github : bitprimmodule.c : This is where the 1-1 native interface is implemented. C functions which can be called from Python are defined here, implementing all necessary marshalling. bitprim.py : This is the idiomatic interface definition. Here, Python classes are defined and Python idioms and conventions offered to make life easier for the Python application programmer. bitprim_run.py . Entry point. Creates an executor and starts it. Use for testing the API. User guide Python interface documentation is available here."
  },
  "content/developer_guide/dotnet/tutorials/how_to_generate_addresses.html": {
    "href": "content/developer_guide/dotnet/tutorials/how_to_generate_addresses.html",
    "title": "Generate Seed | Bitprim Documentation Site",
    "keywords": "#How to create addresses If you want to receive coins you need to generate an address. In this tutorial you will learn: How to generate a seed How to generare a private key How to generate a public key How to generate an address Generate Seed First you need a seed to generate the private key. The seed must be a random string with a high degree of entropy. For this, we use the following method. Generate Private key Now we can generate the private key. The private key has 256 bits in length. And can be encoded in different formats: Raw Hex WIF WIF-Compressed Generate Public key The public key is derived from the private key using elliptic curve calculations. The public key can be compressed or uncompressed. Generate Address Now we can generate our public address to share with anyone. If K is the public key, the resulting address A is: A = Base58Check(RIPEMD160(SHA256(K)))"
  },
  "content/developer_guide/dotnet/introduction.html": {
    "href": "content/developer_guide/dotnet/introduction.html",
    "title": "Basic structure | Bitprim Documentation Site",
    "keywords": "Bitprim's .NET interface is built on top of Bitprim's C interface, in this fashion: On top of the raw C interface, a 1-1 binding is made in .NET, by using the Platform Invoke mechanism , in order to separate access to the API from its usage; this avoids impedance mismatch by separating the marshalling aspects from the binding language idiosyncrasies. That is, the 1-1 interface takes care of marshalling, without changing the interface. Then, the idiomatic interface uses the higher level language tools and idioms in order to hide the complexity from the application programmer. It takes another programmer profile in order to tinker with the lower level interfaces or consume them directly, but that is also possible when working with this approach: 3 separate levels of abstraction for accessing the same functionality. The platform invoke mechanism was chosen in order to support as many operating systems as possible, because .NET Core does not support C++/CLI. Basic structure The api is fully written in C#. See the source in Github : idiomatic classes : Object oriented abstractions over Bitcoin concepts: Chain, Transaction, Block, Header, and so on. The Executor class is responsible for handling node execution. native classes : These are all static classes, since each of these contains a set of DllImports of the native C functions. .Net standard Support The api implements .net standard 2.0 support to allow multiple consumers. Multiples coins Our API implements bindings for Bitcoin Cash (BCH) and Bitcoin Legacy (BCT). Litecoin (LTC) is in progress."
  },
  "content/developer_guide/dotnet/installation.html": {
    "href": "content/developer_guide/dotnet/installation.html",
    "title": "Installation | Bitprim Documentation Site",
    "keywords": "Installation Prerequisites 64-bit machine. Conan package manager, version 1.1.0 or newer. See Conan Installation . In case there are no pre-built binaries for your platform, conan will automatically try to build from source code. In such a scenario, the following requirements must be added to the previous ones: C++11 Conforming Compiler. CMake building tool, version 3.4 or newer. Installation You can install the Bitprim C# binding via Nuget. There are two packages available: For Bitcoin Cash (BCH) you need to use https://www.nuget.org/packages/bitprim-bch/ and for Bitcoin Legacy (BTC) you need to use https://www.nuget.org/packages/bitprim-btc/ If you use Visual Studio, you can use the UI or the Package Manager. UI Right click on your project Select Manage Nuget Packages Search for bitprim-bch or bitprim-btc Click Install Package Manager * Open Package Manager * Run the following command Install-Package bitprim-bch or Install-Package bitprim-btc If you are using dotnet cli: dotnet add package bitprim-bch or dotnet add package bitprim-btc Building from source If you want to build from source, you need the following prerequisites: .Net Framework 4.6.1 .Net Core 2.0 Powershell (Windows only) Run the following commands: git clone https://github.com/bitprim/bitprim-cs.git cd bitprim-cs if you are on Windows, run: powershell ./build.ps1 if you are in Linux or osx : chmod +x build.sh ./build.sh If you have problems running build.ps1 please check this link https://cakebuild.net/docs/tutorials/powershell-security"
  },
  "content/developer_guide/c++/C---interface.html": {
    "href": "content/developer_guide/c++/C---interface.html",
    "title": "Package diagram | Bitprim Documentation Site",
    "keywords": "Bitprim's C++ interface is the base layer of the platform, the lowest abstraction level available. It's a fork of the Satoshi/reference implementation with several improvements, the main of them being modularization. Being monolithic, the reference client is harder to change, not only because a change ripples across the whole system, but also because it's not possible to mix and match different module implementations. Package diagram If we were to view the Bitprim projects as UML packages, their dependencies would look like this (some projects omitted for simplicity): Which is the main responsibility/functionality for each package? secp256k1 : Implementation of the standard of the same name which deals with ellyptic curves cryptography. bitprim-core : Basic Bitcoin utilities (encryption, wallet, math) to be reused by all projects. bitprim-consensus : An implementation of Satoshi's algorithm for agreeing on a course of action (achieving consensus) between nodes in a network. bitprim-database : Defines how to store and manipulate Bitcoin transactions. bitprim-network : P2P communication rules between nodes in the Bitcoin network. bitprim-protocol : Defines payload structure and lower level communication details. bitprim-blockchain : Interface for accessing the Bitcoin public ledger, a.k.a. blockchain, in which all transactions are linked between them. bitprim-node : The highest level of abstraction: a full node in the Bitcoin network; it can query the blockchain in many ways and insert blocks as well. Exploring the public interface for each package All packages follow the same structure: At the top level of their source tree, they have an include directory. Inside it, there's a single .hpp file which #includes all the public headers for the package for convenience. Then, inside the include directory, all the public headers for the library reside. These represent the public interface, i.e. those classes meant to be consumed by other packages or programs built on top of the package. For example, for bitprim-node : Taking a look inside full_node.hpp , we can see in its public methods how an instance of a full node can be consumed: There's a constructor which receives a configuration object (see configuration.hpp ), a destructor, and more interestingly, functions for starting, running, stopping and closing the node. Some have callbacks (start and run), which the user will have to implement to handle the associated events asynchronously. Examples of how to do this can be seen in Bitprim projects which use the node package: bitprim-client and bitprim-server ."
  },
  "content/developer_guide/introduction.html": {
    "href": "content/developer_guide/introduction.html",
    "title": "Introduction | Bitprim Documentation Site",
    "keywords": "Introduction Bitprim works as a cryptocurrency development platform with several programmable APIs: C++ ( https://github.com/bitprim/bitprim-node ) C ( https://github.com/bitprim/bitprim-node-cint ) C# ( https://github.com/bitprim/bitprim-cs ) Python ( https://github.com/bitprim/bitprim-py ) Javascript ( https://github.com/bitprim/bitprim-js ) Rust ( https://github.com/bitex-la/bitprim-rust ) Golang ( https://github.com/bitprim/bitprim-go ) Eiffel ( https://github.com/jvelilla/EiffelCryptocurrencyClient )"
  },
  "content/index.html": {
    "href": "content/index.html",
    "title": "Welcome to Bitprim | Bitprim Documentation Site",
    "keywords": "\"Bringing decentralized solutions to everyday life\" Welcome to Bitprim Bitprim is a multi-coin developing platform, working with multi-languages programming compatible with the Satoshi Client. Download: Github: https://github.com/bitprim Slack: bitprim.slack.com Email: info@bitprim.org The platform includes: 100% Satoshi Client Compatible Protocol Implementation Mining Engine Multi-Coin Bitcoin Cash (BCH) Bitcoin (BTC) Litecoin (LTC) RPC support C Interface C++ Interface Interfaces for Go, Python, Node, C#, Rust and Eiffel Full Rest API implementation, compatible with insight API"
  },
  "README.html": {
    "href": "README.html",
    "title": "Bitprim documentation | Bitprim Documentation Site",
    "keywords": "Bitprim documentation This repository contains the Bitprim project's documentation. To read it online please go to http://bitprim.readthedocs.io/en/latest/ How to collaborate The documentation is written in Markdown, and hosted in http://readthedocs.org . If you want to contribute fixing errors or adding new content, please fork the repository and open a Pull Request with the proposed changes. Additional Resources General GitHub documentation GitHub pull request documentation Forking a Repo Using Pull Requests"
  },
  "bitprim-cs/SharpCashAddr.html": {
    "href": "bitprim-cs/SharpCashAddr.html",
    "title": "Namespace SharpCashAddr | Bitprim Documentation Site",
    "keywords": "Namespace SharpCashAddr Classes CashAddrConversionException Converter"
  },
  "bitprim-cs/Bitprim.OutputPoint.html": {
    "href": "bitprim-cs/Bitprim.OutputPoint.html",
    "title": "Class OutputPoint | Bitprim Documentation Site",
    "keywords": "Class OutputPoint Transaction hash and index pair representing one of the transaction outputs. Inheritance Object OutputPoint Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class OutputPoint : IDisposable Constructors | Improve this Doc View Source OutputPoint() Create an empty output point. Declaration public OutputPoint() | Improve this Doc View Source OutputPoint(Byte[], UInt32) Create an output point from a hash and index pair. Declaration public OutputPoint(byte[] pointHash, UInt32 index) Parameters Type Name Description Byte [] pointHash UInt32 index Properties | Improve this Doc View Source Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Index Transaction index (zero-based). Declaration public UInt32 Index { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize()"
  },
  "bitprim-cs/Bitprim.OutputList.html": {
    "href": "bitprim-cs/Bitprim.OutputList.html",
    "title": "Class OutputList | Bitprim Documentation Site",
    "keywords": "Class OutputList Represents a list of Outputs Inheritance Object NativeReadableList < Output > NativeReadableWritableList < Output > OutputList Implements INativeList < Output > IEnumerable < Output > IDisposable Inherited Members NativeReadableWritableList<Output>.Add(Output) NativeReadableList<Output>.nativeInstance_ NativeReadableList<Output>.GetEnumerator() NativeReadableList<Output>.Dispose() NativeReadableList<Output>.Dispose(Boolean) NativeReadableList<Output>.Item[UInt64] NativeReadableList<Output>.Count NativeReadableList<Output>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class OutputList : NativeReadableWritableList<Output>, INativeList<Output>, IEnumerable<Output>, IDisposable Methods | Improve this Doc View Source AddElement(Output) Declaration protected override void AddElement(Output element) Parameters Type Name Description Output element Overrides Bitprim.NativeReadableWritableList<Bitprim.Output>.AddElement(Bitprim.Output) | Improve this Doc View Source CreateNativeList() Declaration protected override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeReadableWritableList<Bitprim.Output>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.Output>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.Output>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override Output GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description Output Overrides Bitprim.NativeReadableList<Bitprim.Output>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.NativeReadableList-1.html": {
    "href": "bitprim-cs/Bitprim.NativeReadableList-1.html",
    "title": "Class NativeReadableList<T> | Bitprim Documentation Site",
    "keywords": "Class NativeReadableList<T> Abstract class to represent read-only lists of native objects Inheritance Object NativeReadableList<T> HistoryCompactList GetAllAssetsAddressesDataList GetAssetsByAddressDataList GetAssetsDataList NativeReadableWritableList<T> StealthCompactList Implements INativeList <T> IEnumerable <T> IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public abstract class NativeReadableList<T> : object, INativeList<T>, IEnumerable<T>, IDisposable Type Parameters Name Description T Constructors | Improve this Doc View Source NativeReadableList() Declaration protected NativeReadableList() | Improve this Doc View Source NativeReadableList(IntPtr) Declaration protected NativeReadableList(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Fields | Improve this Doc View Source nativeInstance_ Declaration protected IntPtr nativeInstance_ Field Value Type Description IntPtr Properties | Improve this Doc View Source Count Returns element count Declaration public UInt64 Count { get; } Property Value Type Description UInt64 | Improve this Doc View Source Item[UInt64] Allow element random access (by index) Declaration public T this[UInt64 index] { get; } Parameters Type Name Description UInt64 index Zero-based index Property Value Type Description T | Improve this Doc View Source NativeInstance Declaration public IntPtr NativeInstance { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source DestroyNativeList() Declaration protected abstract void DestroyNativeList() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetCount() Declaration protected abstract UInt64 GetCount() Returns Type Description UInt64 | Improve this Doc View Source GetEnumerator() Enumerator of T Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected abstract T GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description T Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Native.html": {
    "href": "bitprim-cs/Bitprim.Native.html",
    "title": "Namespace Bitprim.Native | Bitprim Documentation Site",
    "keywords": "Namespace Bitprim.Native Structs hash_t"
  },
  "bitprim-cs/Bitprim.Native.Keoken.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.html",
    "title": "Namespace Bitprim.Native.Keoken | Bitprim Documentation Site",
    "keywords": "Namespace Bitprim.Native.Keoken Classes KeokenManagerNativeDelegates Delegates KeokenManagerNativeDelegates.KeokenStateDelegatedAssetIdExistsHandler KeokenManagerNativeDelegates.KeokenStateDelegatedCreateAssetHandler KeokenManagerNativeDelegates.KeokenStateDelegatedCreateBalanceEntryHandler KeokenManagerNativeDelegates.KeokenStateDelegatedGetAllAssetAddressesListHandler KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsByAddressHandler KeokenManagerNativeDelegates.KeokenStateDelegatedGetAssetsListHandler KeokenManagerNativeDelegates.KeokenStateDelegatedGetBalanceHandler KeokenManagerNativeDelegates.KeokenStateDelegatedSetInitialAssetIdHandler"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.html",
    "title": "Class KeokenManagerNativeDelegates | Bitprim Documentation Site",
    "keywords": "Class KeokenManagerNativeDelegates Inheritance Object KeokenManagerNativeDelegates Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public static class KeokenManagerNativeDelegates : object"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetAllAssetAddressesListHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedGetAllAssetAddressesListHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetAllAssetAddressesListHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedGetAllAssetAddressesListHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate IntPtr KeokenStateDelegatedGetAllAssetAddressesListHandler(IntPtr state); Parameters Type Name Description IntPtr state Returns Type Description IntPtr"
  },
  "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedCreateBalanceEntryHandler.html": {
    "href": "bitprim-cs/Bitprim.Native.Keoken.KeokenManagerNativeDelegates.KeokenStateDelegatedCreateBalanceEntryHandler.html",
    "title": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedCreateBalanceEntryHandler | Bitprim Documentation Site",
    "keywords": "Delegate KeokenManagerNativeDelegates.KeokenStateDelegatedCreateBalanceEntryHandler Namespace : Bitprim.Native.Keoken Assembly : bitprim-bch.dll Syntax public delegate void KeokenStateDelegatedCreateBalanceEntryHandler(IntPtr state, UInt32 asset_id, Int64 asset_amount, IntPtr source, IntPtr target, UInt64 block_height, hash_t txid); Parameters Type Name Description IntPtr state UInt32 asset_id Int64 asset_amount IntPtr source IntPtr target UInt64 block_height hash_t txid"
  },
  "bitprim-cs/Bitprim.GetTxPositionResult.html": {
    "href": "bitprim-cs/Bitprim.GetTxPositionResult.html",
    "title": "Struct GetTxPositionResult | Bitprim Documentation Site",
    "keywords": "Struct GetTxPositionResult Type used by GetTxDataResult. Has block information Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public struct GetTxPositionResult Properties | Improve this Doc View Source BlockHeight Block's Height Declaration public UInt64 BlockHeight { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source Index Transaction index inside a block Declaration public UInt64 Index { get; set; } Property Value Type Description UInt64"
  },
  "bitprim-cs/Bitprim.GetTxDataResult.html": {
    "href": "bitprim-cs/Bitprim.GetTxDataResult.html",
    "title": "Class GetTxDataResult | Bitprim Documentation Site",
    "keywords": "Class GetTxDataResult Return type for FetchTransactionAsync Inheritance Object GetTxDataResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class GetTxDataResult : IDisposable Properties | Improve this Doc View Source Tx The requested transaction Declaration public ITransaction Tx { get; set; } Property Value Type Description ITransaction | Improve this Doc View Source TxPosition Transaction position as a block height - index pair Declaration public GetTxPositionResult TxPosition { get; set; } Property Value Type Description GetTxPositionResult Methods | Improve this Doc View Source Dispose() Dispose method for resource cleanup Declaration public void Dispose()"
  },
  "bitprim-cs/Bitprim.GetBlockHashTimestampResult.html": {
    "href": "bitprim-cs/Bitprim.GetBlockHashTimestampResult.html",
    "title": "Class GetBlockHashTimestampResult | Bitprim Documentation Site",
    "keywords": "Class GetBlockHashTimestampResult Return type for FetchBlockByHeightHashTimestampAsync Inheritance Object GetBlockHashTimestampResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class GetBlockHashTimestampResult : object Properties | Improve this Doc View Source BlockHash Block's hash Declaration public byte[] BlockHash { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source BlockTimestamp Block's TimeStamp Declaration public DateTime BlockTimestamp { get; set; } Property Value Type Description DateTime"
  },
  "bitprim-cs/Bitprim.GetBlockDataResult-1.html": {
    "href": "bitprim-cs/Bitprim.GetBlockDataResult-1.html",
    "title": "Class GetBlockDataResult<TBlockData> | Bitprim Documentation Site",
    "keywords": "Class GetBlockDataResult<TBlockData> Contains block information Inheritance Object GetBlockDataResult<TBlockData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class GetBlockDataResult<TBlockData> : IDisposable where TBlockData : IDisposable Type Parameters Name Description TBlockData Specific block data type Fields | Improve this Doc View Source BlockHeight The block's height Declaration public UInt64 BlockHeight Field Value Type Description UInt64 Properties | Improve this Doc View Source BlockData Return the block's data Declaration public TBlockData BlockData { get; set; } Property Value Type Description TBlockData Methods | Improve this Doc View Source Dispose() Dispose method for resource cleanup Declaration public void Dispose()"
  },
  "bitprim-cs/Bitprim.Executor.TransactionHandler.html": {
    "href": "bitprim-cs/Bitprim.Executor.TransactionHandler.html",
    "title": "Delegate Executor.TransactionHandler | Bitprim Documentation Site",
    "keywords": "Delegate Executor.TransactionHandler Contains information about new transactions Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public delegate bool TransactionHandler(ErrorCode errorCode, Transaction newTx); Parameters Type Name Description ErrorCode errorCode Error code Transaction newTx The new transaction Returns Type Description Boolean"
  },
  "bitprim-cs/Bitprim.ErrorCode.html": {
    "href": "bitprim-cs/Bitprim.ErrorCode.html",
    "title": "Enum ErrorCode | Bitprim Documentation Site",
    "keywords": "Enum ErrorCode Error codes returned by the C API Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum ErrorCode : int Fields Name Description AcceptFailed Connection acceptance failed AddressBlocked Address blocked by policy AddressInUse Address already in use BadStream Bad data stream BlockEmbeddedSigopLimit Too many block embedded signature operations BlockInternalDoubleSpend Double spend internal to block BlockLegacySigopLimit Too many block legacy signature operations BlockNonFinal Block contains a non-final transaction BlockSizeLimit Block size limit exceeded BlockWeightLimit Block weight limit exceeded ChannelStopped Channel stopped ChannelTimeout Connection timed out CheckpointsFailed Block hash rejected by checkpoint CoinbaseHeightMismatch Block height mismatch in coinbase CoinbaseMaturity Immature coinbase spent CoinbaseTransaction Coinbase transaction disallowed in memory pool CoinbaseValueLimit Coinbase value too high Deprecated The operation is deprecated DirtyWitness Dirty witness DoubleSpend double spend of input DuplicateBlock Duplicate block DustyTransaction Output value too low EmptyBlock Block has no transactions EmptyTransaction Transaction inputs or outputs empty ExtraCoinbases More than one coinbase FileSystem File system error FirstNotCoinbase First transaction not a coinbase ForwardReference Transactions out of order FuturisticTimestamp Timestamp too far in the future IncorrectProofOfWork Proof of work does not match bits field IncorrectSignature Incorrect signature InsufficientFee Insufficient transaction fee InsufficientWork Insufficient work to reorganize InternalDuplicate Matching transaction hashes in block InvalidCoinbaseScriptSize Coinbase script too small or large InvalidOperationCount Invalid operation count InvalidPreviousBlock Previous block failed to validate InvalidProofOfWork Proof of work invalid InvalidPushDataSize Invalid push data size InvalidScript Invalid script InvalidScriptEmbed Invalid script embed InvalidScriptSize Invalid script size InvalidSignatureEncoding Invalid signature encoding InvalidSignatureLaxEncoding Invalid signature lax encoding InvalidStackScope Invalid stack scope InvalidStackSize Invalid stack size InvalidWitness Invalid witness InvalidWitnessCommitment Invalid witness commitment ListenFailed Incoming connection failed MerkleMismatch Merkle root mismatch MissingPreviousOutput Previous output not found NetworkUnreachable Unable to reach remote host NonStandard Non-standard transaction NotFound The resource not exist NotImplemented The operation isn't implemented OldVersionBlock Block version rejected at current height OpAbs OpAdd OpAdd1 OpBoolAnd OpBoolOr OpCheckLocktimeVerify1 OpCheckLocktimeVerify2 OpCheckLocktimeVerify3 OpCheckLocktimeVerify4 OpCheckLocktimeVerify5 OpCheckLocktimeVerify6 OpCheckMultisig OpCheckMultisigVerify1 OpCheckMultisigVerify2 OpCheckMultisigVerify3 OpCheckMultisigVerify4 OpCheckMultisigVerify5 OpCheckMultisigVerify6 OpCheckMultisigVerify7 OpCheckSequenceVerify1 OpCheckSequenceVerify2 OpCheckSequenceVerify3 OpCheckSequenceVerify4 OpCheckSequenceVerify5 OpCheckSequenceVerify6 OpCheckSequenceVerify7 OpCheckSig OpCheckSigVerify1 OpCodeSeperator OpDisabled OpDrop OpDrop2 OpDup OpDup2 OpDup3 OpElse OpEndIf OpEqual OpEqualVerify1 OpEqualVerify2 OperationFailed The operation failed OpFromAltStack OpGreaterThan OpGreaterThanOrEqual OpHash160 OpHash256 OpIf OpIfDup OpLessThan OpLessThanOrEqual OpMax OpMin OpNegate OpNip OpNonZero OpNot OpNotIf OpNumEqual OpNumEqualVerify1 OpNumEqualVerify2 OpNumNotEqual OpOver OpOver2 OpPick OpPushData OpPushSize OpReserved OpReturn OpRipemd160 OpRoll OpRot OpRot2 OpSha1 OpSha256 OpSize OpSub OpSub1 OpSwap OpSwap2 OpToAltStack OpTuck OpVerify1 OpVerify2 OpWithin OrphanBlock Missing block parent OrphanTransaction Transaction parent missing Oversubscribed Service oversubscribed PeerThrottling Unresponsive peer may be throttling PrematureValidation Transaction validation under checkpoint PreviousOutputNull Non-coinbase transaction has input with null previous output ResolveFailed Resolving hostname failed SequenceLocked Transaction currently locked ServiceStopped Service is stopped SpendExceedsValue Spend exceeds input values sum SpendOverflow Spend outside valid range StackFalse Error processing script StaleChain Blockchain too far behind StoreBlockDuplicate Block duplicate StoreBlockInvalidHeight Block out of order StoreBlockMissingParent Block missing parent Success The operation finished without errors TimestampTooEarly Block timestamp is too early TransactionEmbeddedSigopLimit Too many transaction embedded signature operations TransactionInternalDoubleSpend Double spend internal to transaction TransactionLegacySigopLimit Too many transaction legacy signature operations TransactionNonFinal Transaction currently non-final for next block TransactionSizeLimit Transaction size limit exceeded TransactionWeightLimit Transaction weight limit exceeded UnexpectedWitness Unexpected witness Unknown Unknown error UnspentDuplicate Matching transaction with unspent outputs"
  },
  "bitprim-cs/Bitprim.CurrencyType.html": {
    "href": "bitprim-cs/Bitprim.CurrencyType.html",
    "title": "Enum CurrencyType | Bitprim Documentation Site",
    "keywords": "Enum CurrencyType Represents the supported coins Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum CurrencyType : int Fields Name Description Bitcoin Bitcoin (BTC) BitcoinCash Bitcoint Cash (BCH) Litecoin Litecoin (LTC) None Default value"
  },
  "bitprim-cs/Bitprim.Chain.html": {
    "href": "bitprim-cs/Bitprim.Chain.html",
    "title": "Class Chain | Bitprim Documentation Site",
    "keywords": "Class Chain Represents the Bitcoin blockchain; meant to offer its different interfaces (query, mining, network) Inheritance Object Chain Implements IChain Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Chain : object, IChain Properties | Improve this Doc View Source IsStale Determine if the node is synchronized (i.e. has the latest copy of the blockchain/is at top height) Declaration public bool IsStale { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source FetchBlockByHashAsync(Byte[]) Given a block hash, retrieve the full block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<IBlock>>> FetchBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IBlock >>> | Improve this Doc View Source FetchBlockByHeightAsync(UInt64) Given a block height, retrieve the full block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<IBlock>>> FetchBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IBlock >>> | Improve this Doc View Source FetchBlockByHeightHashTimestampAsync(UInt64) Given a block height, retrieve only block hash and timestamp, asynchronously. Declaration public Task<ApiCallResult<GetBlockHashTimestampResult>> FetchBlockByHeightHashTimestampAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < ApiCallResult < GetBlockHashTimestampResult >> | Improve this Doc View Source FetchBlockHeaderByHashAsync(Byte[]) Given a block hash, get the header from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<IHeader>>> FetchBlockHeaderByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IHeader >>> | Improve this Doc View Source FetchBlockHeaderByHashTxSizesAsync(Byte[]) Given a block hash, retrieve block header, tx hashes and serialized block size, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockHeaderByHashTxSizeResult>> FetchBlockHeaderByHashTxSizesAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockHeaderByHashTxSizeResult >> | Improve this Doc View Source FetchBlockHeaderByHeightAsync(UInt64) Given a block height, get the header from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<IHeader>>> FetchBlockHeaderByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IHeader >>> | Improve this Doc View Source FetchBlockHeightAsync(Byte[]) Given a block hash, it queries the chain asynchronously for the block's height. Return right away and uses a callback to return the result. Declaration public Task<ApiCallResult<UInt64>> FetchBlockHeightAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32-byte array representation of the block hash. Identifies it univocally. Returns Type Description Task < ApiCallResult < UInt64 >> | Improve this Doc View Source FetchConfirmedTransactionsAsync(PaymentAddress, UInt64, UInt64) Get a list of tx ids for a given payment address (asynchronously). Duplicates are already filtered out. Declaration public Task<DisposableApiCallResult<INativeList<byte[]>>> FetchConfirmedTransactionsAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < INativeList < Byte []>>> | Improve this Doc View Source FetchHistoryAsync(PaymentAddress, UInt64, UInt64) Get a list of output points, values, and spends for a given payment address (asynchronously) Declaration public Task<DisposableApiCallResult<INativeList<IHistoryCompact>>> FetchHistoryAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < INativeList < IHistoryCompact >>> | Improve this Doc View Source FetchLastHeightAsync() Gets the height of the highest block in the local copy of the blockchain, asynchronously. Declaration public Task<ApiCallResult<UInt64>> FetchLastHeightAsync() Returns Type Description Task < ApiCallResult < UInt64 >> | Improve this Doc View Source FetchMerkleBlockByHashAsync(Byte[]) Given a block hash, get the merkle block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<IMerkleBlock>>> FetchMerkleBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IMerkleBlock >>> | Improve this Doc View Source FetchMerkleBlockByHeightAsync(UInt64) Given a block height, get the merkle block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<IMerkleBlock>>> FetchMerkleBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Desired block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < IMerkleBlock >>> | Improve this Doc View Source FetchSpendAsync(OutputPoint) Fetch the transaction input which spends the indicated output, asynchronously. Declaration public Task<ApiCallResult<IPoint>> FetchSpendAsync(OutputPoint outputPoint) Parameters Type Name Description OutputPoint outputPoint Tx hash and index pair where the output was spent. Returns Type Description Task < ApiCallResult < IPoint >> | Improve this Doc View Source FetchStealthAsync(Binary, UInt64) Get metadata on potential payment transactions by stealth filter. Given a filter and a height in the chain, it queries the chain for transactions matching the given filter. Declaration public Task<DisposableApiCallResult<INativeList<IStealthCompact>>> FetchStealthAsync(Binary filter, UInt64 fromHeight) Parameters Type Name Description Binary filter Must be at least 8 bits in length. example \"10101010\" UInt64 fromHeight Starting height in the chain to search for transactions Returns Type Description Task < DisposableApiCallResult < INativeList < IStealthCompact >>> | Improve this Doc View Source FetchTransactionAsync(Byte[], Boolean) Get a transaction by its hash, asynchronously. Declaration public Task<DisposableApiCallResult<GetTxDataResult>> FetchTransactionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True if the transaction must belong to a block Returns Type Description Task < DisposableApiCallResult < GetTxDataResult >> | Improve this Doc View Source FetchTransactionPositionAsync(Byte[], Boolean) Given a transaction hash, it fetches the height and position inside the block, asynchronously. Declaration public Task<ApiCallResult<GetTxPositionResult>> FetchTransactionPositionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True iif the transaction must belong to a block Returns Type Description Task < ApiCallResult < GetTxPositionResult >> | Improve this Doc View Source GetMempoolTransactions(PaymentAddress, Boolean) Declaration public INativeList<IMempoolTransaction> GetMempoolTransactions(PaymentAddress address, bool useTestnetRules) Parameters Type Name Description PaymentAddress address Boolean useTestnetRules Returns Type Description INativeList < IMempoolTransaction > | Improve this Doc View Source OrganizeBlockAsync(Block) Given a block, organize it (async). Declaration public Task<ErrorCode> OrganizeBlockAsync(Block block) Parameters Type Name Description Block block The block to organize Returns Type Description Task < ErrorCode > | Improve this Doc View Source OrganizeTransactionAsync(Transaction) Given a transaction, organize it (async). Declaration public Task<ErrorCode> OrganizeTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction The transaction to organize. Returns Type Description Task < ErrorCode > | Improve this Doc View Source ValidateTransactionAsync(Transaction) Determine if a transaction is valid for submission to the blockchain. Declaration public Task<ApiCallResult<string>> ValidateTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction Transaction to validate Returns Type Description Task < ApiCallResult < String >> Implements IChain"
  },
  "bitprim-cs/Bitprim.Block.html": {
    "href": "bitprim-cs/Bitprim.Block.html",
    "title": "Class Block | Bitprim Documentation Site",
    "keywords": "Class Block Represents a full Bitcoin blockchain block. Inheritance Object Block Implements IBlock IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Block : object, IBlock, IDisposable Constructors | Improve this Doc View Source Block(UInt32, String) Declaration public Block(UInt32 version, string hexString) Parameters Type Name Description UInt32 version String hexString Properties | Improve this Doc View Source Claim Sum of coinbase outputs. Declaration public UInt64 Claim { get; } Property Value Type Description UInt64 | Improve this Doc View Source Fees Miner fees included in the block's coinbase transaction. Declaration public UInt64 Fees { get; } Property Value Type Description UInt64 | Improve this Doc View Source Hash The block's hash as a 32 byte array. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source Header The block's header Declaration public IHeader Header { get; } Property Value Type Description IHeader | Improve this Doc View Source IsDistinctTransactionSet Returns true if and only if all transactions in the block have a unique hash (i.e. no duplicates) Declaration public bool IsDistinctTransactionSet { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExtraCoinbase Returns true if and only if there is more than one coinbase transaction in the block. Declaration public bool IsExtraCoinbase { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInternalDoubleSpend Returns true if and only if there is at least one double-spent transaction in this block Declaration public bool IsInternalDoubleSpend { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns true if and only if the block is valid Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValidMerkleRoot Returns true if and only if the generated Merkle root equals the header's Merkle root. Declaration public bool IsValidMerkleRoot { get; } Property Value Type Description Boolean | Improve this Doc View Source MerkleRoot The block's Merkle root, as a 32 byte array. Declaration public byte[] MerkleRoot { get; } Property Value Type Description Byte [] | Improve this Doc View Source Proof Amount of work done to mine the block Declaration public string Proof { get; } Property Value Type Description String | Improve this Doc View Source SignatureOperationsCount Amount of signature operations in the block. Declaration public UInt64 SignatureOperationsCount { get; } Property Value Type Description UInt64 | Improve this Doc View Source TransactionCount The total amount of transactions that the block contains. Declaration public UInt64 TransactionCount { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetBlockReward(UInt64) Reward = Subsidy + Fees, for the block at the given height. Declaration public UInt64 GetBlockReward(UInt64 height) Parameters Type Name Description UInt64 height Block height in the chain; identifies it univocally. Returns Type Description UInt64 UInt64 representation of the block's reward. | Improve this Doc View Source GetNthTransaction(UInt64) Given a position in the block, returns the corresponding transaction. Declaration public ITransaction GetNthTransaction(UInt64 n) Parameters Type Name Description UInt64 n Zero-based index Returns Type Description ITransaction Full transaction object | Improve this Doc View Source GetSerializedSize(UInt32) Block size in bytes. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version. Returns Type Description UInt64 UInt64 representation of the block size in bytes. | Improve this Doc View Source GetSignatureOperationsCount(Boolean) Amount of signature operations in the block. Declaration public UInt64 GetSignatureOperationsCount(bool bip16Active) Parameters Type Name Description Boolean bip16Active If and only if true, count bip16 active operations. Returns Type Description UInt64 The amount of signature operations in this block | Improve this Doc View Source GetSubsidy(UInt64) The block subsidy. It's the same value for all blocks. Declaration public static UInt64 GetSubsidy(UInt64 height) Parameters Type Name Description UInt64 height The block's height. It identifies it univocally. Returns Type Description UInt64 UInt64 representation of the block subsidy | Improve this Doc View Source GetTotalInputs(Boolean) The sum of all inputs of all transactions in the block. Declaration public UInt64 GetTotalInputs(bool withCoinbase) Parameters Type Name Description Boolean withCoinbase If and only if true, consider coinbase transactions. Returns Type Description UInt64 UInt64 representation of the sum | Improve this Doc View Source IsFinal(UInt64) Returns true if and only if every transaction in the block is final or not. Declaration public bool IsFinal(UInt64 height) Parameters Type Name Description UInt64 height Returns Type Description Boolean | Improve this Doc View Source IsValidCoinbaseClaim(UInt64) Given a block height, return true if and only if its coinbase claim is not higher than the deserved reward. Declaration public bool IsValidCoinbaseClaim(UInt64 height) Parameters Type Name Description UInt64 height The height which identifies the block to examine Returns Type Description Boolean True if and only if 1 if coinbase claim is not higher than the deserved reward. | Improve this Doc View Source IsValidCoinbaseScript(UInt64) Returns true if and only if the block's coinbase script is valid. Declaration public bool IsValidCoinbaseScript(UInt64 height) Parameters Type Name Description UInt64 height The block's height. Identifies it univocally. Returns Type Description Boolean True if and only if the block's coinbase script is valid. | Improve this Doc View Source ToData(Boolean) Raw block data. Declaration public byte[] ToData(bool wire) Parameters Type Name Description Boolean wire if and only if true, include data size at the beginning. Returns Type Description Byte [] Byte array with block data. Implements IBlock IDisposable"
  },
  "bitprim-cs/Bitprim.ApiCallResult-1.html": {
    "href": "bitprim-cs/Bitprim.ApiCallResult-1.html",
    "title": "Class ApiCallResult<TResultData> | Bitprim Documentation Site",
    "keywords": "Class ApiCallResult<TResultData> Represents a result of calling a native API method Inheritance Object ApiCallResult<TResultData> DisposableApiCallResult<TResultData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class ApiCallResult<TResultData> : object Type Parameters Name Description TResultData The Result's type Properties | Improve this Doc View Source ErrorCode Status code returned by native api Declaration public ErrorCode ErrorCode { get; set; } Property Value Type Description ErrorCode | Improve this Doc View Source Result The result of an API Method Declaration public TResultData Result { get; set; } Property Value Type Description TResultData"
  },
  "bitprim-cs/Bitprim.html": {
    "href": "bitprim-cs/Bitprim.html",
    "title": "Namespace Bitprim | Bitprim Documentation Site",
    "keywords": "Namespace Bitprim Classes ApiCallResult<TResultData> Represents a result of calling a native API method Binary Represents a binary filter. Block Represents a full Bitcoin blockchain block. BlockList Represents a list of blocks Chain Represents the Bitcoin blockchain; meant to offer its different interfaces (query, mining, network) CompactBlock BIP 512 representation of a block for reduced propagation bandwidth. DisposableApiCallResult<TResultData> Represents a disposable result of calling an API method. It's necessary to call Dispose when the result is not needed anymore Executor Controls the execution of the Bitprim bitcoin node. GetBlockDataResult<TBlockData> Contains block information GetBlockHashTimestampResult Return type for FetchBlockByHeightHashTimestampAsync GetBlockHeaderByHashTxSizeResult Return type for FetchBlockHeaderByHashTxSizesAsync GetTxDataResult Return type for FetchTransactionAsync HashList Header Represents a full Bitcoin blockchain block. HistoryCompact Output points, values, and spends for a payment address. HistoryCompactList List of output points, values, and spends for a given payment address Input Represents a Transaction input. InputList Represents a list of Inputs ManagedReadableList<T> MempoolTransaction Represents an unconfirmed transaction. MempoolTransactionList Represents a list of MempoolTransaction MerkleBlock Merkle tree representation of a blockchain block. NativeReadableList<T> Abstract class to represent read-only lists of native objects NativeReadableWritableList<T> Abstract class to represent lists of native objects NodeSettings Holds node settings Output Represents one of the outputs of a Transaction. OutputList Represents a list of Outputs OutputPoint Transaction hash and index pair representing one of the transaction outputs. PaymentAddress Represents a Bitcoin wallet address. Point Represents one of the transaction inputs. It's a transaction hash and index pair. Script Represents a transaction script. StealthCompact Stealth payment related data. StealthCompactList Transaction Represents a Bitcoin transaction. TransactionList Represents a list of Transactions Validations Helper class with utility methods Structs GetTxPositionResult Type used by GetTxDataResult. Has block information Interfaces IBlock IChain Blockchain abstract interface. IHeader IHistoryCompact IMempoolTransaction IMerkleBlock INativeList<T> IPoint IStealthCompact ITransaction Enums CurrencyType Represents the supported coins ErrorCode Error codes returned by the C API NetworkType Represents the network type (Mainnet, Testnet, Regtest) PointKind Defines output point kind (Value or Spend) Delegates Executor.BlockHandler Contains information about new blocks Executor.TransactionHandler Contains information about new transactions"
  },
  "bitprim-cs/Bitprim.Validations.html": {
    "href": "bitprim-cs/Bitprim.Validations.html",
    "title": "Class Validations | Bitprim Documentation Site",
    "keywords": "Class Validations Helper class with utility methods Inheritance Object Validations Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public static class Validations : object Methods | Improve this Doc View Source IsValidHash(String) Returns true iif hex represents a valid Bitcoin hash (i.e. 32 arbitrary bytes => 64 hex characters) Declaration public static bool IsValidHash(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Boolean True iif hex is a valid hash string | Improve this Doc View Source IsValidPaymentAddress(String) Check if the hex string represents a valid base58 address Declaration public static bool IsValidPaymentAddress(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Boolean True iif hex is a valid base 58 address"
  },
  "bitprim-cs/Bitprim.NetworkType.html": {
    "href": "bitprim-cs/Bitprim.NetworkType.html",
    "title": "Enum NetworkType | Bitprim Documentation Site",
    "keywords": "Enum NetworkType Represents the network type (Mainnet, Testnet, Regtest) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum NetworkType : int Fields Name Description Mainnet Main network None Default value Regtest Regression test network Testnet Test network"
  },
  "bitprim-cs/Bitprim.NativeReadableWritableList-1.html": {
    "href": "bitprim-cs/Bitprim.NativeReadableWritableList-1.html",
    "title": "Class NativeReadableWritableList<T> | Bitprim Documentation Site",
    "keywords": "Class NativeReadableWritableList<T> Abstract class to represent lists of native objects Inheritance Object NativeReadableList <T> NativeReadableWritableList<T> BlockList HashList InputList MempoolTransactionList OutputList TransactionList Implements INativeList <T> IEnumerable <T> IDisposable Inherited Members NativeReadableList<T>.nativeInstance_ NativeReadableList<T>.GetEnumerator() NativeReadableList<T>.Dispose() NativeReadableList<T>.Dispose(Boolean) NativeReadableList<T>.GetNthNativeElement(UInt64) NativeReadableList<T>.GetCount() NativeReadableList<T>.DestroyNativeList() NativeReadableList<T>.Item[UInt64] NativeReadableList<T>.Count NativeReadableList<T>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public abstract class NativeReadableWritableList<T> : NativeReadableList<T>, INativeList<T>, IEnumerable<T>, IDisposable Type Parameters Name Description T Constructors | Improve this Doc View Source NativeReadableWritableList() Declaration protected NativeReadableWritableList() | Improve this Doc View Source NativeReadableWritableList(IntPtr) Declaration protected NativeReadableWritableList(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Methods | Improve this Doc View Source Add(T) Element to add; it is added at the end of the list Declaration public void Add(T element) Parameters Type Name Description T element | Improve this Doc View Source AddElement(T) Declaration protected abstract void AddElement(T element) Parameters Type Name Description T element | Improve this Doc View Source CreateNativeList() Declaration protected abstract IntPtr CreateNativeList() Returns Type Description IntPtr Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.KeokenMemoryState.html": {
    "href": "bitprim-cs/Bitprim.Keoken.KeokenMemoryState.html",
    "title": "Class KeokenMemoryState | Bitprim Documentation Site",
    "keywords": "Class KeokenMemoryState Inheritance Object KeokenMemoryState Implements IKeokenState IDisposable Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class KeokenMemoryState : object, IKeokenState, IDisposable Constructors | Improve this Doc View Source KeokenMemoryState() Declaration public KeokenMemoryState() Properties | Improve this Doc View Source InitialAssetId Declaration public UInt32 InitialAssetId { set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source CreateAsset(String, Int64, PaymentAddress, UInt64, Byte[]) Declaration public void CreateAsset(string assetName, Int64 assetAmount, PaymentAddress owner, UInt64 blockHeight, byte[] txId) Parameters Type Name Description String assetName Int64 assetAmount PaymentAddress owner UInt64 blockHeight Byte [] txId | Improve this Doc View Source CreateBalanceEntry(UInt32, Int64, PaymentAddress, PaymentAddress, UInt64, Byte[]) Declaration public void CreateBalanceEntry(UInt32 assetId, Int64 assetAmount, PaymentAddress source, PaymentAddress target, UInt64 blockHeight, byte[] txId) Parameters Type Name Description UInt32 assetId Int64 assetAmount PaymentAddress source PaymentAddress target UInt64 blockHeight Byte [] txId | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetAllAssetAddresses() Declaration public INativeList<IGetAllAssetsAddressesData> GetAllAssetAddresses() Returns Type Description INativeList < IGetAllAssetsAddressesData > | Improve this Doc View Source GetAssets() Declaration public INativeList<IGetAssetsData> GetAssets() Returns Type Description INativeList < IGetAssetsData > | Improve this Doc View Source GetAssetsByAddress(PaymentAddress) Declaration public INativeList<IGetAssetsByAddressData> GetAssetsByAddress(PaymentAddress addr) Parameters Type Name Description PaymentAddress addr Returns Type Description INativeList < IGetAssetsByAddressData > | Improve this Doc View Source GetBalance(UInt32, PaymentAddress) Declaration public Int64 GetBalance(UInt32 asset_id, PaymentAddress addr) Parameters Type Name Description UInt32 asset_id PaymentAddress addr Returns Type Description Int64 | Improve this Doc View Source StateAssetIdExists(UInt32) Declaration public bool StateAssetIdExists(UInt32 id) Parameters Type Name Description UInt32 id Returns Type Description Boolean Implements IKeokenState IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.KeokenManager.html": {
    "href": "bitprim-cs/Bitprim.Keoken.KeokenManager.html",
    "title": "Class KeokenManager | Bitprim Documentation Site",
    "keywords": "Class KeokenManager TODO: Add docs Inheritance Object KeokenManager Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class KeokenManager : IDisposable Constructors | Improve this Doc View Source KeokenManager(IntPtr) Declaration public KeokenManager(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Properties | Improve this Doc View Source Initialized Declaration public bool Initialized { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ConfigureState() Declaration public void ConfigureState() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetAllAssetAddresses() Declaration public GetAllAssetsAddressesDataList GetAllAssetAddresses() Returns Type Description GetAllAssetsAddressesDataList | Improve this Doc View Source GetAssets() Declaration public GetAssetsDataList GetAssets() Returns Type Description GetAssetsDataList | Improve this Doc View Source GetAssetsByAddress(PaymentAddress) Declaration public GetAssetsByAddressDataList GetAssetsByAddress(PaymentAddress address) Parameters Type Name Description PaymentAddress address Returns Type Description GetAssetsByAddressDataList | Improve this Doc View Source InitializeFromBlockchain() Declaration public void InitializeFromBlockchain()"
  },
  "bitprim-cs/Bitprim.Keoken.IGetAssetsByAddressData.html": {
    "href": "bitprim-cs/Bitprim.Keoken.IGetAssetsByAddressData.html",
    "title": "Interface IGetAssetsByAddressData | Bitprim Documentation Site",
    "keywords": "Interface IGetAssetsByAddressData Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public interface IGetAssetsByAddressData : IDisposable Properties | Improve this Doc View Source Amount Declaration Int64 Amount { get; } Property Value Type Description Int64 | Improve this Doc View Source AssetCreator Declaration PaymentAddress AssetCreator { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetId Declaration UInt32 AssetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source AssetName Declaration string AssetName { get; } Property Value Type Description String"
  },
  "bitprim-cs/Bitprim.Keoken.IGetAllAssetsAddressesData.html": {
    "href": "bitprim-cs/Bitprim.Keoken.IGetAllAssetsAddressesData.html",
    "title": "Interface IGetAllAssetsAddressesData | Bitprim Documentation Site",
    "keywords": "Interface IGetAllAssetsAddressesData Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public interface IGetAllAssetsAddressesData : IDisposable Properties | Improve this Doc View Source Amount Declaration Int64 Amount { get; } Property Value Type Description Int64 | Improve this Doc View Source AmountOwner Declaration PaymentAddress AmountOwner { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetCreator Declaration PaymentAddress AssetCreator { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetId Declaration UInt32 AssetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source AssetName Declaration string AssetName { get; } Property Value Type Description String"
  },
  "bitprim-cs/Bitprim.Keoken.GetAssetsByAddressDataList.html": {
    "href": "bitprim-cs/Bitprim.Keoken.GetAssetsByAddressDataList.html",
    "title": "Class GetAssetsByAddressDataList | Bitprim Documentation Site",
    "keywords": "Class GetAssetsByAddressDataList Inheritance Object NativeReadableList < GetAssetsByAddressData > GetAssetsByAddressDataList Implements INativeList < GetAssetsByAddressData > IEnumerable < GetAssetsByAddressData > IDisposable Inherited Members NativeReadableList<GetAssetsByAddressData>.nativeInstance_ NativeReadableList<GetAssetsByAddressData>.GetEnumerator() NativeReadableList<GetAssetsByAddressData>.Dispose() NativeReadableList<GetAssetsByAddressData>.Dispose(Boolean) NativeReadableList<GetAssetsByAddressData>.Item[UInt64] NativeReadableList<GetAssetsByAddressData>.Count NativeReadableList<GetAssetsByAddressData>.NativeInstance Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class GetAssetsByAddressDataList : NativeReadableList<GetAssetsByAddressData>, INativeList<GetAssetsByAddressData>, IEnumerable<GetAssetsByAddressData>, IDisposable Methods | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAssetsByAddressData>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAssetsByAddressData>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override GetAssetsByAddressData GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description GetAssetsByAddressData Overrides Bitprim.NativeReadableList<Bitprim.Keoken.GetAssetsByAddressData>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Keoken.GetAssetsByAddressData.html": {
    "href": "bitprim-cs/Bitprim.Keoken.GetAssetsByAddressData.html",
    "title": "Class GetAssetsByAddressData | Bitprim Documentation Site",
    "keywords": "Class GetAssetsByAddressData TODO: Add docs Inheritance Object GetAssetsByAddressData Implements IGetAssetsByAddressData IDisposable Namespace : Bitprim.Keoken Assembly : bitprim-bch.dll Syntax public class GetAssetsByAddressData : object, IGetAssetsByAddressData, IDisposable Constructors | Improve this Doc View Source GetAssetsByAddressData(IntPtr) Declaration public GetAssetsByAddressData(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Properties | Improve this Doc View Source Amount Declaration public Int64 Amount { get; } Property Value Type Description Int64 | Improve this Doc View Source AssetCreator Declaration public PaymentAddress AssetCreator { get; } Property Value Type Description PaymentAddress | Improve this Doc View Source AssetId Declaration public UInt32 AssetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source AssetName Declaration public string AssetName { get; } Property Value Type Description String Methods | Improve this Doc View Source Dispose() Release resources Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements IGetAssetsByAddressData IDisposable"
  },
  "bitprim-cs/Bitprim.InputList.html": {
    "href": "bitprim-cs/Bitprim.InputList.html",
    "title": "Class InputList | Bitprim Documentation Site",
    "keywords": "Class InputList Represents a list of Inputs Inheritance Object NativeReadableList < Input > NativeReadableWritableList < Input > InputList Implements INativeList < Input > IEnumerable < Input > IDisposable Inherited Members NativeReadableWritableList<Input>.Add(Input) NativeReadableList<Input>.nativeInstance_ NativeReadableList<Input>.GetEnumerator() NativeReadableList<Input>.Dispose() NativeReadableList<Input>.Dispose(Boolean) NativeReadableList<Input>.Item[UInt64] NativeReadableList<Input>.Count NativeReadableList<Input>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class InputList : NativeReadableWritableList<Input>, INativeList<Input>, IEnumerable<Input>, IDisposable Methods | Improve this Doc View Source AddElement(Input) Declaration protected override void AddElement(Input element) Parameters Type Name Description Input element Overrides Bitprim.NativeReadableWritableList<Bitprim.Input>.AddElement(Bitprim.Input) | Improve this Doc View Source CreateNativeList() Declaration protected override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeReadableWritableList<Bitprim.Input>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.Input>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.Input>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override Input GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description Input Overrides Bitprim.NativeReadableList<Bitprim.Input>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Input.html": {
    "href": "bitprim-cs/Bitprim.Input.html",
    "title": "Class Input | Bitprim Documentation Site",
    "keywords": "Class Input Represents a Transaction input. Inheritance Object Input Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Input : IDisposable Constructors | Improve this Doc View Source Input() Create an empty input. Declaration public Input() | Improve this Doc View Source Input(Output, Script, UInt32) Create an input from a previous output, a script and a sequence number. Declaration public Input(Output previousOutput, Script script, UInt32 sequence) Parameters Type Name Description Output previousOutput The output to spend. Script script Input script. UInt32 sequence Zero-based, indexes this input in the input set. Properties | Improve this Doc View Source IsFinal Returns 1 iif sequence is equal to max_sequence. Declaration public bool IsFinal { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValid Returns false if and only if previous outputs or input script are invalid. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source PreviousOutput Returns a reference to the previous output, as an OutputPoint: a transaction hash and index pair. Declaration public OutputPoint PreviousOutput { get; } Property Value Type Description OutputPoint | Improve this Doc View Source Script The input's script. Declaration public Script Script { get; } Property Value Type Description Script | Improve this Doc View Source Sequence Zero-based index for the input in the transaction's input set. Declaration public UInt32 Sequence { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetSerializedSize(Boolean) Input size in bytes. Declaration public UInt64 GetSerializedSize(bool wire) Parameters Type Name Description Boolean wire Iif true, consider 4 extra bytes from wire field. Returns Type Description UInt64 Size in bytes. | Improve this Doc View Source GetSignatureOperationsCount(Boolean) Total amount of sigops (signature operations) in the input script. Declaration public UInt64 GetSignatureOperationsCount(bool bip16Active) Parameters Type Name Description Boolean bip16Active Iif true, count BIP 16 active sig ops Returns Type Description UInt64 Sigops count."
  },
  "bitprim-cs/Bitprim.HistoryCompact.html": {
    "href": "bitprim-cs/Bitprim.HistoryCompact.html",
    "title": "Class HistoryCompact | Bitprim Documentation Site",
    "keywords": "Class HistoryCompact Output points, values, and spends for a payment address. Inheritance Object HistoryCompact Implements IHistoryCompact IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HistoryCompact : object, IHistoryCompact, IDisposable Properties | Improve this Doc View Source Height Height of the block containing the Point. Declaration public UInt32 Height { get; } Property Value Type Description UInt32 | Improve this Doc View Source Point The point that identifies the History instance. Declaration public IPoint Point { get; } Property Value Type Description IPoint | Improve this Doc View Source PointKind Used for distinguishing between values and spends. Declaration public PointKind PointKind { get; } Property Value Type Description PointKind | Improve this Doc View Source ValueOrChecksum Varies depending on point_kind. Declaration public UInt64 ValueOrChecksum { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Dispose() Release resources Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements IHistoryCompact IDisposable"
  },
  "bitprim-cs/Bitprim.Header.html": {
    "href": "bitprim-cs/Bitprim.Header.html",
    "title": "Class Header | Bitprim Documentation Site",
    "keywords": "Class Header Represents a full Bitcoin blockchain block. Inheritance Object Header Implements IHeader IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Header : object, IHeader, IDisposable Properties | Improve this Doc View Source Bits Difficulty threshold. Declaration public UInt32 Bits { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Hash Block hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] | Improve this Doc View Source IsValid Returns true if and only if the header conforms to the Bitcoin protocol format. Declaration public bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Merkle Merkle root in 32 byte array format. Declaration public byte[] Merkle { get; } Property Value Type Description Byte [] | Improve this Doc View Source Nonce The nonce that allowed this block to be added to the blockchain. Declaration public UInt32 Nonce { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source PreviousBlockHash Hash belonging to the immediately previous block in the blockchain, as a 32 byte array. This is all zeros for the first block, a.k.a. Genesis. Declaration public byte[] PreviousBlockHash { get; } Property Value Type Description Byte [] | Improve this Doc View Source ProofString Hexadecimal string representation of the block's proof (which is a 256-bit number). Declaration public string ProofString { get; } Property Value Type Description String | Improve this Doc View Source Timestamp Block timestamp in UNIX Epoch format (seconds since January 1st 1970) Assume UTC 0. Declaration public UInt32 Timestamp { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Version Header protocol version. Declaration public UInt32 Version { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements IHeader IDisposable"
  },
  "bitprim-cs/Bitprim.HashList.html": {
    "href": "bitprim-cs/Bitprim.HashList.html",
    "title": "Class HashList | Bitprim Documentation Site",
    "keywords": "Class HashList Inheritance Object NativeReadableList < Byte []> NativeReadableWritableList < Byte []> HashList Implements INativeList < Byte []> IEnumerable < Byte []> IDisposable Inherited Members NativeReadableWritableList<Byte[]>.CreateNativeList() NativeReadableWritableList<Byte[]>.AddElement(Byte[]) NativeReadableWritableList<Byte[]>.Add(Byte[]) NativeReadableList<Byte[]>.nativeInstance_ NativeReadableList<Byte[]>.GetEnumerator() NativeReadableList<Byte[]>.Dispose() NativeReadableList<Byte[]>.Dispose(Boolean) NativeReadableList<Byte[]>.GetNthNativeElement(UInt64) NativeReadableList<Byte[]>.GetCount() NativeReadableList<Byte[]>.DestroyNativeList() NativeReadableList<Byte[]>.Item[UInt64] NativeReadableList<Byte[]>.Count NativeReadableList<Byte[]>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HashList : NativeReadableWritableList<byte[]>, INativeList<byte[]>, IEnumerable<byte[]>, IDisposable Methods | Improve this Doc View Source AddElement(Byte[]) Declaration protected override void AddElement(byte[] element) Parameters Type Name Description Byte [] element Overrides Bitprim.NativeReadableWritableList<System.Byte[]>.AddElement(System.Byte[]) | Improve this Doc View Source CreateNativeList() Declaration protected override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeReadableWritableList<System.Byte[]>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<System.Byte[]>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<System.Byte[]>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override byte[] GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description Byte [] Overrides Bitprim.NativeReadableList<System.Byte[]>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  },
  "bitprim-cs/Bitprim.Executor.BlockHandler.html": {
    "href": "bitprim-cs/Bitprim.Executor.BlockHandler.html",
    "title": "Delegate Executor.BlockHandler | Bitprim Documentation Site",
    "keywords": "Delegate Executor.BlockHandler Contains information about new blocks Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public delegate bool BlockHandler(ErrorCode errorCode, UInt64 height, BlockList incoming, BlockList outgoing); Parameters Type Name Description ErrorCode errorCode Error code UInt64 height Branch height BlockList incoming List of incoming blocks BlockList outgoing List of outgoing blocks Returns Type Description Boolean"
  },
  "bitprim-cs/Bitprim.BlockList.html": {
    "href": "bitprim-cs/Bitprim.BlockList.html",
    "title": "Class BlockList | Bitprim Documentation Site",
    "keywords": "Class BlockList Represents a list of blocks Inheritance Object NativeReadableList < Block > NativeReadableWritableList < Block > BlockList Implements INativeList < Block > IEnumerable < Block > IDisposable Inherited Members NativeReadableWritableList<Block>.Add(Block) NativeReadableList<Block>.nativeInstance_ NativeReadableList<Block>.GetEnumerator() NativeReadableList<Block>.Dispose() NativeReadableList<Block>.Dispose(Boolean) NativeReadableList<Block>.Item[UInt64] NativeReadableList<Block>.Count NativeReadableList<Block>.NativeInstance Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class BlockList : NativeReadableWritableList<Block>, INativeList<Block>, IEnumerable<Block>, IDisposable Methods | Improve this Doc View Source AddElement(Block) Declaration protected override void AddElement(Block element) Parameters Type Name Description Block element Overrides Bitprim.NativeReadableWritableList<Bitprim.Block>.AddElement(Bitprim.Block) | Improve this Doc View Source CreateNativeList() Declaration protected override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeReadableWritableList<Bitprim.Block>.CreateNativeList() | Improve this Doc View Source DestroyNativeList() Declaration protected override void DestroyNativeList() Overrides Bitprim.NativeReadableList<Bitprim.Block>.DestroyNativeList() | Improve this Doc View Source GetCount() Declaration protected override UInt64 GetCount() Returns Type Description UInt64 Overrides Bitprim.NativeReadableList<Bitprim.Block>.GetCount() | Improve this Doc View Source GetNthNativeElement(UInt64) Declaration protected override Block GetNthNativeElement(UInt64 n) Parameters Type Name Description UInt64 n Returns Type Description Block Overrides Bitprim.NativeReadableList<Bitprim.Block>.GetNthNativeElement(UInt64) Implements INativeList<T> IEnumerable<> IDisposable"
  }
}
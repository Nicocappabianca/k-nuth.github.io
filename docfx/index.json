{
  "articles/installation.html": {
    "href": "articles/installation.html",
    "title": "Installation Requirements | Bitprim Doc Site",
    "keywords": "Installation Requirements 64-bit machine. Conan package manager, version 1.4.0 or newer. See Conan Installation . Installation Procedure The Bitprim executables can be installed on Linux, macOS, FreeBSD, Windows and others. These binaries are pre-built for the most usual operating system/compiler combinations and hosted in an online repository. If there are no pre-built binaries for your platform, a build from source will be attempted. So, for any platform, an installation can be performed in 2 simple steps: Configure the Conan remote conan remote add bitprim https://api.bintray.com/conan/bitprim/bitprim Install the appropriate executable # For Bitcoin Cash conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=BCH # ... or (BCH is the default crypto) conan install bitprim-node-exe/0.10.2@bitprim/stable # For Bitcoin Legacy conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=BTC # For Litecoin conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=LTC Building from source Requirements In case there are no pre-built binaries for your platform, it is necessary to build from source code. In such a scenario, the following requirements must be added to the previous ones: C++11 Conforming Compiler. CMake building tool, version 3.4 or newer. Running the node In order to run the full node, you have to initialize the database and then run the node: Run the following to initialize the database: ./bn -i Finally, run the node: ./bn The above commands use the default configuration hardcoded in the executable. You can use a configuration file to customize the behavior of the node. In the bitprim-config repository you can find some example files. Initialize the database using a configuration file: ./bn -i -c <configuration file path> Run the node using a configuration file: ./bn -c <configuration file path> Advanced Installation Bitprim is a high performance node, so we have some options and pre-built packages tuned for several platforms. Specifically, you can choose your computer microarchitecture to download a pre-build executable compiled to take advantage of the instructions available in your processor. For example: # For Haswell microarchitecture and Bitcoin Cash currency conan install bitprim-node-exe/0.10.2@bitprim/stable -o currency=BCH -o microarchitecture=haswell So, you can manually choose the appropriate microarchitecture, some examples are: x86_64 , haswell , ivybridge , sandybridge , bulldozer , ... By default, if you do not specify any, the building system will select a base microarchitecture corresponding to your Instruction Set Architecture (ISA). For example, for Intel 80x86 , the x86_64 microarchitecture will be selected. Automatic Microarchitecture selection Our build system has the ability to automatically detect the microarchitecture of your processor. To do this, first, you have to install our pip package called cpuid . Our build system detects if this package is installed and in such case, makes use of it to detect the best possible executable for your processor. pip install cpuid conan install bitprim-node-exe/0.10.2@bitprim/stable"
  },
  "articles/introduction.html": {
    "href": "articles/introduction.html",
    "title": "Introduction | Bitprim Doc Site",
    "keywords": "Introduction Bitprim allows you to run a full Bitcoin Cash / Bitcoin / Litecoin node, with all four main features: Wallet Mining Full blockchain Routing Bitprim also works as a cryptocurrency development platform with several programmable APIs: C++ C C# Python Javascript Rust Golang ... and networking APIs: bitprim-insight: A Bitprim implementation of the Insight-API JSON-RPC Libbitcoin BS-BX protocol"
  },
  "articles/rpc.html": {
    "href": "articles/rpc.html",
    "title": "| Bitprim Doc Site",
    "keywords": "We are currently developing full RPC support, to be compatible with software that currently relies on other Bitcoin implementations. Currently we are able to respond to the following messages: getaddressbalance getaddresstxids getaddressdeltas getaddressutxos getblockhashes getaddressmempool getbestblockhash getblock getblockhash getblockchaininfo getblockheader getblockcount getblocktemplate getchaintips getdifficulty getinfo getmininginfo getrawtransaction getspentinfo validateaddress sendrawtransaction submitblock This allow us to successfully mine using our software."
  },
  "articles/releases_notes.html": {
    "href": "articles/releases_notes.html",
    "title": "Releases | Bitprim Doc Site",
    "keywords": "Releases Here is the list of bitprim's releases"
  },
  "api/Bitprim.GetBlockHashTimestampResult.html": {
    "href": "api/Bitprim.GetBlockHashTimestampResult.html",
    "title": "Class GetBlockHashTimestampResult | Bitprim Doc Site",
    "keywords": "Class GetBlockHashTimestampResult Inheritance Object GetBlockHashTimestampResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class GetBlockHashTimestampResult : object Properties BlockHash Declaration public byte[] BlockHash { get; set; } Property Value Type Description Byte [] BlockTimestamp Declaration public DateTime BlockTimestamp { get; set; } Property Value Type Description DateTime"
  },
  "api/Bitprim.OutputPoint.html": {
    "href": "api/Bitprim.OutputPoint.html",
    "title": "Class OutputPoint | Bitprim Doc Site",
    "keywords": "Class OutputPoint Transaction hash and index pair representing one of the transaction outputs. Inheritance Object OutputPoint Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class OutputPoint : IDisposable Constructors OutputPoint() Create an empty output point. Declaration public OutputPoint() OutputPoint(Byte[], UInt32) Create an output point from a hash and index pair. Declaration public OutputPoint(byte[] pointHash, UInt32 index) Parameters Type Name Description Byte [] pointHash UInt32 index Properties Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] Index Transaction index (zero-based). Declaration public UInt32 Index { get; } Property Value Type Description UInt32 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize()"
  },
  "api/Bitprim.HashList.html": {
    "href": "api/Bitprim.HashList.html",
    "title": "Class HashList | Bitprim Doc Site",
    "keywords": "Class HashList Inheritance Object NativeList < Byte []> HashList Implements IDisposable Inherited Members NativeList<Byte[]>.GetEnumerator() NativeList<Byte[]>.Dispose() NativeList<Byte[]>.Dispose(Boolean) NativeList<Byte[]>.CreateNativeList() NativeList<Byte[]>.GetNthNativeElement(UInt32) NativeList<Byte[]>.GetCount() NativeList<Byte[]>.AddElement(Byte[]) NativeList<Byte[]>.DestroyNativeList() NativeList<Byte[]>.Item[UInt32] NativeList<Byte[]>.Count NativeList<Byte[]>.Add(Byte[]) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HashList : NativeList<byte[]>, IDisposable Methods AddElement(Byte[]) Declaration public override void AddElement(byte[] element) Parameters Type Name Description Byte [] element Overrides Bitprim.NativeList<System.Byte[]>.AddElement(System.Byte[]) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<System.Byte[]>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<System.Byte[]>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<System.Byte[]>.GetCount() GetNthNativeElement(UInt32) Declaration public override byte[] GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Byte [] Overrides Bitprim.NativeList<System.Byte[]>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.BlockReader.html": {
    "href": "api/Bitprim.BlockReader.html",
    "title": "Class BlockReader | Bitprim Doc Site",
    "keywords": "Class BlockReader Allows user to read a specific set of blocks from the blockchain. Inheritance Object BlockReader Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class BlockReader : IDisposable Constructors BlockReader() Declaration public BlockReader() BlockReader(HashList, Byte[]) Declaration public BlockReader(HashList start, byte[] stop) Parameters Type Name Description HashList start Byte [] stop Properties IsValid Return true iif all blocks in the specified set are valid Declaration public bool IsValid { get; } Property Value Type Description Boolean StartHashes Get or set the hashes that have to be read in order to start reading. Declaration public HashList StartHashes { get; set; } Property Value Type Description HashList StopHash Get or set on which block to stop reading. Declaration public byte[] StopHash { get; set; } Property Value Type Description Byte [] Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetSerializedSize(UInt32) The sum of the sizes of the read blocks. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating block size. Returns Type Description UInt64 UInt64 representation of the sum Reset() Go back to the beginning of the block set. Declaration public void Reset()"
  },
  "api/Bitprim.PaymentAddress.html": {
    "href": "api/Bitprim.PaymentAddress.html",
    "title": "Class PaymentAddress | Bitprim Doc Site",
    "keywords": "Class PaymentAddress Represents a Bitcoin wallet address. Inheritance Object PaymentAddress Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class PaymentAddress : IDisposable Constructors PaymentAddress(String) Create an address from its hex string representation. Declaration public PaymentAddress(string hexString) Parameters Type Name Description String hexString Properties Encoded Human readable representation. Declaration public string Encoded { get; } Property Value Type Description String IsValid Returns true iif this is a valid Base58 address. Declaration public bool IsValid { get; } Property Value Type Description Boolean Version Address version. Declaration public byte Version { get; } Property Value Type Description Byte Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize()"
  },
  "api/Bitprim.MerkleBlock.html": {
    "href": "api/Bitprim.MerkleBlock.html",
    "title": "Class MerkleBlock | Bitprim Doc Site",
    "keywords": "Class MerkleBlock Merkle tree representation of a blockchain block. Inheritance Object MerkleBlock Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MerkleBlock : IDisposable Properties HashCount Transaction hashes list element count. Declaration public UInt64 HashCount { get; } Property Value Type Description UInt64 Header The block's header. Declaration public Header Header { get; } Property Value Type Description Header IsValid Returns true if and only if it the block contains txs hashes, and the header is valid. Declaration public bool IsValid { get; } Property Value Type Description Boolean TotalTransactionCount Amount of transactions inside the block. Declaration public UInt64 TotalTransactionCount { get; } Property Value Type Description UInt64 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetNthHash(Int32) Get the Nth transaction hash from the block. Declaration public byte[] GetNthHash(int n) Parameters Type Name Description Int32 n Zerp-based index. Returns Type Description Byte [] Transaction hash in 32 byte array format. GetSerializedSize(UInt32) Block size in bytes (as a Merkle block, not as a full block). Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating size. Returns Type Description UInt64 Size in bytes. Reset() Delete all the data inside the block. Declaration public void Reset()"
  },
  "api/Bitprim.DisposableApiCallResult-1.html": {
    "href": "api/Bitprim.DisposableApiCallResult-1.html",
    "title": "Class DisposableApiCallResult<TResultData> | Bitprim Doc Site",
    "keywords": "Class DisposableApiCallResult<TResultData> Inheritance Object DisposableApiCallResult<TResultData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class DisposableApiCallResult<TResultData> : IDisposable where TResultData : IDisposable Type Parameters Name Description TResultData Properties ErrorCode Declaration public ErrorCode ErrorCode { get; set; } Property Value Type Description ErrorCode Result Declaration public TResultData Result { get; set; } Property Value Type Description TResultData Methods Dispose() Declaration public void Dispose()"
  },
  "api/Bitprim.Logging.ILogProvider.html": {
    "href": "api/Bitprim.Logging.ILogProvider.html",
    "title": "Interface ILogProvider | Bitprim Doc Site",
    "keywords": "Interface ILogProvider Represents a way to get a Bitprim.Logging.ILog Namespace : Bitprim.Logging Assembly : bitprim-bch.dll Syntax public interface ILogProvider Methods GetLogger(String) Gets the specified named logger. Declaration Logger GetLogger(string name) Parameters Type Name Description String name Name of the logger. Returns Type Description Logger The logger reference. OpenMappedContext(String, Object, Boolean) Opens a mapped diagnostics context. Not supported in EntLib logging. Declaration IDisposable OpenMappedContext(string key, object value, bool destructure = false) Parameters Type Name Description String key A key. Object value A value. Boolean destructure Returns Type Description IDisposable A disposable that when disposed removes the map from the context. OpenNestedContext(String) Opens a nested diagnostics context. Not supported in EntLib logging. Declaration IDisposable OpenNestedContext(string message) Parameters Type Name Description String message The message to add to the diagnostics context. Returns Type Description IDisposable A disposable that when disposed removes the message from the context."
  },
  "api/Bitprim.BlockList.html": {
    "href": "api/Bitprim.BlockList.html",
    "title": "Class BlockList | Bitprim Doc Site",
    "keywords": "Class BlockList Inheritance Object NativeList < Block > BlockList Implements IDisposable Inherited Members NativeList<Block>.GetEnumerator() NativeList<Block>.Dispose() NativeList<Block>.Dispose(Boolean) NativeList<Block>.Item[UInt32] NativeList<Block>.Count NativeList<Block>.Add(Block) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class BlockList : NativeList<Block>, IDisposable Methods AddElement(Block) Declaration public override void AddElement(Block element) Parameters Type Name Description Block element Overrides Bitprim.NativeList<Bitprim.Block>.AddElement(Bitprim.Block) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Block>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Block>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Block>.GetCount() GetNthNativeElement(UInt32) Declaration public override Block GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Block Overrides Bitprim.NativeList<Bitprim.Block>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.BlockIndexList.html": {
    "href": "api/Bitprim.BlockIndexList.html",
    "title": "Class BlockIndexList | Bitprim Doc Site",
    "keywords": "Class BlockIndexList Inheritance Object NativeList < UInt32 > BlockIndexList Implements IDisposable Inherited Members NativeList<UInt32>.GetEnumerator() NativeList<UInt32>.Dispose() NativeList<UInt32>.Dispose(Boolean) NativeList<UInt32>.Item[UInt32] NativeList<UInt32>.Count NativeList<UInt32>.Add(UInt32) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class BlockIndexList : NativeList<uint>, IDisposable Methods AddElement(UInt32) Declaration public override void AddElement(uint element) Parameters Type Name Description UInt32 element Overrides Bitprim.NativeList<System.UInt32>.AddElement(System.UInt32) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<System.UInt32>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<System.UInt32>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<System.UInt32>.GetCount() GetNthNativeElement(UInt32) Declaration public override uint GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description UInt32 Overrides Bitprim.NativeList<System.UInt32>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.Script.html": {
    "href": "api/Bitprim.Script.html",
    "title": "Class Script | Bitprim Doc Site",
    "keywords": "Class Script Represents a transaction script. Inheritance Object Script Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Script : IDisposable Properties IsValid All script bytes are valid under some circumstance (e.g. coinbase). Declaration public bool IsValid { get; } Property Value Type Description Boolean OperationsAreValid Script validity is independent of individual operation validity. Operations are considered invalid if there is a trailing invalid/default op or if a push op has a size mismatch. Declaration public bool OperationsAreValid { get; } Property Value Type Description Boolean SatoshiContentSize Size in bytes. Declaration public UInt64 SatoshiContentSize { get; } Property Value Type Description UInt64 Type Script type Declaration public string Type { get; } Property Value Type Description String Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetEmbeddedSigOps(Script) Count the sigops in the embedded script using BIP16 rules. Declaration public UInt64 GetEmbeddedSigOps(Script prevOutScript) Parameters Type Name Description Script prevOutScript Reference to previous output script. Returns Type Description UInt64 Embedded sigops count. GetSigOps(Boolean) Amount of signature operations in the script. Declaration public UInt64 GetSigOps(bool embedded) Parameters Type Name Description Boolean embedded Iif true, consider this an embedded script. Returns Type Description UInt64 Sigops count. ToData(Boolean) Raw script data Declaration public byte[] ToData(bool prefix) Parameters Type Name Description Boolean prefix Tells whether to include script size in data Returns Type Description Byte [] Byte array with script data ToString(UInt32) Translate operations in the script to a string. Declaration public string ToString(UInt32 activeForks) Parameters Type Name Description UInt32 activeForks Tells which rule is active. Returns Type Description String Human readable script."
  },
  "api/Bitprim.InputList.html": {
    "href": "api/Bitprim.InputList.html",
    "title": "Class InputList | Bitprim Doc Site",
    "keywords": "Class InputList Inheritance Object NativeList < Input > InputList Implements IDisposable Inherited Members NativeList<Input>.GetEnumerator() NativeList<Input>.Dispose() NativeList<Input>.Dispose(Boolean) NativeList<Input>.Item[UInt32] NativeList<Input>.Count NativeList<Input>.Add(Input) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class InputList : NativeList<Input>, IDisposable Methods AddElement(Input) Declaration public override void AddElement(Input element) Parameters Type Name Description Input element Overrides Bitprim.NativeList<Bitprim.Input>.AddElement(Bitprim.Input) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Input>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Input>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Input>.GetCount() GetNthNativeElement(UInt32) Declaration public override Input GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Input Overrides Bitprim.NativeList<Bitprim.Input>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.HistoryCompactList.html": {
    "href": "api/Bitprim.HistoryCompactList.html",
    "title": "Class HistoryCompactList | Bitprim Doc Site",
    "keywords": "Class HistoryCompactList Inheritance Object NativeList < HistoryCompact > HistoryCompactList Implements IDisposable Inherited Members NativeList<HistoryCompact>.GetEnumerator() NativeList<HistoryCompact>.Dispose() NativeList<HistoryCompact>.Dispose(Boolean) NativeList<HistoryCompact>.Item[UInt32] NativeList<HistoryCompact>.Count NativeList<HistoryCompact>.Add(HistoryCompact) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HistoryCompactList : NativeList<HistoryCompact>, IDisposable Methods AddElement(HistoryCompact) Declaration public override void AddElement(HistoryCompact element) Parameters Type Name Description HistoryCompact element Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.AddElement(Bitprim.HistoryCompact) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.GetCount() GetNthNativeElement(UInt32) Declaration public override HistoryCompact GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description HistoryCompact Overrides Bitprim.NativeList<Bitprim.HistoryCompact>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.NodeSettings.html": {
    "href": "api/Bitprim.NodeSettings.html",
    "title": "Class NodeSettings | Bitprim Doc Site",
    "keywords": "Class NodeSettings Inheritance Object NodeSettings Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class NodeSettings : object Properties CurrencyType Declaration public static CurrencyType CurrencyType { get; } Property Value Type Description CurrencyType"
  },
  "api/Bitprim.Logging.Logger.html": {
    "href": "api/Bitprim.Logging.Logger.html",
    "title": "Delegate Logger | Bitprim Doc Site",
    "keywords": "Delegate Logger Namespace : Bitprim.Logging Assembly : bitprim-bch.dll Syntax public delegate bool Logger(LogLevel logLevel, Func<string> messageFunc, Exception exception = null, params object[] formatParameters); Parameters Type Name Description LogLevel logLevel Func < String > messageFunc Exception exception Object [] formatParameters Returns Type Description Boolean"
  },
  "api/Bitprim.Logging.LogLevel.html": {
    "href": "api/Bitprim.Logging.LogLevel.html",
    "title": "Enum LogLevel | Bitprim Doc Site",
    "keywords": "Enum LogLevel The log level. Namespace : Bitprim.Logging Assembly : bitprim-bch.dll Syntax public enum LogLevel : int Fields Name Description Debug Error Fatal Info Trace Warn"
  },
  "api/Bitprim.CurrencyType.html": {
    "href": "api/Bitprim.CurrencyType.html",
    "title": "Enum CurrencyType | Bitprim Doc Site",
    "keywords": "Enum CurrencyType Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum CurrencyType : int Fields Name Description Bitcoin BitcoinCash Litecoin None"
  },
  "api/Bitprim.ErrorCode.html": {
    "href": "api/Bitprim.ErrorCode.html",
    "title": "Enum ErrorCode | Bitprim Doc Site",
    "keywords": "Enum ErrorCode Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum ErrorCode : int Fields Name Description AcceptFailed AddressBlocked AddressInUse BadStream BlockEmbeddedSigopLimit BlockInternalDoubleSpend BlockLegacySigopLimit BlockNonFinal BlockSizeLimit ChannelStopped ChannelTimeout CheckpointsFailed CoinbaseHeightMismatch CoinbaseMaturity CoinbaseTransaction CoinbaseValueLimit Deprecated DoubleSpend DuplicateBlock DustyTransaction EmptyBlock EmptyTransaction ExtraCoinbases FileSystem FirstNotCoinbase FuturisticTimestamp IncorrectProofOfWork IncorrectSignature InsufficientFee InsufficientWork InternalDuplicate InvalidCoinbaseScriptSize InvalidOperationCount InvalidPreviousBlock InvalidProofOfWork InvalidPushDataSize InvalidScript InvalidScriptEmbed InvalidScriptSize InvalidSignatureEncoding invalidSignatureLaxEncoding InvalidStackScope InvalidStackSize ListenFailed MerkleMismatch MissingPreviousOutput NetworkUnreachable NonStandard NotFound NotImplemented OldVersionBlock OpAbs OpAdd OpAdd1 OpBoolAnd OpBoolOr OpCheckLocktimeVerify1 OpCheckLocktimeVerify2 OpCheckLocktimeVerify3 OpCheckLocktimeVerify4 OpCheckLocktimeVerify5 OpCheckLocktimeVerify6 OpCheckMultisig OpCheckMultisigVerify1 OpCheckMultisigVerify2 OpCheckMultisigVerify3 OpCheckMultisigVerify4 OpCheckMultisigVerify5 OpCheckMultisigVerify6 OpCheckMultisigVerify7 OpCheckSequenceVerify1 OpCheckSequenceVerify2 OpCheckSequenceVerify3 OpCheckSequenceVerify4 OpCheckSequenceVerify5 OpCheckSequenceVerify6 OpCheckSequenceVerify7 OpCheckSig OpCheckSigVerify1 OpCodeSeperator OpDisabled OpDrop OpDrop2 OpDup OpDup2 OpDup3 OpElse OpEndIf OpEqual OpEqualVerify1 OpEqualVerify2 OperationFailed OpFromAltStack OpGreaterThan OpGreaterThanOrEqual OpHash160 OpHash256 OpIf OpIfDup OpLessThan OpLessThanOrEqual OpMax OpMin OpNegate OpNip OpNonZero OpNot OpNotIf OpNumEqual OpNumEqualVerify1 OpNumEqualVerify2 OpNumNotEqual OpOver OpOver2 OpPick OpPushData OpPushSize OpReserved OpReturn OpRipemd160 OpRoll OpRot OpRot2 OpSha1 OpSha256 OpSize OpSub OpSub1 OpSwap OpSwap2 OpToAltStack OpTuck OpVerify1 OpVerify2 OpWithin OrphanBlock OrphanTransaction Oversubscribed PeerThrottling PrematureValidation PreviousOutputNull ResolveFailed SequenceLocked ServiceStopped SpendExceedsValue SpendOverflow StackFalse StaleChain StoreBlockDuplicate StoreBlockInvalidHeight StoreBlockMissingParent Success TimestampTooEarly TransactionEmbeddedSigopLimit TransactionInternalDoubleSpend TransactionLegacySigopLimit TransactionNonFinal TransactionSizeLimit Unknown UnspentDuplicate"
  },
  "api/Bitprim.HistoryCompact.html": {
    "href": "api/Bitprim.HistoryCompact.html",
    "title": "Class HistoryCompact | Bitprim Doc Site",
    "keywords": "Class HistoryCompact Output points, values, and spends for a payment address. Inheritance Object HistoryCompact Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HistoryCompact : IDisposable Properties Height Height of the block containing the Point. Declaration public UInt32 Height { get; } Property Value Type Description UInt32 Point The point that identifies the History instance. Declaration public Point Point { get; } Property Value Type Description Point PointKind Used for distinguishing between values and spends. Declaration public PointKind PointKind { get; } Property Value Type Description PointKind ValueOrChecksum Varies depending on point_kind. Declaration public UInt64 ValueOrChecksum { get; } Property Value Type Description UInt64 Methods Dispose() Release resources Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize()"
  },
  "api/Bitprim.StealthCompactList.html": {
    "href": "api/Bitprim.StealthCompactList.html",
    "title": "Class StealthCompactList | Bitprim Doc Site",
    "keywords": "Class StealthCompactList Inheritance Object NativeList < StealthCompact > StealthCompactList Implements IDisposable Inherited Members NativeList<StealthCompact>.GetEnumerator() NativeList<StealthCompact>.Dispose() NativeList<StealthCompact>.Dispose(Boolean) NativeList<StealthCompact>.Item[UInt32] NativeList<StealthCompact>.Count NativeList<StealthCompact>.Add(StealthCompact) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class StealthCompactList : NativeList<StealthCompact>, IDisposable Methods AddElement(StealthCompact) Declaration public override void AddElement(StealthCompact element) Parameters Type Name Description StealthCompact element Overrides Bitprim.NativeList<Bitprim.StealthCompact>.AddElement(Bitprim.StealthCompact) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.StealthCompact>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.StealthCompact>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.StealthCompact>.GetCount() GetNthNativeElement(UInt32) Declaration public override StealthCompact GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description StealthCompact Overrides Bitprim.NativeList<Bitprim.StealthCompact>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.Transaction.html": {
    "href": "api/Bitprim.Transaction.html",
    "title": "Class Transaction | Bitprim Doc Site",
    "keywords": "Class Transaction Represents a Bitcoin transaction. Inheritance Object Transaction Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Transaction : IDisposable Constructors Transaction() Create an empty tramsaction. Declaration public Transaction() Transaction(UInt32, String) Create a transaction from its binary hex representation. Declaration public Transaction(UInt32 version, string hexString) Parameters Type Name Description UInt32 version Transaction protocol version. String hexString Raw transaction in hex Transaction(UInt32, UInt32, InputList, OutputList) Create a transaction from its version, locktime, inputs and outputs (all its data). Declaration public Transaction(UInt32 version, UInt32 locktime, InputList inputs, OutputList outputs) Parameters Type Name Description UInt32 version Transaction protocol version. UInt32 locktime Transaction locktime. InputList inputs A list with all the transaction inputs. OutputList outputs A list with all the transaction outputs. Properties Fees Fees to pay to the winning miner. Declaration public UInt64 Fees { get; } Property Value Type Description UInt64 Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] Inputs A list with all the transaction inputs. Declaration public InputList Inputs { get; } Property Value Type Description InputList IsCoinbase Returns true if and only if this is a coinbase transaction (i.e. generates new coins). Declaration public bool IsCoinbase { get; } Property Value Type Description Boolean IsLocktimeConflict Returns true if and only if the transaction is locked and every input is final, false otherwise. Declaration public bool IsLocktimeConflict { get; } Property Value Type Description Boolean IsMissingPreviousOutputs Returns true if and only if at least one of the previous outputs is invalid, false otherwise. Declaration public bool IsMissingPreviousOutputs { get; } Property Value Type Description Boolean IsNullNonCoinbase Return true if and only if the transaction is not coinbase and has a null previous output, false otherwise. Declaration public bool IsNullNonCoinbase { get; } Property Value Type Description Boolean IsOversizeCoinbase Returns true if the transaction is coinbase and has an invalid script size on its first input. Declaration public bool IsOversizeCoinbase { get; } Property Value Type Description Boolean IsOverspent Returns true if transaction is not a coinbase, and the sum of its outputs is higher than the sum of its inputs, false otherwise. Declaration public bool IsOverspent { get; } Property Value Type Description Boolean IsValid Returns true if and only if this transaction is valid according to the protocol. Declaration public bool IsValid { get; } Property Value Type Description Boolean Locktime Transaction locktime. Declaration public UInt32 Locktime { get; } Property Value Type Description UInt32 Outputs A list with all the transaction outputs. Declaration public OutputList Outputs { get; } Property Value Type Description OutputList SignatureOperations Amount of signature operations in the transaction. Declaration public UInt64 SignatureOperations { get; } Property Value Type Description UInt64 TotalInputValue Sum of every input value in the transaction. Declaration public UInt64 TotalInputValue { get; } Property Value Type Description UInt64 TotalOutputValue Sum of every output value in the transaction. Declaration public UInt64 TotalOutputValue { get; } Property Value Type Description UInt64 Version Transaction protocol version. Declaration public UInt32 Version { get; set; } Property Value Type Description UInt32 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetHashBySigHashType(UInt32) 32 bytes transaction hash + 4 bytes signature hash type Declaration public byte[] GetHashBySigHashType(UInt32 sigHashType) Parameters Type Name Description UInt32 sigHashType Sighash type. Returns Type Description Byte [] Hash and sighash type. GetSerializedSize(Boolean) Transaction size in bytes. Declaration public UInt64 GetSerializedSize(bool wire = true) Parameters Type Name Description Boolean wire If and only if true, size will include size of 'uint32' for storing spender output height Returns Type Description UInt64 Size in bytes. GetSignatureOperationsBip16Active(Boolean) Amount of signature operations in the transactions. Declaration public UInt64 GetSignatureOperationsBip16Active(bool bip16Active) Parameters Type Name Description Boolean bip16Active True if and only if BIP16 is active, false otherwise. Returns Type Description UInt64 IsDoubleSpend(Boolean) Returns true if at least one of the previous outputs was already spent, false otherwise. Declaration public bool IsDoubleSpend(bool includeUnconfirmed) Parameters Type Name Description Boolean includeUnconfirmed Iif true, consider unconfirmed transactions. Returns Type Description Boolean True if and only if transaction is double spend. IsFinal(UInt64, UInt32) Returns true if and only if the transaction is final, false otherwise. Declaration public bool IsFinal(UInt64 blockHeight, UInt32 blockTime) Parameters Type Name Description UInt64 blockHeight UInt32 blockTime Returns Type Description Boolean IsImmature(UInt64) Returns true if and only if at least one of the inputs is not mature, false otherwise. Declaration public bool IsImmature(UInt64 targetHeight) Parameters Type Name Description UInt64 targetHeight Returns Type Description Boolean ToData(Boolean) Raw transaction data. Declaration public byte[] ToData(bool wire) Parameters Type Name Description Boolean wire Iif true, include data size at the beginning. Returns Type Description Byte [] Byte array with transaction data."
  },
  "api/Bitprim.CompactBlock.html": {
    "href": "api/Bitprim.CompactBlock.html",
    "title": "Class CompactBlock | Bitprim Doc Site",
    "keywords": "Class CompactBlock TODO: Omit from docs (not implemented yet) BIP 512 representation of a block for reduced propagation bandwidth. Inheritance Object CompactBlock Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class CompactBlock : IDisposable Properties IsValid Returns true iif this is a valid compact representation of a block (as per BIP 512). Declaration public bool IsValid { get; } Property Value Type Description Boolean Nonce Block nonce (i.e. value which makes hash start with leading zeroes), as a 64-bit unsigned integer. Declaration public UInt64 Nonce { get; } Property Value Type Description UInt64 TransactionCount Amount of transactions that belong to the block. Declaration public UInt64 TransactionCount { get; } Property Value Type Description UInt64 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetNthTransaction(UInt64) Get the block's nth transaction, synchronously. Declaration public Transaction GetNthTransaction(UInt64 n) Parameters Type Name Description UInt64 n Zero-based index Returns Type Description Transaction Full transaction object GetSerializedSize(UInt32) Get the compact block's serialized size. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating size. Returns Type Description UInt64 Size in bytes. Reset() TODO: Document Declaration public void Reset()"
  },
  "api/Bitprim.Logging.html": {
    "href": "api/Bitprim.Logging.html",
    "title": "Namespace Bitprim.Logging | Bitprim Doc Site",
    "keywords": "Namespace Bitprim.Logging Classes LogProvider Provides a mechanism to create instances of Bitprim.Logging.ILog objects. Interfaces ILogProvider Represents a way to get a Bitprim.Logging.ILog Enums LogLevel The log level. Delegates Logger"
  },
  "api/Bitprim.Executor.html": {
    "href": "api/Bitprim.Executor.html",
    "title": "Class Executor | Bitprim Doc Site",
    "keywords": "Class Executor Controls the execution of the Bitprim bitcoin node. Inheritance Object Executor Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Executor : IDisposable Constructors Executor(String) Create executor. Does not init database or start execution yet. Declaration public Executor(string configFile) Parameters Type Name Description String configFile Path to configuration file. Executor(String, IntPtr, IntPtr) Create executor. Does not init database or start execution yet. Declaration public Executor(string configFile, IntPtr stdOut, IntPtr stdErr) Parameters Type Name Description String configFile Path to configuration file. IntPtr stdOut Handle for redirecting standard output. IntPtr stdErr Handle for redirecting standard output. Properties Chain The node's query interface. Will be null until node starts running (i.e. Run or RunWait succeeded) Declaration public Chain Chain { get; } Property Value Type Description Chain IsLoadConfigValid Declaration public bool IsLoadConfigValid { get; } Property Value Type Description Boolean IsStopped Declaration public bool IsStopped { get; } Property Value Type Description Boolean NetworkType The node's network. Won't be valid until node starts running (i.e. Run or RunWait succeeded) Declaration public NetworkType NetworkType { get; } Property Value Type Description NetworkType UseTestnetRules Returns true iif the current network is a testnet. Declaration public bool UseTestnetRules { get; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() InitAndRunAsync() Initialize if necessary and starts running the node; blockchain starts synchronizing (downloading). The call returns right away, and the handler is invoked when the node actually starts running. Declaration public Task<int> InitAndRunAsync() Returns Type Description Task < Int32 > Error code (0 = success) InitChain() Initialize the local dabatase structure. Declaration public bool InitChain() Returns Type Description Boolean True iif local chain init succeeded RunAsync() Starts running the node; blockchain starts synchronizing (downloading). The call returns right away, and the handler is invoked when the node actually starts running. Declaration public Task<int> RunAsync() Returns Type Description Task < Int32 > Error code (0 = success) Stop() Stops the node; that includes all activies, such as synchronization and networking. Declaration public void Stop() SubscribeToBlockChain(Executor.BlockHandler) Be notified (called back) when the local copy of the blockchain is reorganized. Declaration public void SubscribeToBlockChain(Executor.BlockHandler handler) Parameters Type Name Description Executor.BlockHandler handler Callback which will be called when blocks are added or removed. The callback returns 3 parameters: Height (UInt64): The chain height at which reorganization takes place Incoming (Blocklist): Incoming blocks (added to the blockchain). Outgoing (Blocklist): Outgoing blocks (removed from the blockchain). SubscribeToTransaction(Executor.TransactionHandler) Be notified (called back) when the local copy of the blockchain is updated at the transaction level. Declaration public void SubscribeToTransaction(Executor.TransactionHandler handler) Parameters Type Name Description Executor.TransactionHandler handler Callback which will be called when a transaction is added."
  },
  "api/Bitprim.Point.html": {
    "href": "api/Bitprim.Point.html",
    "title": "Class Point | Bitprim Doc Site",
    "keywords": "Class Point Represents one of the transaction inputs. It's a transaction hash and index pair. Inheritance Object Point Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Point : object Properties Checksum This is used with OutputPoint identification within a set of history rows of the same address. Declaration public UInt64 Checksum { get; } Property Value Type Description UInt64 Hash Transaction hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] Index Input position in the transaction (zero-based). Declaration public UInt32 Index { get; } Property Value Type Description UInt32 IsValid Returns true if and only if this point is not null. Declaration public bool IsValid { get; } Property Value Type Description Boolean"
  },
  "api/Bitprim.HeaderReader.html": {
    "href": "api/Bitprim.HeaderReader.html",
    "title": "Class HeaderReader | Bitprim Doc Site",
    "keywords": "Class HeaderReader Helper for reading the header for each block in a specific set of blocks. Inheritance Object HeaderReader Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class HeaderReader : IDisposable Constructors HeaderReader() Create an empty reader. Declaration public HeaderReader() HeaderReader(HashList, Byte[]) Create a reader with predefined start hashes and stop hash. Declaration public HeaderReader(HashList start, byte[] stop) Parameters Type Name Description HashList start When all of these blocks are synced, start reading. Byte [] stop Stop at this block. Properties IsValid The block set is valid iif all its blocks are valid. Declaration public bool IsValid { get; } Property Value Type Description Boolean StartHashes Define when to start reading: Once these blocks are synced (include the newest one). Declaration public HashList StartHashes { get; set; } Property Value Type Description HashList StopHash Stop at this block (include it in the set). Declaration public byte[] StopHash { get; set; } Property Value Type Description Byte [] Methods Dispose() Release resources. Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetSerializedSize(UInt32) The sum of the header sizes for this set. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version to consider when calculating header size. Returns Type Description UInt64 Sum of header sizes. Reset() Go back to first block in the set. Declaration public void Reset()"
  },
  "api/Bitprim.PointList.html": {
    "href": "api/Bitprim.PointList.html",
    "title": "Class PointList | Bitprim Doc Site",
    "keywords": "Class PointList Inheritance Object NativeList < Point > PointList Implements IDisposable Inherited Members NativeList<Point>.GetEnumerator() NativeList<Point>.Dispose() NativeList<Point>.Dispose(Boolean) NativeList<Point>.Item[UInt32] NativeList<Point>.Count NativeList<Point>.Add(Point) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class PointList : NativeList<Point>, IDisposable Methods AddElement(Point) Declaration public override void AddElement(Point element) Parameters Type Name Description Point element Overrides Bitprim.NativeList<Bitprim.Point>.AddElement(Bitprim.Point) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Point>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Point>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Point>.GetCount() GetNthNativeElement(UInt32) Declaration public override Point GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Point Overrides Bitprim.NativeList<Bitprim.Point>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.NativeList-1.html": {
    "href": "api/Bitprim.NativeList-1.html",
    "title": "Class NativeList<T> | Bitprim Doc Site",
    "keywords": "Class NativeList<T> Inheritance Object NativeList<T> BlockIndexList BlockList HashList HistoryCompactList InputList MempoolTransactionList OutputList PointList StealthCompactList TransactionList Implements IDisposable Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public abstract class NativeList<T> : IEnumerable<T>, IDisposable Type Parameters Name Description T Constructors NativeList() Declaration protected NativeList() NativeList(IntPtr) Declaration protected NativeList(IntPtr nativeInstance) Parameters Type Name Description IntPtr nativeInstance Properties Count Declaration public uint Count { get; } Property Value Type Description UInt32 Item[UInt32] Declaration public T this[uint index] { get; } Parameters Type Name Description UInt32 index Property Value Type Description T Methods Add(T) Declaration public void Add(T element) Parameters Type Name Description T element AddElement(T) Declaration public abstract void AddElement(T element) Parameters Type Name Description T element CreateNativeList() Declaration public abstract IntPtr CreateNativeList() Returns Type Description IntPtr DestroyNativeList() Declaration public abstract void DestroyNativeList() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetCount() Declaration public abstract uint GetCount() Returns Type Description UInt32 GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetNthNativeElement(UInt32) Declaration public abstract T GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description T Implements IDisposable"
  },
  "api/Bitprim.Logging.LogProvider.html": {
    "href": "api/Bitprim.Logging.LogProvider.html",
    "title": "Class LogProvider | Bitprim Doc Site",
    "keywords": "Class LogProvider Provides a mechanism to create instances of Bitprim.Logging.ILog objects. Inheritance Object LogProvider Namespace : Bitprim.Logging Assembly : bitprim-bch.dll Syntax public static class LogProvider : object Properties IsDisabled Gets or sets a value indicating whether this is logging is disabled. Declaration public static bool IsDisabled { get; set; } Property Value Type Description Boolean true if logging is disabled; otherwise, false . Methods SetCurrentLogProvider(ILogProvider) Sets the current log provider. Declaration public static void SetCurrentLogProvider(ILogProvider logProvider) Parameters Type Name Description ILogProvider logProvider The log provider."
  },
  "api/Bitprim.Validations.html": {
    "href": "api/Bitprim.Validations.html",
    "title": "Class Validations | Bitprim Doc Site",
    "keywords": "Class Validations Inheritance Object Validations Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public static class Validations : object Methods IsValidHash(String) Returns true iif hex represents a valid Bitcoin hash (i.e. 32 arbitrary bytes => 64 hex characters) Declaration public static bool IsValidHash(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Boolean True iif hex is a valid hash string IsValidPaymentAddress(String) Check if the hex string represents a valid base58 address Declaration public static bool IsValidPaymentAddress(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Boolean True iif hex is a valid base 58 address"
  },
  "api/Bitprim.PointKind.html": {
    "href": "api/Bitprim.PointKind.html",
    "title": "Enum PointKind | Bitprim Doc Site",
    "keywords": "Enum PointKind Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum PointKind : int Fields Name Description Output Spend"
  },
  "api/Bitprim.Chain.html": {
    "href": "api/Bitprim.Chain.html",
    "title": "Class Chain | Bitprim Doc Site",
    "keywords": "Class Chain Represents the Bitcoin blockchain; meant to offer its different interfaces (query, mining, network) Inheritance Object Chain Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Chain : object Properties IsStale Determine if the node is synchronized (i.e. has the latest copy of the blockchain/is at top height) Declaration public bool IsStale { get; } Property Value Type Description Boolean Methods FetchBlockByHashAsync(Byte[]) Given a block hash, retrieve the full block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Block>>> FetchBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Block >>> FetchBlockByHeightAsync(UInt64) Given a block height, retrieve the full block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Block>>> FetchBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Block >>> FetchBlockByHeightHashTimestampAsync(UInt64) Given a block height, retrieve only block hash and timestamp, asynchronously. Declaration public Task<ApiCallResult<GetBlockHashTimestampResult>> FetchBlockByHeightHashTimestampAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < ApiCallResult < GetBlockHashTimestampResult >> FetchBlockHeaderByHashAsync(Byte[]) Given a block hash, get the header from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Header>>> FetchBlockHeaderByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Header >>> FetchBlockHeaderByHashTxSizesAsync(Byte[]) Given a block hash, retrieve block header, tx hashes and serialized block size, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockHeaderByHashTxSizeResult>> FetchBlockHeaderByHashTxSizesAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockHeaderByHashTxSizeResult >> FetchBlockHeaderByHeightAsync(UInt64) Given a block height, get the header from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<Header>>> FetchBlockHeaderByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < Header >>> FetchBlockHeightAsync(Byte[]) Given a block hash, it queries the chain asynchronously for the block's height. Return right away and uses a callback to return the result. Declaration public Task<ApiCallResult<UInt64>> FetchBlockHeightAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32-byte array representation of the block hash. Identifies it univocally. Returns Type Description Task < ApiCallResult < UInt64 >> FetchBlockLocatorAsync(BlockIndexList) Given a list of indexes, fetch a header reader for them, asynchronously Declaration public Task<DisposableApiCallResult<HeaderReader>> FetchBlockLocatorAsync(BlockIndexList indexes) Parameters Type Name Description BlockIndexList indexes Block indexes Returns Type Description Task < DisposableApiCallResult < HeaderReader >> FetchCompactBlockByHash(Byte[]) Given a block hash, get the compact block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<CompactBlock>>> FetchCompactBlockByHash(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < CompactBlock >>> FetchCompactBlockByHeightAsync(UInt64) Given a block height, get the compact block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<CompactBlock>>> FetchCompactBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Desired block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < CompactBlock >>> FetchConfirmedTransactionsAsync(PaymentAddress, UInt64, UInt64) Get a list of tx ids for a given payment address (asynchronously). Duplicates are already filtered out. Declaration public Task<DisposableApiCallResult<HashList>> FetchConfirmedTransactionsAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < HashList >> FetchHistoryAsync(PaymentAddress, UInt64, UInt64) Get a list of output points, values, and spends for a given payment address (asynchronously) Declaration public Task<DisposableApiCallResult<HistoryCompactList>> FetchHistoryAsync(PaymentAddress address, UInt64 limit, UInt64 fromHeight) Parameters Type Name Description PaymentAddress address Bitcoin payment address to search UInt64 limit Maximum amount of results to fetch UInt64 fromHeight Starting point to search for transactions Returns Type Description Task < DisposableApiCallResult < HistoryCompactList >> FetchLastHeightAsync() Gets the height of the highest block in the local copy of the blockchain, asynchronously. Declaration public Task<ApiCallResult<UInt64>> FetchLastHeightAsync() Returns Type Description Task < ApiCallResult < UInt64 >> FetchMerkleBlockByHashAsync(Byte[]) Given a block hash, get the merkle block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<MerkleBlock>>> FetchMerkleBlockByHashAsync(byte[] blockHash) Parameters Type Name Description Byte [] blockHash 32 bytes of the block hash Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < MerkleBlock >>> FetchMerkleBlockByHeightAsync(UInt64) Given a block height, get the merkle block from the block it identifies, asynchronously. Declaration public Task<DisposableApiCallResult<GetBlockDataResult<MerkleBlock>>> FetchMerkleBlockByHeightAsync(UInt64 height) Parameters Type Name Description UInt64 height Desired block height Returns Type Description Task < DisposableApiCallResult < GetBlockDataResult < MerkleBlock >>> FetchSpendAsync(OutputPoint) Fetch the transaction input which spends the indicated output, asynchronously. Declaration public Task<ApiCallResult<Point>> FetchSpendAsync(OutputPoint outputPoint) Parameters Type Name Description OutputPoint outputPoint Tx hash and index pair where the output was spent. Returns Type Description Task < ApiCallResult < Point >> FetchStealthAsync(Binary, UInt64) Get metadata on potential payment transactions by stealth filter. Given a filter and a height in the chain, it queries the chain for transactions matching the given filter. Declaration public Task<DisposableApiCallResult<StealthCompactList>> FetchStealthAsync(Binary filter, UInt64 fromHeight) Parameters Type Name Description Binary filter Must be at least 8 bits in length. example \"10101010\" UInt64 fromHeight Starting height in the chain to search for transactions Returns Type Description Task < DisposableApiCallResult < StealthCompactList >> FetchTransactionAsync(Byte[], Boolean) Get a transaction by its hash, asynchronously. Declaration public Task<DisposableApiCallResult<GetTxDataResult>> FetchTransactionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True if the transaction must belong to a block Returns Type Description Task < DisposableApiCallResult < GetTxDataResult >> FetchTransactionPositionAsync(Byte[], Boolean) Given a transaction hash, it fetches the height and position inside the block, asynchronously. Declaration public Task<ApiCallResult<GetTxPositionResult>> FetchTransactionPositionAsync(byte[] txHash, bool requireConfirmed) Parameters Type Name Description Byte [] txHash 32 bytes of transaction hash Boolean requireConfirmed True iif the transaction must belong to a block Returns Type Description Task < ApiCallResult < GetTxPositionResult >> GetMempoolTransactions(PaymentAddress, Boolean) Declaration public MempoolTransactionList GetMempoolTransactions(PaymentAddress address, bool useTestnetRules) Parameters Type Name Description PaymentAddress address Boolean useTestnetRules Returns Type Description MempoolTransactionList OrganizeBlockAsync(Block) Given a block, organize it (async). Declaration public Task<ErrorCode> OrganizeBlockAsync(Block block) Parameters Type Name Description Block block The block to organize Returns Type Description Task < ErrorCode > OrganizeTransactionAsync(Transaction) Given a transaction, organize it (async). Declaration public Task<ErrorCode> OrganizeTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction The transaction to organize. Returns Type Description Task < ErrorCode > ValidateTransactionAsync(Transaction) Determine if a transaction is valid for submission to the blockchain. Declaration public Task<ApiCallResult<string>> ValidateTransactionAsync(Transaction transaction) Parameters Type Name Description Transaction transaction Transaction to validate Returns Type Description Task < ApiCallResult < String >>"
  },
  "api/Bitprim.TransactionList.html": {
    "href": "api/Bitprim.TransactionList.html",
    "title": "Class TransactionList | Bitprim Doc Site",
    "keywords": "Class TransactionList Inheritance Object NativeList < Transaction > TransactionList Implements IDisposable Inherited Members NativeList<Transaction>.GetEnumerator() NativeList<Transaction>.Dispose() NativeList<Transaction>.Dispose(Boolean) NativeList<Transaction>.Item[UInt32] NativeList<Transaction>.Count NativeList<Transaction>.Add(Transaction) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class TransactionList : NativeList<Transaction>, IDisposable Methods AddElement(Transaction) Declaration public override void AddElement(Transaction element) Parameters Type Name Description Transaction element Overrides Bitprim.NativeList<Bitprim.Transaction>.AddElement(Bitprim.Transaction) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Transaction>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Transaction>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Transaction>.GetCount() GetNthNativeElement(UInt32) Declaration public override Transaction GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Transaction Overrides Bitprim.NativeList<Bitprim.Transaction>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.NetworkType.html": {
    "href": "api/Bitprim.NetworkType.html",
    "title": "Enum NetworkType | Bitprim Doc Site",
    "keywords": "Enum NetworkType Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public enum NetworkType : int Fields Name Description Mainnet None Regtest Testnet"
  },
  "api/Bitprim.StealthCompact.html": {
    "href": "api/Bitprim.StealthCompact.html",
    "title": "Class StealthCompact | Bitprim Doc Site",
    "keywords": "Class StealthCompact Stealth payment related data. Inheritance Object StealthCompact Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class StealthCompact : IDisposable Properties EphemeralPublicKeyHash 33 bytes. Includes the sign byte (0x02). Declaration public byte[] EphemeralPublicKeyHash { get; } Property Value Type Description Byte [] PublicKeyHash Public key hash in 32 bytes array format. Declaration public byte[] PublicKeyHash { get; } Property Value Type Description Byte [] TransactionHash Transaction hash in 32 byte array format. Declaration public byte[] TransactionHash { get; } Property Value Type Description Byte [] Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize()"
  },
  "api/Bitprim.OutputList.html": {
    "href": "api/Bitprim.OutputList.html",
    "title": "Class OutputList | Bitprim Doc Site",
    "keywords": "Class OutputList Inheritance Object NativeList < Output > OutputList Implements IDisposable Inherited Members NativeList<Output>.GetEnumerator() NativeList<Output>.Dispose() NativeList<Output>.Dispose(Boolean) NativeList<Output>.Item[UInt32] NativeList<Output>.Count NativeList<Output>.Add(Output) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class OutputList : NativeList<Output>, IDisposable Methods AddElement(Output) Declaration public override void AddElement(Output element) Parameters Type Name Description Output element Overrides Bitprim.NativeList<Bitprim.Output>.AddElement(Bitprim.Output) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.Output>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.Output>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.Output>.GetCount() GetNthNativeElement(UInt32) Declaration public override Output GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description Output Overrides Bitprim.NativeList<Bitprim.Output>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.MempoolTransaction.html": {
    "href": "api/Bitprim.MempoolTransaction.html",
    "title": "Class MempoolTransaction | Bitprim Doc Site",
    "keywords": "Class MempoolTransaction Represents an unconfirmed transaction. Inheritance Object MempoolTransaction Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MempoolTransaction : object Properties Address Transaction output address Declaration public string Address { get; } Property Value Type Description String Hash Transaction hash (unique identifier) Declaration public string Hash { get; } Property Value Type Description String Index Transaction index Declaration public UInt64 Index { get; } Property Value Type Description UInt64 PreviousOutputHash Previous output transaction hash Declaration public string PreviousOutputHash { get; } Property Value Type Description String PreviousOutputIndex Previous output transaction index Declaration public string PreviousOutputIndex { get; } Property Value Type Description String Satoshis Sum of output values in Satoshis Declaration public string Satoshis { get; } Property Value Type Description String Timestamp Transaction timestamp Declaration public UInt64 Timestamp { get; } Property Value Type Description UInt64"
  },
  "api/Bitprim.Output.html": {
    "href": "api/Bitprim.Output.html",
    "title": "Class Output | Bitprim Doc Site",
    "keywords": "Class Output Represents one of the outputs of a Transaction. Inheritance Object Output Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Output : IDisposable Constructors Output() Create an empty output. Declaration public Output() Output(UInt64, Script) Create an output from a value and a script. Declaration public Output(UInt64 value, Script script) Parameters Type Name Description UInt64 value In Satoshis. Script script Output script. Properties IsValid Returns false if and only if output is not found. Declaration public bool IsValid { get; } Property Value Type Description Boolean Script Output script. Declaration public Script Script { get; } Property Value Type Description Script SignatureOperationCount The amount of signature operations in the output script. Declaration public UInt64 SignatureOperationCount { get; } Property Value Type Description UInt64 Value Spend, in Satoshis. Declaration public UInt64 Value { get; } Property Value Type Description UInt64 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetSerializedSize(Boolean) Output size in bytes. Declaration public UInt64 GetSerializedSize(bool wire) Parameters Type Name Description Boolean wire If true, size will include size of 'uint32' for storing spender height. Returns Type Description UInt64 Size in bytes. PaymentAddress(Boolean) Declaration public PaymentAddress PaymentAddress(bool useTestnetRules) Parameters Type Name Description Boolean useTestnetRules Returns Type Description PaymentAddress"
  },
  "api/Bitprim.MempoolTransactionList.html": {
    "href": "api/Bitprim.MempoolTransactionList.html",
    "title": "Class MempoolTransactionList | Bitprim Doc Site",
    "keywords": "Class MempoolTransactionList Inheritance Object NativeList < MempoolTransaction > MempoolTransactionList Implements IDisposable Inherited Members NativeList<MempoolTransaction>.GetEnumerator() NativeList<MempoolTransaction>.Dispose() NativeList<MempoolTransaction>.Dispose(Boolean) NativeList<MempoolTransaction>.Item[UInt32] NativeList<MempoolTransaction>.Count NativeList<MempoolTransaction>.Add(MempoolTransaction) Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class MempoolTransactionList : NativeList<MempoolTransaction>, IDisposable Methods AddElement(MempoolTransaction) Declaration public override void AddElement(MempoolTransaction element) Parameters Type Name Description MempoolTransaction element Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.AddElement(Bitprim.MempoolTransaction) CreateNativeList() Declaration public override IntPtr CreateNativeList() Returns Type Description IntPtr Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.CreateNativeList() DestroyNativeList() Declaration public override void DestroyNativeList() Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.DestroyNativeList() GetCount() Declaration public override uint GetCount() Returns Type Description UInt32 Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.GetCount() GetNthNativeElement(UInt32) Declaration public override MempoolTransaction GetNthNativeElement(uint n) Parameters Type Name Description UInt32 n Returns Type Description MempoolTransaction Overrides Bitprim.NativeList<Bitprim.MempoolTransaction>.GetNthNativeElement(System.UInt32) Implements IDisposable"
  },
  "api/Bitprim.GetTxPositionResult.html": {
    "href": "api/Bitprim.GetTxPositionResult.html",
    "title": "Struct GetTxPositionResult | Bitprim Doc Site",
    "keywords": "Struct GetTxPositionResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public struct GetTxPositionResult Properties BlockHeight Declaration public UInt64 BlockHeight { get; set; } Property Value Type Description UInt64 Index Declaration public UInt64 Index { get; set; } Property Value Type Description UInt64"
  },
  "api/Bitprim.Executor.BlockHandler.html": {
    "href": "api/Bitprim.Executor.BlockHandler.html",
    "title": "Delegate Executor.BlockHandler | Bitprim Doc Site",
    "keywords": "Delegate Executor.BlockHandler Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public delegate bool BlockHandler(ErrorCode e, UInt64 u, BlockList incoming, BlockList outgoing); Parameters Type Name Description ErrorCode e UInt64 u BlockList incoming BlockList outgoing Returns Type Description Boolean"
  },
  "api/Bitprim.GetTxDataResult.html": {
    "href": "api/Bitprim.GetTxDataResult.html",
    "title": "Class GetTxDataResult | Bitprim Doc Site",
    "keywords": "Class GetTxDataResult Inheritance Object GetTxDataResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class GetTxDataResult : IDisposable Properties Tx Declaration public Transaction Tx { get; set; } Property Value Type Description Transaction TxPosition Declaration public GetTxPositionResult TxPosition { get; set; } Property Value Type Description GetTxPositionResult Methods Dispose() Declaration public void Dispose()"
  },
  "api/Bitprim.Input.html": {
    "href": "api/Bitprim.Input.html",
    "title": "Class Input | Bitprim Doc Site",
    "keywords": "Class Input Represents a Transaction input. Inheritance Object Input Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Input : IDisposable Constructors Input() Create an empty input. Declaration public Input() Input(Output, Script, UInt32) Create an input from a previous output, a script and a sequence number. Declaration public Input(Output previousOutput, Script script, UInt32 sequence) Parameters Type Name Description Output previousOutput The output to spend. Script script Input script. UInt32 sequence Zero-based, indexes this input in the input set. Properties IsFinal Returns 1 iif sequence is equal to max_sequence. Declaration public bool IsFinal { get; } Property Value Type Description Boolean IsValid Returns false if and only if previous outputs or input script are invalid. Declaration public bool IsValid { get; } Property Value Type Description Boolean PreviousOutput Returns a reference to the previous output, as an OutputPoint: a transaction hash and index pair. Declaration public OutputPoint PreviousOutput { get; } Property Value Type Description OutputPoint Script The input's script. Declaration public Script Script { get; } Property Value Type Description Script Sequence Zero-based index for the input in the transaction's input set. Declaration public UInt32 Sequence { get; } Property Value Type Description UInt32 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetSerializedSize(Boolean) Input size in bytes. Declaration public UInt64 GetSerializedSize(bool wire) Parameters Type Name Description Boolean wire Iif true, consider 4 extra bytes from wire field. Returns Type Description UInt64 Size in bytes. GetSignatureOperationsCount(Boolean) Total amount of sigops (signature operations) in the input script. Declaration public UInt64 GetSignatureOperationsCount(bool bip16Active) Parameters Type Name Description Boolean bip16Active Iif true, count BIP 16 active sig ops Returns Type Description UInt64 Sigops count."
  },
  "api/Bitprim.GetBlockHeaderByHashTxSizeResult.html": {
    "href": "api/Bitprim.GetBlockHeaderByHashTxSizeResult.html",
    "title": "Class GetBlockHeaderByHashTxSizeResult | Bitprim Doc Site",
    "keywords": "Class GetBlockHeaderByHashTxSizeResult Inheritance Object GetBlockHeaderByHashTxSizeResult Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class GetBlockHeaderByHashTxSizeResult : IDisposable Properties Block Declaration public GetBlockDataResult<Header> Block { get; set; } Property Value Type Description GetBlockDataResult < Header > SerializedBlockSize Declaration public UInt64 SerializedBlockSize { get; set; } Property Value Type Description UInt64 TransactionHashes Declaration public HashList TransactionHashes { get; set; } Property Value Type Description HashList Methods Dispose() Declaration public void Dispose()"
  },
  "api/Bitprim.Header.html": {
    "href": "api/Bitprim.Header.html",
    "title": "Class Header | Bitprim Doc Site",
    "keywords": "Class Header Represents a full Bitcoin blockchain block. Inheritance Object Header Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Header : IDisposable Properties Bits Difficulty threshold. Declaration public UInt32 Bits { get; set; } Property Value Type Description UInt32 Hash Block hash in 32 byte array format. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] IsValid Returns true if and only if the header conforms to the Bitcoin protocol format. Declaration public bool IsValid { get; } Property Value Type Description Boolean Merkle Merkle root in 32 byte array format. Declaration public byte[] Merkle { get; } Property Value Type Description Byte [] Nonce The nonce that allowed this block to be added to the blockchain. Declaration public UInt32 Nonce { get; set; } Property Value Type Description UInt32 PreviousBlockHash Hash belonging to the immediately previous block in the blockchain, as a 32 byte array. This is all zeros for the first block, a.k.a. Genesis. Declaration public byte[] PreviousBlockHash { get; } Property Value Type Description Byte [] ProofString Hexadecimal string representation of the block's proof (which is a 256-bit number). Declaration public string ProofString { get; } Property Value Type Description String Timestamp Block timestamp in UNIX Epoch format (seconds since January 1st 1970) Assume UTC 0. Declaration public UInt32 Timestamp { get; set; } Property Value Type Description UInt32 Version Header protocol version. Declaration public UInt32 Version { get; set; } Property Value Type Description UInt32 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize()"
  },
  "api/Bitprim.GetBlockDataResult-1.html": {
    "href": "api/Bitprim.GetBlockDataResult-1.html",
    "title": "Class GetBlockDataResult<TBlockData> | Bitprim Doc Site",
    "keywords": "Class GetBlockDataResult<TBlockData> Inheritance Object GetBlockDataResult<TBlockData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public sealed class GetBlockDataResult<TBlockData> : IDisposable where TBlockData : IDisposable Type Parameters Name Description TBlockData Fields BlockHeight Declaration public UInt64 BlockHeight Field Value Type Description UInt64 Properties BlockData Declaration public TBlockData BlockData { get; set; } Property Value Type Description TBlockData Methods Dispose() Declaration public void Dispose()"
  },
  "api/Bitprim.Executor.TransactionHandler.html": {
    "href": "api/Bitprim.Executor.TransactionHandler.html",
    "title": "Delegate Executor.TransactionHandler | Bitprim Doc Site",
    "keywords": "Delegate Executor.TransactionHandler Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public delegate bool TransactionHandler(ErrorCode e, Transaction newTx); Parameters Type Name Description ErrorCode e Transaction newTx Returns Type Description Boolean"
  },
  "api/Bitprim.ApiCallResult-1.html": {
    "href": "api/Bitprim.ApiCallResult-1.html",
    "title": "Class ApiCallResult<TResultData> | Bitprim Doc Site",
    "keywords": "Class ApiCallResult<TResultData> Inheritance Object ApiCallResult<TResultData> Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class ApiCallResult<TResultData> : object Type Parameters Name Description TResultData Properties ErrorCode Declaration public ErrorCode ErrorCode { get; set; } Property Value Type Description ErrorCode Result Declaration public TResultData Result { get; set; } Property Value Type Description TResultData"
  },
  "api/Bitprim.Block.html": {
    "href": "api/Bitprim.Block.html",
    "title": "Class Block | Bitprim Doc Site",
    "keywords": "Class Block Represents a full Bitcoin blockchain block. Inheritance Object Block Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Block : IDisposable Properties Override Claim Name It's an overridden summary in markdown format This is overriding methods. You can override parameter descriptions for methods, you can even add exceptions to methods. Check the intermediate obj folder to see the data model of the generated method/class. Override Yaml header should follow the data structure. Declaration public UInt64 Claim { get; } Property Value Type Description It's overridden description for return. type must be specified. Exceptions Type Condition This is an overridden argument exception. you can add additional exception by adding different exception type . Fees Miner fees included in the block's coinbase transaction. Declaration public UInt64 Fees { get; } Property Value Type Description UInt64 Hash The block's hash as a 32 byte array. Declaration public byte[] Hash { get; } Property Value Type Description Byte [] Header The block's header Declaration public Header Header { get; } Property Value Type Description Header IsDistinctTransactionSet Returns true iif all transactions in the block have a unique hash (i.e. no duplicates) Declaration public bool IsDistinctTransactionSet { get; } Property Value Type Description Boolean IsExtraCoinbase Returns true iif there is more than one coinbase transaction in the block. Declaration public bool IsExtraCoinbase { get; } Property Value Type Description Boolean IsInternalDoubleSpend Returns true iif there is at least one double-spent transaction in this block Declaration public bool IsInternalDoubleSpend { get; } Property Value Type Description Boolean IsValid Returns true iif the block is valid Declaration public bool IsValid { get; } Property Value Type Description Boolean IsValidMerkleRoot Returns true iif the generated Merkle root equals the header's Merkle root. Declaration public bool IsValidMerkleRoot { get; } Property Value Type Description Boolean MerkleRoot The block's Merkle root, as a 32 byte array. Declaration public byte[] MerkleRoot { get; } Property Value Type Description Byte [] Proof Declaration public string Proof { get; } Property Value Type Description String SignatureOperationsCount Amount of signature operations in the block. Declaration public UInt64 SignatureOperationsCount { get; } Property Value Type Description UInt64 TransactionCount The total amount of transactions that the block contains. Declaration public UInt64 TransactionCount { get; } Property Value Type Description UInt64 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() GetBlockReward(UInt64) Reward = Subsidy + Fees, for the block at the given height. Declaration public UInt64 GetBlockReward(UInt64 height) Parameters Type Name Description UInt64 height Block height in the chain; identifies it univocally. Returns Type Description UInt64 UInt64 representation of the block's reward. GetNthTransaction(UInt64) Given a position in the block, returns the corresponding transaction. Declaration public Transaction GetNthTransaction(UInt64 n) Parameters Type Name Description UInt64 n Zero-based index Returns Type Description Transaction Full transaction object GetSerializedSize(UInt32) Block size in bytes. Declaration public UInt64 GetSerializedSize(UInt32 version) Parameters Type Name Description UInt32 version Protocol version. Returns Type Description UInt64 UInt64 representation of the block size in bytes. GetSignatureOperationsCount(Boolean) Amount of signature operations in the block. Declaration public UInt64 GetSignatureOperationsCount(bool bip16Active) Parameters Type Name Description Boolean bip16Active Iif true, count bip16 active operations. Returns Type Description UInt64 The amount of signature operations in this block GetSubsidy(UInt64) The block subsidy. It's the same value for all blocks. Declaration public static UInt64 GetSubsidy(UInt64 height) Parameters Type Name Description UInt64 height The block's height. It identifies it univocally. Returns Type Description UInt64 UInt64 representation of the block subsidy GetTotalInputs(Boolean) The sum of all inputs of all transactions in the block. Declaration public UInt64 GetTotalInputs(bool withCoinbase) Parameters Type Name Description Boolean withCoinbase Iif true, consider coinbase transactions. Returns Type Description UInt64 UInt64 representation of the sum IsFinal(UInt64) Returns true iif every transaction in the block is final or not. Declaration public bool IsFinal(UInt64 height) Parameters Type Name Description UInt64 height Returns Type Description Boolean IsValidCoinbaseClaim(UInt64) Given a block height, return true iif its coinbase claim is not higher than the deserved reward. Declaration public bool IsValidCoinbaseClaim(UInt64 height) Parameters Type Name Description UInt64 height The height which identifies the block to examine Returns Type Description Boolean True iif 1 if coinbase claim is not higher than the deserved reward. IsValidCoinbaseScript(UInt64) Returns true iif the block's coinbase script is valid. Declaration public bool IsValidCoinbaseScript(UInt64 height) Parameters Type Name Description UInt64 height The block's height. Identifies it univocally. Returns Type Description Boolean True iif the block's coinbase script is valid. ToData(Boolean) Raw block data. Declaration public byte[] ToData(bool wire) Parameters Type Name Description Boolean wire Iif true, include data size at the beginning. Returns Type Description Byte [] Byte array with block data."
  },
  "api/Bitprim.html": {
    "href": "api/Bitprim.html",
    "title": "Namespace Bitprim | Bitprim Doc Site",
    "keywords": "Namespace Bitprim Classes ApiCallResult<TResultData> Binary Represents a binary filter. Block Represents a full Bitcoin blockchain block. BlockIndexList BlockList BlockReader Allows user to read a specific set of blocks from the blockchain. Chain Represents the Bitcoin blockchain; meant to offer its different interfaces (query, mining, network) CompactBlock TODO: Omit from docs (not implemented yet) BIP 512 representation of a block for reduced propagation bandwidth. DisposableApiCallResult<TResultData> Executor Controls the execution of the Bitprim bitcoin node. GetBlockDataResult<TBlockData> GetBlockHashTimestampResult GetBlockHeaderByHashTxSizeResult GetTxDataResult HashList Header Represents a full Bitcoin blockchain block. HeaderReader Helper for reading the header for each block in a specific set of blocks. HistoryCompact Output points, values, and spends for a payment address. HistoryCompactList Input Represents a Transaction input. InputList MempoolTransaction Represents an unconfirmed transaction. MempoolTransactionList MerkleBlock Merkle tree representation of a blockchain block. NativeList<T> NodeSettings Output Represents one of the outputs of a Transaction. OutputList OutputPoint Transaction hash and index pair representing one of the transaction outputs. PaymentAddress Represents a Bitcoin wallet address. Point Represents one of the transaction inputs. It's a transaction hash and index pair. PointList Script Represents a transaction script. StealthCompact Stealth payment related data. StealthCompactList Transaction Represents a Bitcoin transaction. TransactionList Validations Structs GetTxPositionResult Enums CurrencyType ErrorCode NetworkType PointKind Delegates Executor.BlockHandler Executor.TransactionHandler"
  },
  "api/Bitprim.Binary.html": {
    "href": "api/Bitprim.Binary.html",
    "title": "Class Binary | Bitprim Doc Site",
    "keywords": "Class Binary Represents a binary filter. This is a class talking about CAT . NOTE This is a CAT class Refer to Block to test. Inheritance Object Binary Namespace : Bitprim Assembly : bitprim-bch.dll Syntax public class Binary : IDisposable Remarks THIS is remarks overridden in MARKDWON file Constructors Binary() Create an empty binary object. Declaration public Binary() Binary(String) Creates a binary filter from a binary string. Declaration public Binary(string hexString) Parameters Type Name Description String hexString Binary string. Example: '10111010101011011111000000001101' Binary(UInt64, Byte[], UInt64) Creates a binary filter from an int array. Declaration public Binary(UInt64 bitsSize, byte[] blocks, UInt64 n) Parameters Type Name Description UInt64 bitsSize Elements size Byte [] blocks Filter representation. Example: '[186,173,240,13]'. UInt64 n Array length in amount of elements. Properties Encoded Filter representation as binary string. Declaration public string Encoded { get; } Property Value Type Description String Methods ByteArrayToHexString(Byte[]) Convert byte array to hex tring Declaration public static string ByteArrayToHexString(byte[] ba) Parameters Type Name Description Byte [] ba Byte array Returns Type Description String Hex string representation, with as many characters as bytes Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Declaration protected void Finalize() HexStringToByteArray(String) Convert hex string to byte array Declaration public static byte[] HexStringToByteArray(string hex) Parameters Type Name Description String hex Hex string Returns Type Description Byte [] ASCII byte array HexStringToByteArray(String, Boolean) Convert hex string to byte array Declaration public static byte[] HexStringToByteArray(string hex, bool reverse) Parameters Type Name Description String hex Hex string Boolean reverse Reverse the resulting array Returns Type Description Byte [] ASCII byte array"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Bitprim | Bitprim Doc Site",
    "keywords": "\"Bringing decentralized solutions to everyday life\" Welcome to Bitprim Bitprim is a multi-coin developing platform, working with multi-languages programming compatible with the Satoshi Client. Download: Github: https://github.com/bitprim Slack: bitprim.slack.com Email: info@bitprim.org The platform includes: 100% Satoshi Client Compatible Protocol Implementation Mining Engine Multi-Coin Bitcoin Cash (BCH) Bitcoin (BTC) Litecoin (LTC) RPC support C Interface C++ Interface Interfaces for Go, Python, Node, C#, Rust and Eiffel Full REST API implementation, compatible with insight API"
  },
  "restapi/bitprim-api.html": {
    "href": "restapi/bitprim-api.html",
    "title": "bitprim | Bitprim Doc Site",
    "keywords": "bitprim Address ApiAddrByPaymentAddressGet Request GET /api/addr/{paymentAddress}[?noTxList&from&to] Parameters Name Type Value Notes *paymentAddress string noTxList integer from integer to integer Responses Status Code Description Samples 200 Success ApiAddrByPaymentAddressBalanceGet Request GET /api/addr/{paymentAddress}/balance Parameters Name Type Value Notes *paymentAddress string Responses Status Code Description Samples 200 Success ApiAddrByPaymentAddressTotalReceivedGet Request GET /api/addr/{paymentAddress}/totalReceived Parameters Name Type Value Notes *paymentAddress string Responses Status Code Description Samples 200 Success ApiAddrByPaymentAddressTotalSentGet Request GET /api/addr/{paymentAddress}/totalSent Parameters Name Type Value Notes *paymentAddress string Responses Status Code Description Samples 200 Success ApiAddrByPaymentAddressUnconfirmedBalanceGet Request GET /api/addr/{paymentAddress}/unconfirmedBalance Parameters Name Type Value Notes *paymentAddress string Responses Status Code Description Samples 200 Success ApiAddrByPaymentAddressUtxoGet Request GET /api/addr/{paymentAddress}/utxo Parameters Name Type Value Notes *paymentAddress string Responses Status Code Description Samples 200 Success ApiAddrsByPaymentAddressesUtxoGet Request GET /api/addrs/{paymentAddresses}/utxo Parameters Name Type Value Notes *paymentAddresses string Responses Status Code Description Samples 200 Success ApiAddrsUtxoPost Request POST /api/addrs/utxo Parameters Name Type Value Notes requestParams Responses Status Code Description Samples 200 Success Block ApiBlockByHashGet Request GET /api/block/{hash} Parameters Name Type Value Notes *hash string Responses Status Code Description Samples 200 Success ApiBlock-indexByHeightGet Request GET /api/block-index/{height} Parameters Name Type Value Notes *height integer Responses Status Code Description Samples 200 Success ApiRawblockByHashGet Request GET /api/rawblock/{hash} Parameters Name Type Value Notes *hash string Responses Status Code Description Samples 200 Success ApiRawblock-indexByHeightGet Request GET /api/rawblock-index/{height} Parameters Name Type Value Notes *height integer Responses Status Code Description Samples 200 Success ApiBlocksGet Request GET /api/blocks[?limit&blockDate] Parameters Name Type Value Notes limit integer blockDate string Responses Status Code Description Samples 200 Success Chain ApiHealthcheckGet Request GET /api/healthcheck[?minimumSync] Parameters Name Type Value Notes minimumSync number Responses Status Code Description Samples 200 Success ApiSyncGet Request GET /api/sync Responses Status Code Description Samples 200 Success ApiStatusGet Request GET /api/status[?q] Parameters Name Type Value Notes q string Responses Status Code Description Samples 200 Success ApiUtilsEstimatefeeGet Request GET /api/utils/estimatefee[?nbBlocks] Parameters Name Type Value Notes nbBlocks integer Responses Status Code Description Samples 200 Success ApiCurrencyGet Request GET /api/currency Responses Status Code Description Samples 200 Success Message ApiMessagesVerifyGet Request GET /api/messages/verify[?address&signature&message] Parameters Name Type Value Notes address string signature string message string Responses Status Code Description Samples 200 Success ApiMessagesVerifyPost Request POST /api/messages/verify[?address&signature&message] Parameters Name Type Value Notes address string signature string message string Responses Status Code Description Samples 200 Success Peer ApiPeerGet Request GET /api/peer Responses Status Code Description Samples 200 Success ApiVersionGet Request GET /api/version Responses Status Code Description Samples 200 Success Transaction ApiTxByHashGet Request GET /api/tx/{hash}[?requireConfirmed] Parameters Name Type Value Notes *hash string requireConfirmed integer Responses Status Code Description Samples 200 Success ApiRawtxByHashGet Request GET /api/rawtx/{hash} Parameters Name Type Value Notes *hash string Responses Status Code Description Samples 200 Success ApiTxsGet Request GET /api/txs[?block&address&pageNum] Parameters Name Type Value Notes block string address string pageNum integer Responses Status Code Description Samples 200 Success ApiAddrsByPaymentAddressesTxsGet Request GET /api/addrs/{paymentAddresses}/txs[?from&to] Parameters Name Type Value Notes *paymentAddresses string from integer to integer Responses Status Code Description Samples 200 Success ApiAddrsTxsPost Request POST /api/addrs/txs Parameters Name Type Value Notes request Responses Status Code Description Samples 200 Success ApiTxSendPost Request POST /api/tx/send Parameters Name Type Value Notes request Responses Status Code Description Samples 200 Success"
  }
}